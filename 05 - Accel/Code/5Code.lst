                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.0 #8981 (Apr  5 2014) (MINGW64)
                                      4 ; This file was generated Fri May 08 12:15:26 2015
                                      5 ;--------------------------------------------------------
                                      6 	.module 5Code
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _PCA_ISR
                                     13 	.globl _main
                                     14 	.globl _read_keypad
                                     15 	.globl _strlen
                                     16 	.globl _Sys_Init
                                     17 	.globl _UART0_Init
                                     18 	.globl _SYSCLK_Init
                                     19 	.globl _vsprintf
                                     20 	.globl _printf
                                     21 	.globl _atoi
                                     22 	.globl _abs
                                     23 	.globl _BUS_SCL
                                     24 	.globl _BUS_TOE
                                     25 	.globl _BUS_FTE
                                     26 	.globl _BUS_AA
                                     27 	.globl _BUS_INT
                                     28 	.globl _BUS_STOP
                                     29 	.globl _BUS_START
                                     30 	.globl _BUS_EN
                                     31 	.globl _BUS_BUSY
                                     32 	.globl _SPIF
                                     33 	.globl _WCOL
                                     34 	.globl _MODF
                                     35 	.globl _RXOVRN
                                     36 	.globl _TXBSY
                                     37 	.globl _SLVSEL
                                     38 	.globl _MSTEN
                                     39 	.globl _SPIEN
                                     40 	.globl _AD0EN
                                     41 	.globl _ADCEN
                                     42 	.globl _AD0TM
                                     43 	.globl _ADCTM
                                     44 	.globl _AD0INT
                                     45 	.globl _ADCINT
                                     46 	.globl _AD0BUSY
                                     47 	.globl _ADBUSY
                                     48 	.globl _AD0CM1
                                     49 	.globl _ADSTM1
                                     50 	.globl _AD0CM0
                                     51 	.globl _ADSTM0
                                     52 	.globl _AD0WINT
                                     53 	.globl _ADWINT
                                     54 	.globl _AD0LJST
                                     55 	.globl _ADLJST
                                     56 	.globl _CF
                                     57 	.globl _CR
                                     58 	.globl _CCF4
                                     59 	.globl _CCF3
                                     60 	.globl _CCF2
                                     61 	.globl _CCF1
                                     62 	.globl _CCF0
                                     63 	.globl _CY
                                     64 	.globl _AC
                                     65 	.globl _F0
                                     66 	.globl _RS1
                                     67 	.globl _RS0
                                     68 	.globl _OV
                                     69 	.globl _F1
                                     70 	.globl _P
                                     71 	.globl _TF2
                                     72 	.globl _EXF2
                                     73 	.globl _RCLK
                                     74 	.globl _TCLK
                                     75 	.globl _EXEN2
                                     76 	.globl _TR2
                                     77 	.globl _CT2
                                     78 	.globl _CPRL2
                                     79 	.globl _BUSY
                                     80 	.globl _ENSMB
                                     81 	.globl _STA
                                     82 	.globl _STO
                                     83 	.globl _SI
                                     84 	.globl _AA
                                     85 	.globl _SMBFTE
                                     86 	.globl _SMBTOE
                                     87 	.globl _PT2
                                     88 	.globl _PS
                                     89 	.globl _PS0
                                     90 	.globl _PT1
                                     91 	.globl _PX1
                                     92 	.globl _PT0
                                     93 	.globl _PX0
                                     94 	.globl _P3_7
                                     95 	.globl _P3_6
                                     96 	.globl _P3_5
                                     97 	.globl _P3_4
                                     98 	.globl _P3_3
                                     99 	.globl _P3_2
                                    100 	.globl _P3_1
                                    101 	.globl _P3_0
                                    102 	.globl _EA
                                    103 	.globl _ET2
                                    104 	.globl _ES
                                    105 	.globl _ES0
                                    106 	.globl _ET1
                                    107 	.globl _EX1
                                    108 	.globl _ET0
                                    109 	.globl _EX0
                                    110 	.globl _P2_7
                                    111 	.globl _P2_6
                                    112 	.globl _P2_5
                                    113 	.globl _P2_4
                                    114 	.globl _P2_3
                                    115 	.globl _P2_2
                                    116 	.globl _P2_1
                                    117 	.globl _P2_0
                                    118 	.globl _S0MODE
                                    119 	.globl _SM00
                                    120 	.globl _SM0
                                    121 	.globl _SM10
                                    122 	.globl _SM1
                                    123 	.globl _MCE0
                                    124 	.globl _SM20
                                    125 	.globl _SM2
                                    126 	.globl _REN0
                                    127 	.globl _REN
                                    128 	.globl _TB80
                                    129 	.globl _TB8
                                    130 	.globl _RB80
                                    131 	.globl _RB8
                                    132 	.globl _TI0
                                    133 	.globl _TI
                                    134 	.globl _RI0
                                    135 	.globl _RI
                                    136 	.globl _P1_7
                                    137 	.globl _P1_6
                                    138 	.globl _P1_5
                                    139 	.globl _P1_4
                                    140 	.globl _P1_3
                                    141 	.globl _P1_2
                                    142 	.globl _P1_1
                                    143 	.globl _P1_0
                                    144 	.globl _TF1
                                    145 	.globl _TR1
                                    146 	.globl _TF0
                                    147 	.globl _TR0
                                    148 	.globl _IE1
                                    149 	.globl _IT1
                                    150 	.globl _IE0
                                    151 	.globl _IT0
                                    152 	.globl _P0_7
                                    153 	.globl _P0_6
                                    154 	.globl _P0_5
                                    155 	.globl _P0_4
                                    156 	.globl _P0_3
                                    157 	.globl _P0_2
                                    158 	.globl _P0_1
                                    159 	.globl _P0_0
                                    160 	.globl _PCA0CP4
                                    161 	.globl _PCA0CP3
                                    162 	.globl _PCA0CP2
                                    163 	.globl _PCA0CP1
                                    164 	.globl _PCA0CP0
                                    165 	.globl _PCA0
                                    166 	.globl _DAC1
                                    167 	.globl _DAC0
                                    168 	.globl _ADC0LT
                                    169 	.globl _ADC0GT
                                    170 	.globl _ADC0
                                    171 	.globl _RCAP4
                                    172 	.globl _TMR4
                                    173 	.globl _TMR3RL
                                    174 	.globl _TMR3
                                    175 	.globl _RCAP2
                                    176 	.globl _TMR2
                                    177 	.globl _TMR1
                                    178 	.globl _TMR0
                                    179 	.globl _WDTCN
                                    180 	.globl _PCA0CPH4
                                    181 	.globl _PCA0CPH3
                                    182 	.globl _PCA0CPH2
                                    183 	.globl _PCA0CPH1
                                    184 	.globl _PCA0CPH0
                                    185 	.globl _PCA0H
                                    186 	.globl _SPI0CN
                                    187 	.globl _EIP2
                                    188 	.globl _EIP1
                                    189 	.globl _TH4
                                    190 	.globl _TL4
                                    191 	.globl _SADDR1
                                    192 	.globl _SBUF1
                                    193 	.globl _SCON1
                                    194 	.globl _B
                                    195 	.globl _RSTSRC
                                    196 	.globl _PCA0CPL4
                                    197 	.globl _PCA0CPL3
                                    198 	.globl _PCA0CPL2
                                    199 	.globl _PCA0CPL1
                                    200 	.globl _PCA0CPL0
                                    201 	.globl _PCA0L
                                    202 	.globl _ADC0CN
                                    203 	.globl _EIE2
                                    204 	.globl _EIE1
                                    205 	.globl _RCAP4H
                                    206 	.globl _RCAP4L
                                    207 	.globl _XBR2
                                    208 	.globl _XBR1
                                    209 	.globl _XBR0
                                    210 	.globl _ACC
                                    211 	.globl _PCA0CPM4
                                    212 	.globl _PCA0CPM3
                                    213 	.globl _PCA0CPM2
                                    214 	.globl _PCA0CPM1
                                    215 	.globl _PCA0CPM0
                                    216 	.globl _PCA0MD
                                    217 	.globl _PCA0CN
                                    218 	.globl _DAC1CN
                                    219 	.globl _DAC1H
                                    220 	.globl _DAC1L
                                    221 	.globl _DAC0CN
                                    222 	.globl _DAC0H
                                    223 	.globl _DAC0L
                                    224 	.globl _REF0CN
                                    225 	.globl _PSW
                                    226 	.globl _SMB0CR
                                    227 	.globl _TH2
                                    228 	.globl _TL2
                                    229 	.globl _RCAP2H
                                    230 	.globl _RCAP2L
                                    231 	.globl _T4CON
                                    232 	.globl _T2CON
                                    233 	.globl _ADC0LTH
                                    234 	.globl _ADC0LTL
                                    235 	.globl _ADC0GTH
                                    236 	.globl _ADC0GTL
                                    237 	.globl _SMB0ADR
                                    238 	.globl _SMB0DAT
                                    239 	.globl _SMB0STA
                                    240 	.globl _SMB0CN
                                    241 	.globl _ADC0H
                                    242 	.globl _ADC0L
                                    243 	.globl _P1MDIN
                                    244 	.globl _ADC0CF
                                    245 	.globl _AMX0SL
                                    246 	.globl _AMX0CF
                                    247 	.globl _SADEN0
                                    248 	.globl _IP
                                    249 	.globl _FLACL
                                    250 	.globl _FLSCL
                                    251 	.globl _P74OUT
                                    252 	.globl _OSCICN
                                    253 	.globl _OSCXCN
                                    254 	.globl _P3
                                    255 	.globl __XPAGE
                                    256 	.globl _EMI0CN
                                    257 	.globl _SADEN1
                                    258 	.globl _P3IF
                                    259 	.globl _AMX1SL
                                    260 	.globl _ADC1CF
                                    261 	.globl _ADC1CN
                                    262 	.globl _SADDR0
                                    263 	.globl _IE
                                    264 	.globl _P3MDOUT
                                    265 	.globl _PRT3CF
                                    266 	.globl _P2MDOUT
                                    267 	.globl _PRT2CF
                                    268 	.globl _P1MDOUT
                                    269 	.globl _PRT1CF
                                    270 	.globl _P0MDOUT
                                    271 	.globl _PRT0CF
                                    272 	.globl _EMI0CF
                                    273 	.globl _EMI0TC
                                    274 	.globl _P2
                                    275 	.globl _CPT1CN
                                    276 	.globl _CPT0CN
                                    277 	.globl _SPI0CKR
                                    278 	.globl _ADC1
                                    279 	.globl _SPI0DAT
                                    280 	.globl _SPI0CFG
                                    281 	.globl _SBUF0
                                    282 	.globl _SBUF
                                    283 	.globl _SCON0
                                    284 	.globl _SCON
                                    285 	.globl _P7
                                    286 	.globl _TMR3H
                                    287 	.globl _TMR3L
                                    288 	.globl _TMR3RLH
                                    289 	.globl _TMR3RLL
                                    290 	.globl _TMR3CN
                                    291 	.globl _P1
                                    292 	.globl _PSCTL
                                    293 	.globl _CKCON
                                    294 	.globl _TH1
                                    295 	.globl _TH0
                                    296 	.globl _TL1
                                    297 	.globl _TL0
                                    298 	.globl _TMOD
                                    299 	.globl _TCON
                                    300 	.globl _PCON
                                    301 	.globl _P6
                                    302 	.globl _P5
                                    303 	.globl _P4
                                    304 	.globl _DPH
                                    305 	.globl _DPL
                                    306 	.globl _SP
                                    307 	.globl _P0
                                    308 	.globl _error_sum
                                    309 	.globl _kd_y
                                    310 	.globl _kd_x
                                    311 	.globl _ks
                                    312 	.globl _STEERING_PW
                                    313 	.globl _MOTOR_PW
                                    314 	.globl _counts_lcd
                                    315 	.globl _counts_accel
                                    316 	.globl _counts
                                    317 	.globl _y0
                                    318 	.globl _x0
                                    319 	.globl _gy
                                    320 	.globl _gx
                                    321 	.globl _PW_MAX
                                    322 	.globl _PW_MIN
                                    323 	.globl _PW_NEUT
                                    324 	.globl _i2c_read_data_PARM_4
                                    325 	.globl _i2c_read_data_PARM_3
                                    326 	.globl _i2c_read_data_PARM_2
                                    327 	.globl _i2c_write_data_PARM_4
                                    328 	.globl _i2c_write_data_PARM_3
                                    329 	.globl _i2c_write_data_PARM_2
                                    330 	.globl _putchar
                                    331 	.globl _getchar
                                    332 	.globl _lcd_print
                                    333 	.globl _lcd_clear
                                    334 	.globl _kpd_input
                                    335 	.globl _delay_time
                                    336 	.globl _i2c_start
                                    337 	.globl _i2c_write
                                    338 	.globl _i2c_write_and_stop
                                    339 	.globl _i2c_read
                                    340 	.globl _i2c_read_and_stop
                                    341 	.globl _i2c_write_data
                                    342 	.globl _i2c_read_data
                                    343 	.globl _Accel_Init
                                    344 	.globl _ReadBattery
                                    345 	.globl _ReadAccel
                                    346 	.globl _SteeringServo
                                    347 	.globl _MotorServo
                                    348 	.globl _getIndividualPress
                                    349 	.globl _getNumberFromKeypad
                                    350 	.globl _getDesiredGainSteering
                                    351 	.globl _getDesiredGainDriveMotorX
                                    352 	.globl _getDesiredGainDriveMotorY
                                    353 	.globl _Port_Init
                                    354 	.globl _ADC_Init
                                    355 	.globl _XBR0_Init
                                    356 	.globl _PCA_Init
                                    357 	.globl _SMB0_Init
                                    358 ;--------------------------------------------------------
                                    359 ; special function registers
                                    360 ;--------------------------------------------------------
                                    361 	.area RSEG    (ABS,DATA)
      000000                        362 	.org 0x0000
                           000080   363 G$P0$0$0 == 0x0080
                           000080   364 _P0	=	0x0080
                           000081   365 G$SP$0$0 == 0x0081
                           000081   366 _SP	=	0x0081
                           000082   367 G$DPL$0$0 == 0x0082
                           000082   368 _DPL	=	0x0082
                           000083   369 G$DPH$0$0 == 0x0083
                           000083   370 _DPH	=	0x0083
                           000084   371 G$P4$0$0 == 0x0084
                           000084   372 _P4	=	0x0084
                           000085   373 G$P5$0$0 == 0x0085
                           000085   374 _P5	=	0x0085
                           000086   375 G$P6$0$0 == 0x0086
                           000086   376 _P6	=	0x0086
                           000087   377 G$PCON$0$0 == 0x0087
                           000087   378 _PCON	=	0x0087
                           000088   379 G$TCON$0$0 == 0x0088
                           000088   380 _TCON	=	0x0088
                           000089   381 G$TMOD$0$0 == 0x0089
                           000089   382 _TMOD	=	0x0089
                           00008A   383 G$TL0$0$0 == 0x008a
                           00008A   384 _TL0	=	0x008a
                           00008B   385 G$TL1$0$0 == 0x008b
                           00008B   386 _TL1	=	0x008b
                           00008C   387 G$TH0$0$0 == 0x008c
                           00008C   388 _TH0	=	0x008c
                           00008D   389 G$TH1$0$0 == 0x008d
                           00008D   390 _TH1	=	0x008d
                           00008E   391 G$CKCON$0$0 == 0x008e
                           00008E   392 _CKCON	=	0x008e
                           00008F   393 G$PSCTL$0$0 == 0x008f
                           00008F   394 _PSCTL	=	0x008f
                           000090   395 G$P1$0$0 == 0x0090
                           000090   396 _P1	=	0x0090
                           000091   397 G$TMR3CN$0$0 == 0x0091
                           000091   398 _TMR3CN	=	0x0091
                           000092   399 G$TMR3RLL$0$0 == 0x0092
                           000092   400 _TMR3RLL	=	0x0092
                           000093   401 G$TMR3RLH$0$0 == 0x0093
                           000093   402 _TMR3RLH	=	0x0093
                           000094   403 G$TMR3L$0$0 == 0x0094
                           000094   404 _TMR3L	=	0x0094
                           000095   405 G$TMR3H$0$0 == 0x0095
                           000095   406 _TMR3H	=	0x0095
                           000096   407 G$P7$0$0 == 0x0096
                           000096   408 _P7	=	0x0096
                           000098   409 G$SCON$0$0 == 0x0098
                           000098   410 _SCON	=	0x0098
                           000098   411 G$SCON0$0$0 == 0x0098
                           000098   412 _SCON0	=	0x0098
                           000099   413 G$SBUF$0$0 == 0x0099
                           000099   414 _SBUF	=	0x0099
                           000099   415 G$SBUF0$0$0 == 0x0099
                           000099   416 _SBUF0	=	0x0099
                           00009A   417 G$SPI0CFG$0$0 == 0x009a
                           00009A   418 _SPI0CFG	=	0x009a
                           00009B   419 G$SPI0DAT$0$0 == 0x009b
                           00009B   420 _SPI0DAT	=	0x009b
                           00009C   421 G$ADC1$0$0 == 0x009c
                           00009C   422 _ADC1	=	0x009c
                           00009D   423 G$SPI0CKR$0$0 == 0x009d
                           00009D   424 _SPI0CKR	=	0x009d
                           00009E   425 G$CPT0CN$0$0 == 0x009e
                           00009E   426 _CPT0CN	=	0x009e
                           00009F   427 G$CPT1CN$0$0 == 0x009f
                           00009F   428 _CPT1CN	=	0x009f
                           0000A0   429 G$P2$0$0 == 0x00a0
                           0000A0   430 _P2	=	0x00a0
                           0000A1   431 G$EMI0TC$0$0 == 0x00a1
                           0000A1   432 _EMI0TC	=	0x00a1
                           0000A3   433 G$EMI0CF$0$0 == 0x00a3
                           0000A3   434 _EMI0CF	=	0x00a3
                           0000A4   435 G$PRT0CF$0$0 == 0x00a4
                           0000A4   436 _PRT0CF	=	0x00a4
                           0000A4   437 G$P0MDOUT$0$0 == 0x00a4
                           0000A4   438 _P0MDOUT	=	0x00a4
                           0000A5   439 G$PRT1CF$0$0 == 0x00a5
                           0000A5   440 _PRT1CF	=	0x00a5
                           0000A5   441 G$P1MDOUT$0$0 == 0x00a5
                           0000A5   442 _P1MDOUT	=	0x00a5
                           0000A6   443 G$PRT2CF$0$0 == 0x00a6
                           0000A6   444 _PRT2CF	=	0x00a6
                           0000A6   445 G$P2MDOUT$0$0 == 0x00a6
                           0000A6   446 _P2MDOUT	=	0x00a6
                           0000A7   447 G$PRT3CF$0$0 == 0x00a7
                           0000A7   448 _PRT3CF	=	0x00a7
                           0000A7   449 G$P3MDOUT$0$0 == 0x00a7
                           0000A7   450 _P3MDOUT	=	0x00a7
                           0000A8   451 G$IE$0$0 == 0x00a8
                           0000A8   452 _IE	=	0x00a8
                           0000A9   453 G$SADDR0$0$0 == 0x00a9
                           0000A9   454 _SADDR0	=	0x00a9
                           0000AA   455 G$ADC1CN$0$0 == 0x00aa
                           0000AA   456 _ADC1CN	=	0x00aa
                           0000AB   457 G$ADC1CF$0$0 == 0x00ab
                           0000AB   458 _ADC1CF	=	0x00ab
                           0000AC   459 G$AMX1SL$0$0 == 0x00ac
                           0000AC   460 _AMX1SL	=	0x00ac
                           0000AD   461 G$P3IF$0$0 == 0x00ad
                           0000AD   462 _P3IF	=	0x00ad
                           0000AE   463 G$SADEN1$0$0 == 0x00ae
                           0000AE   464 _SADEN1	=	0x00ae
                           0000AF   465 G$EMI0CN$0$0 == 0x00af
                           0000AF   466 _EMI0CN	=	0x00af
                           0000AF   467 G$_XPAGE$0$0 == 0x00af
                           0000AF   468 __XPAGE	=	0x00af
                           0000B0   469 G$P3$0$0 == 0x00b0
                           0000B0   470 _P3	=	0x00b0
                           0000B1   471 G$OSCXCN$0$0 == 0x00b1
                           0000B1   472 _OSCXCN	=	0x00b1
                           0000B2   473 G$OSCICN$0$0 == 0x00b2
                           0000B2   474 _OSCICN	=	0x00b2
                           0000B5   475 G$P74OUT$0$0 == 0x00b5
                           0000B5   476 _P74OUT	=	0x00b5
                           0000B6   477 G$FLSCL$0$0 == 0x00b6
                           0000B6   478 _FLSCL	=	0x00b6
                           0000B7   479 G$FLACL$0$0 == 0x00b7
                           0000B7   480 _FLACL	=	0x00b7
                           0000B8   481 G$IP$0$0 == 0x00b8
                           0000B8   482 _IP	=	0x00b8
                           0000B9   483 G$SADEN0$0$0 == 0x00b9
                           0000B9   484 _SADEN0	=	0x00b9
                           0000BA   485 G$AMX0CF$0$0 == 0x00ba
                           0000BA   486 _AMX0CF	=	0x00ba
                           0000BB   487 G$AMX0SL$0$0 == 0x00bb
                           0000BB   488 _AMX0SL	=	0x00bb
                           0000BC   489 G$ADC0CF$0$0 == 0x00bc
                           0000BC   490 _ADC0CF	=	0x00bc
                           0000BD   491 G$P1MDIN$0$0 == 0x00bd
                           0000BD   492 _P1MDIN	=	0x00bd
                           0000BE   493 G$ADC0L$0$0 == 0x00be
                           0000BE   494 _ADC0L	=	0x00be
                           0000BF   495 G$ADC0H$0$0 == 0x00bf
                           0000BF   496 _ADC0H	=	0x00bf
                           0000C0   497 G$SMB0CN$0$0 == 0x00c0
                           0000C0   498 _SMB0CN	=	0x00c0
                           0000C1   499 G$SMB0STA$0$0 == 0x00c1
                           0000C1   500 _SMB0STA	=	0x00c1
                           0000C2   501 G$SMB0DAT$0$0 == 0x00c2
                           0000C2   502 _SMB0DAT	=	0x00c2
                           0000C3   503 G$SMB0ADR$0$0 == 0x00c3
                           0000C3   504 _SMB0ADR	=	0x00c3
                           0000C4   505 G$ADC0GTL$0$0 == 0x00c4
                           0000C4   506 _ADC0GTL	=	0x00c4
                           0000C5   507 G$ADC0GTH$0$0 == 0x00c5
                           0000C5   508 _ADC0GTH	=	0x00c5
                           0000C6   509 G$ADC0LTL$0$0 == 0x00c6
                           0000C6   510 _ADC0LTL	=	0x00c6
                           0000C7   511 G$ADC0LTH$0$0 == 0x00c7
                           0000C7   512 _ADC0LTH	=	0x00c7
                           0000C8   513 G$T2CON$0$0 == 0x00c8
                           0000C8   514 _T2CON	=	0x00c8
                           0000C9   515 G$T4CON$0$0 == 0x00c9
                           0000C9   516 _T4CON	=	0x00c9
                           0000CA   517 G$RCAP2L$0$0 == 0x00ca
                           0000CA   518 _RCAP2L	=	0x00ca
                           0000CB   519 G$RCAP2H$0$0 == 0x00cb
                           0000CB   520 _RCAP2H	=	0x00cb
                           0000CC   521 G$TL2$0$0 == 0x00cc
                           0000CC   522 _TL2	=	0x00cc
                           0000CD   523 G$TH2$0$0 == 0x00cd
                           0000CD   524 _TH2	=	0x00cd
                           0000CF   525 G$SMB0CR$0$0 == 0x00cf
                           0000CF   526 _SMB0CR	=	0x00cf
                           0000D0   527 G$PSW$0$0 == 0x00d0
                           0000D0   528 _PSW	=	0x00d0
                           0000D1   529 G$REF0CN$0$0 == 0x00d1
                           0000D1   530 _REF0CN	=	0x00d1
                           0000D2   531 G$DAC0L$0$0 == 0x00d2
                           0000D2   532 _DAC0L	=	0x00d2
                           0000D3   533 G$DAC0H$0$0 == 0x00d3
                           0000D3   534 _DAC0H	=	0x00d3
                           0000D4   535 G$DAC0CN$0$0 == 0x00d4
                           0000D4   536 _DAC0CN	=	0x00d4
                           0000D5   537 G$DAC1L$0$0 == 0x00d5
                           0000D5   538 _DAC1L	=	0x00d5
                           0000D6   539 G$DAC1H$0$0 == 0x00d6
                           0000D6   540 _DAC1H	=	0x00d6
                           0000D7   541 G$DAC1CN$0$0 == 0x00d7
                           0000D7   542 _DAC1CN	=	0x00d7
                           0000D8   543 G$PCA0CN$0$0 == 0x00d8
                           0000D8   544 _PCA0CN	=	0x00d8
                           0000D9   545 G$PCA0MD$0$0 == 0x00d9
                           0000D9   546 _PCA0MD	=	0x00d9
                           0000DA   547 G$PCA0CPM0$0$0 == 0x00da
                           0000DA   548 _PCA0CPM0	=	0x00da
                           0000DB   549 G$PCA0CPM1$0$0 == 0x00db
                           0000DB   550 _PCA0CPM1	=	0x00db
                           0000DC   551 G$PCA0CPM2$0$0 == 0x00dc
                           0000DC   552 _PCA0CPM2	=	0x00dc
                           0000DD   553 G$PCA0CPM3$0$0 == 0x00dd
                           0000DD   554 _PCA0CPM3	=	0x00dd
                           0000DE   555 G$PCA0CPM4$0$0 == 0x00de
                           0000DE   556 _PCA0CPM4	=	0x00de
                           0000E0   557 G$ACC$0$0 == 0x00e0
                           0000E0   558 _ACC	=	0x00e0
                           0000E1   559 G$XBR0$0$0 == 0x00e1
                           0000E1   560 _XBR0	=	0x00e1
                           0000E2   561 G$XBR1$0$0 == 0x00e2
                           0000E2   562 _XBR1	=	0x00e2
                           0000E3   563 G$XBR2$0$0 == 0x00e3
                           0000E3   564 _XBR2	=	0x00e3
                           0000E4   565 G$RCAP4L$0$0 == 0x00e4
                           0000E4   566 _RCAP4L	=	0x00e4
                           0000E5   567 G$RCAP4H$0$0 == 0x00e5
                           0000E5   568 _RCAP4H	=	0x00e5
                           0000E6   569 G$EIE1$0$0 == 0x00e6
                           0000E6   570 _EIE1	=	0x00e6
                           0000E7   571 G$EIE2$0$0 == 0x00e7
                           0000E7   572 _EIE2	=	0x00e7
                           0000E8   573 G$ADC0CN$0$0 == 0x00e8
                           0000E8   574 _ADC0CN	=	0x00e8
                           0000E9   575 G$PCA0L$0$0 == 0x00e9
                           0000E9   576 _PCA0L	=	0x00e9
                           0000EA   577 G$PCA0CPL0$0$0 == 0x00ea
                           0000EA   578 _PCA0CPL0	=	0x00ea
                           0000EB   579 G$PCA0CPL1$0$0 == 0x00eb
                           0000EB   580 _PCA0CPL1	=	0x00eb
                           0000EC   581 G$PCA0CPL2$0$0 == 0x00ec
                           0000EC   582 _PCA0CPL2	=	0x00ec
                           0000ED   583 G$PCA0CPL3$0$0 == 0x00ed
                           0000ED   584 _PCA0CPL3	=	0x00ed
                           0000EE   585 G$PCA0CPL4$0$0 == 0x00ee
                           0000EE   586 _PCA0CPL4	=	0x00ee
                           0000EF   587 G$RSTSRC$0$0 == 0x00ef
                           0000EF   588 _RSTSRC	=	0x00ef
                           0000F0   589 G$B$0$0 == 0x00f0
                           0000F0   590 _B	=	0x00f0
                           0000F1   591 G$SCON1$0$0 == 0x00f1
                           0000F1   592 _SCON1	=	0x00f1
                           0000F2   593 G$SBUF1$0$0 == 0x00f2
                           0000F2   594 _SBUF1	=	0x00f2
                           0000F3   595 G$SADDR1$0$0 == 0x00f3
                           0000F3   596 _SADDR1	=	0x00f3
                           0000F4   597 G$TL4$0$0 == 0x00f4
                           0000F4   598 _TL4	=	0x00f4
                           0000F5   599 G$TH4$0$0 == 0x00f5
                           0000F5   600 _TH4	=	0x00f5
                           0000F6   601 G$EIP1$0$0 == 0x00f6
                           0000F6   602 _EIP1	=	0x00f6
                           0000F7   603 G$EIP2$0$0 == 0x00f7
                           0000F7   604 _EIP2	=	0x00f7
                           0000F8   605 G$SPI0CN$0$0 == 0x00f8
                           0000F8   606 _SPI0CN	=	0x00f8
                           0000F9   607 G$PCA0H$0$0 == 0x00f9
                           0000F9   608 _PCA0H	=	0x00f9
                           0000FA   609 G$PCA0CPH0$0$0 == 0x00fa
                           0000FA   610 _PCA0CPH0	=	0x00fa
                           0000FB   611 G$PCA0CPH1$0$0 == 0x00fb
                           0000FB   612 _PCA0CPH1	=	0x00fb
                           0000FC   613 G$PCA0CPH2$0$0 == 0x00fc
                           0000FC   614 _PCA0CPH2	=	0x00fc
                           0000FD   615 G$PCA0CPH3$0$0 == 0x00fd
                           0000FD   616 _PCA0CPH3	=	0x00fd
                           0000FE   617 G$PCA0CPH4$0$0 == 0x00fe
                           0000FE   618 _PCA0CPH4	=	0x00fe
                           0000FF   619 G$WDTCN$0$0 == 0x00ff
                           0000FF   620 _WDTCN	=	0x00ff
                           008C8A   621 G$TMR0$0$0 == 0x8c8a
                           008C8A   622 _TMR0	=	0x8c8a
                           008D8B   623 G$TMR1$0$0 == 0x8d8b
                           008D8B   624 _TMR1	=	0x8d8b
                           00CDCC   625 G$TMR2$0$0 == 0xcdcc
                           00CDCC   626 _TMR2	=	0xcdcc
                           00CBCA   627 G$RCAP2$0$0 == 0xcbca
                           00CBCA   628 _RCAP2	=	0xcbca
                           009594   629 G$TMR3$0$0 == 0x9594
                           009594   630 _TMR3	=	0x9594
                           009392   631 G$TMR3RL$0$0 == 0x9392
                           009392   632 _TMR3RL	=	0x9392
                           00F5F4   633 G$TMR4$0$0 == 0xf5f4
                           00F5F4   634 _TMR4	=	0xf5f4
                           00E5E4   635 G$RCAP4$0$0 == 0xe5e4
                           00E5E4   636 _RCAP4	=	0xe5e4
                           00BFBE   637 G$ADC0$0$0 == 0xbfbe
                           00BFBE   638 _ADC0	=	0xbfbe
                           00C5C4   639 G$ADC0GT$0$0 == 0xc5c4
                           00C5C4   640 _ADC0GT	=	0xc5c4
                           00C7C6   641 G$ADC0LT$0$0 == 0xc7c6
                           00C7C6   642 _ADC0LT	=	0xc7c6
                           00D3D2   643 G$DAC0$0$0 == 0xd3d2
                           00D3D2   644 _DAC0	=	0xd3d2
                           00D6D5   645 G$DAC1$0$0 == 0xd6d5
                           00D6D5   646 _DAC1	=	0xd6d5
                           00F9E9   647 G$PCA0$0$0 == 0xf9e9
                           00F9E9   648 _PCA0	=	0xf9e9
                           00FAEA   649 G$PCA0CP0$0$0 == 0xfaea
                           00FAEA   650 _PCA0CP0	=	0xfaea
                           00FBEB   651 G$PCA0CP1$0$0 == 0xfbeb
                           00FBEB   652 _PCA0CP1	=	0xfbeb
                           00FCEC   653 G$PCA0CP2$0$0 == 0xfcec
                           00FCEC   654 _PCA0CP2	=	0xfcec
                           00FDED   655 G$PCA0CP3$0$0 == 0xfded
                           00FDED   656 _PCA0CP3	=	0xfded
                           00FEEE   657 G$PCA0CP4$0$0 == 0xfeee
                           00FEEE   658 _PCA0CP4	=	0xfeee
                                    659 ;--------------------------------------------------------
                                    660 ; special function bits
                                    661 ;--------------------------------------------------------
                                    662 	.area RSEG    (ABS,DATA)
      000000                        663 	.org 0x0000
                           000080   664 G$P0_0$0$0 == 0x0080
                           000080   665 _P0_0	=	0x0080
                           000081   666 G$P0_1$0$0 == 0x0081
                           000081   667 _P0_1	=	0x0081
                           000082   668 G$P0_2$0$0 == 0x0082
                           000082   669 _P0_2	=	0x0082
                           000083   670 G$P0_3$0$0 == 0x0083
                           000083   671 _P0_3	=	0x0083
                           000084   672 G$P0_4$0$0 == 0x0084
                           000084   673 _P0_4	=	0x0084
                           000085   674 G$P0_5$0$0 == 0x0085
                           000085   675 _P0_5	=	0x0085
                           000086   676 G$P0_6$0$0 == 0x0086
                           000086   677 _P0_6	=	0x0086
                           000087   678 G$P0_7$0$0 == 0x0087
                           000087   679 _P0_7	=	0x0087
                           000088   680 G$IT0$0$0 == 0x0088
                           000088   681 _IT0	=	0x0088
                           000089   682 G$IE0$0$0 == 0x0089
                           000089   683 _IE0	=	0x0089
                           00008A   684 G$IT1$0$0 == 0x008a
                           00008A   685 _IT1	=	0x008a
                           00008B   686 G$IE1$0$0 == 0x008b
                           00008B   687 _IE1	=	0x008b
                           00008C   688 G$TR0$0$0 == 0x008c
                           00008C   689 _TR0	=	0x008c
                           00008D   690 G$TF0$0$0 == 0x008d
                           00008D   691 _TF0	=	0x008d
                           00008E   692 G$TR1$0$0 == 0x008e
                           00008E   693 _TR1	=	0x008e
                           00008F   694 G$TF1$0$0 == 0x008f
                           00008F   695 _TF1	=	0x008f
                           000090   696 G$P1_0$0$0 == 0x0090
                           000090   697 _P1_0	=	0x0090
                           000091   698 G$P1_1$0$0 == 0x0091
                           000091   699 _P1_1	=	0x0091
                           000092   700 G$P1_2$0$0 == 0x0092
                           000092   701 _P1_2	=	0x0092
                           000093   702 G$P1_3$0$0 == 0x0093
                           000093   703 _P1_3	=	0x0093
                           000094   704 G$P1_4$0$0 == 0x0094
                           000094   705 _P1_4	=	0x0094
                           000095   706 G$P1_5$0$0 == 0x0095
                           000095   707 _P1_5	=	0x0095
                           000096   708 G$P1_6$0$0 == 0x0096
                           000096   709 _P1_6	=	0x0096
                           000097   710 G$P1_7$0$0 == 0x0097
                           000097   711 _P1_7	=	0x0097
                           000098   712 G$RI$0$0 == 0x0098
                           000098   713 _RI	=	0x0098
                           000098   714 G$RI0$0$0 == 0x0098
                           000098   715 _RI0	=	0x0098
                           000099   716 G$TI$0$0 == 0x0099
                           000099   717 _TI	=	0x0099
                           000099   718 G$TI0$0$0 == 0x0099
                           000099   719 _TI0	=	0x0099
                           00009A   720 G$RB8$0$0 == 0x009a
                           00009A   721 _RB8	=	0x009a
                           00009A   722 G$RB80$0$0 == 0x009a
                           00009A   723 _RB80	=	0x009a
                           00009B   724 G$TB8$0$0 == 0x009b
                           00009B   725 _TB8	=	0x009b
                           00009B   726 G$TB80$0$0 == 0x009b
                           00009B   727 _TB80	=	0x009b
                           00009C   728 G$REN$0$0 == 0x009c
                           00009C   729 _REN	=	0x009c
                           00009C   730 G$REN0$0$0 == 0x009c
                           00009C   731 _REN0	=	0x009c
                           00009D   732 G$SM2$0$0 == 0x009d
                           00009D   733 _SM2	=	0x009d
                           00009D   734 G$SM20$0$0 == 0x009d
                           00009D   735 _SM20	=	0x009d
                           00009D   736 G$MCE0$0$0 == 0x009d
                           00009D   737 _MCE0	=	0x009d
                           00009E   738 G$SM1$0$0 == 0x009e
                           00009E   739 _SM1	=	0x009e
                           00009E   740 G$SM10$0$0 == 0x009e
                           00009E   741 _SM10	=	0x009e
                           00009F   742 G$SM0$0$0 == 0x009f
                           00009F   743 _SM0	=	0x009f
                           00009F   744 G$SM00$0$0 == 0x009f
                           00009F   745 _SM00	=	0x009f
                           00009F   746 G$S0MODE$0$0 == 0x009f
                           00009F   747 _S0MODE	=	0x009f
                           0000A0   748 G$P2_0$0$0 == 0x00a0
                           0000A0   749 _P2_0	=	0x00a0
                           0000A1   750 G$P2_1$0$0 == 0x00a1
                           0000A1   751 _P2_1	=	0x00a1
                           0000A2   752 G$P2_2$0$0 == 0x00a2
                           0000A2   753 _P2_2	=	0x00a2
                           0000A3   754 G$P2_3$0$0 == 0x00a3
                           0000A3   755 _P2_3	=	0x00a3
                           0000A4   756 G$P2_4$0$0 == 0x00a4
                           0000A4   757 _P2_4	=	0x00a4
                           0000A5   758 G$P2_5$0$0 == 0x00a5
                           0000A5   759 _P2_5	=	0x00a5
                           0000A6   760 G$P2_6$0$0 == 0x00a6
                           0000A6   761 _P2_6	=	0x00a6
                           0000A7   762 G$P2_7$0$0 == 0x00a7
                           0000A7   763 _P2_7	=	0x00a7
                           0000A8   764 G$EX0$0$0 == 0x00a8
                           0000A8   765 _EX0	=	0x00a8
                           0000A9   766 G$ET0$0$0 == 0x00a9
                           0000A9   767 _ET0	=	0x00a9
                           0000AA   768 G$EX1$0$0 == 0x00aa
                           0000AA   769 _EX1	=	0x00aa
                           0000AB   770 G$ET1$0$0 == 0x00ab
                           0000AB   771 _ET1	=	0x00ab
                           0000AC   772 G$ES0$0$0 == 0x00ac
                           0000AC   773 _ES0	=	0x00ac
                           0000AC   774 G$ES$0$0 == 0x00ac
                           0000AC   775 _ES	=	0x00ac
                           0000AD   776 G$ET2$0$0 == 0x00ad
                           0000AD   777 _ET2	=	0x00ad
                           0000AF   778 G$EA$0$0 == 0x00af
                           0000AF   779 _EA	=	0x00af
                           0000B0   780 G$P3_0$0$0 == 0x00b0
                           0000B0   781 _P3_0	=	0x00b0
                           0000B1   782 G$P3_1$0$0 == 0x00b1
                           0000B1   783 _P3_1	=	0x00b1
                           0000B2   784 G$P3_2$0$0 == 0x00b2
                           0000B2   785 _P3_2	=	0x00b2
                           0000B3   786 G$P3_3$0$0 == 0x00b3
                           0000B3   787 _P3_3	=	0x00b3
                           0000B4   788 G$P3_4$0$0 == 0x00b4
                           0000B4   789 _P3_4	=	0x00b4
                           0000B5   790 G$P3_5$0$0 == 0x00b5
                           0000B5   791 _P3_5	=	0x00b5
                           0000B6   792 G$P3_6$0$0 == 0x00b6
                           0000B6   793 _P3_6	=	0x00b6
                           0000B7   794 G$P3_7$0$0 == 0x00b7
                           0000B7   795 _P3_7	=	0x00b7
                           0000B8   796 G$PX0$0$0 == 0x00b8
                           0000B8   797 _PX0	=	0x00b8
                           0000B9   798 G$PT0$0$0 == 0x00b9
                           0000B9   799 _PT0	=	0x00b9
                           0000BA   800 G$PX1$0$0 == 0x00ba
                           0000BA   801 _PX1	=	0x00ba
                           0000BB   802 G$PT1$0$0 == 0x00bb
                           0000BB   803 _PT1	=	0x00bb
                           0000BC   804 G$PS0$0$0 == 0x00bc
                           0000BC   805 _PS0	=	0x00bc
                           0000BC   806 G$PS$0$0 == 0x00bc
                           0000BC   807 _PS	=	0x00bc
                           0000BD   808 G$PT2$0$0 == 0x00bd
                           0000BD   809 _PT2	=	0x00bd
                           0000C0   810 G$SMBTOE$0$0 == 0x00c0
                           0000C0   811 _SMBTOE	=	0x00c0
                           0000C1   812 G$SMBFTE$0$0 == 0x00c1
                           0000C1   813 _SMBFTE	=	0x00c1
                           0000C2   814 G$AA$0$0 == 0x00c2
                           0000C2   815 _AA	=	0x00c2
                           0000C3   816 G$SI$0$0 == 0x00c3
                           0000C3   817 _SI	=	0x00c3
                           0000C4   818 G$STO$0$0 == 0x00c4
                           0000C4   819 _STO	=	0x00c4
                           0000C5   820 G$STA$0$0 == 0x00c5
                           0000C5   821 _STA	=	0x00c5
                           0000C6   822 G$ENSMB$0$0 == 0x00c6
                           0000C6   823 _ENSMB	=	0x00c6
                           0000C7   824 G$BUSY$0$0 == 0x00c7
                           0000C7   825 _BUSY	=	0x00c7
                           0000C8   826 G$CPRL2$0$0 == 0x00c8
                           0000C8   827 _CPRL2	=	0x00c8
                           0000C9   828 G$CT2$0$0 == 0x00c9
                           0000C9   829 _CT2	=	0x00c9
                           0000CA   830 G$TR2$0$0 == 0x00ca
                           0000CA   831 _TR2	=	0x00ca
                           0000CB   832 G$EXEN2$0$0 == 0x00cb
                           0000CB   833 _EXEN2	=	0x00cb
                           0000CC   834 G$TCLK$0$0 == 0x00cc
                           0000CC   835 _TCLK	=	0x00cc
                           0000CD   836 G$RCLK$0$0 == 0x00cd
                           0000CD   837 _RCLK	=	0x00cd
                           0000CE   838 G$EXF2$0$0 == 0x00ce
                           0000CE   839 _EXF2	=	0x00ce
                           0000CF   840 G$TF2$0$0 == 0x00cf
                           0000CF   841 _TF2	=	0x00cf
                           0000D0   842 G$P$0$0 == 0x00d0
                           0000D0   843 _P	=	0x00d0
                           0000D1   844 G$F1$0$0 == 0x00d1
                           0000D1   845 _F1	=	0x00d1
                           0000D2   846 G$OV$0$0 == 0x00d2
                           0000D2   847 _OV	=	0x00d2
                           0000D3   848 G$RS0$0$0 == 0x00d3
                           0000D3   849 _RS0	=	0x00d3
                           0000D4   850 G$RS1$0$0 == 0x00d4
                           0000D4   851 _RS1	=	0x00d4
                           0000D5   852 G$F0$0$0 == 0x00d5
                           0000D5   853 _F0	=	0x00d5
                           0000D6   854 G$AC$0$0 == 0x00d6
                           0000D6   855 _AC	=	0x00d6
                           0000D7   856 G$CY$0$0 == 0x00d7
                           0000D7   857 _CY	=	0x00d7
                           0000D8   858 G$CCF0$0$0 == 0x00d8
                           0000D8   859 _CCF0	=	0x00d8
                           0000D9   860 G$CCF1$0$0 == 0x00d9
                           0000D9   861 _CCF1	=	0x00d9
                           0000DA   862 G$CCF2$0$0 == 0x00da
                           0000DA   863 _CCF2	=	0x00da
                           0000DB   864 G$CCF3$0$0 == 0x00db
                           0000DB   865 _CCF3	=	0x00db
                           0000DC   866 G$CCF4$0$0 == 0x00dc
                           0000DC   867 _CCF4	=	0x00dc
                           0000DE   868 G$CR$0$0 == 0x00de
                           0000DE   869 _CR	=	0x00de
                           0000DF   870 G$CF$0$0 == 0x00df
                           0000DF   871 _CF	=	0x00df
                           0000E8   872 G$ADLJST$0$0 == 0x00e8
                           0000E8   873 _ADLJST	=	0x00e8
                           0000E8   874 G$AD0LJST$0$0 == 0x00e8
                           0000E8   875 _AD0LJST	=	0x00e8
                           0000E9   876 G$ADWINT$0$0 == 0x00e9
                           0000E9   877 _ADWINT	=	0x00e9
                           0000E9   878 G$AD0WINT$0$0 == 0x00e9
                           0000E9   879 _AD0WINT	=	0x00e9
                           0000EA   880 G$ADSTM0$0$0 == 0x00ea
                           0000EA   881 _ADSTM0	=	0x00ea
                           0000EA   882 G$AD0CM0$0$0 == 0x00ea
                           0000EA   883 _AD0CM0	=	0x00ea
                           0000EB   884 G$ADSTM1$0$0 == 0x00eb
                           0000EB   885 _ADSTM1	=	0x00eb
                           0000EB   886 G$AD0CM1$0$0 == 0x00eb
                           0000EB   887 _AD0CM1	=	0x00eb
                           0000EC   888 G$ADBUSY$0$0 == 0x00ec
                           0000EC   889 _ADBUSY	=	0x00ec
                           0000EC   890 G$AD0BUSY$0$0 == 0x00ec
                           0000EC   891 _AD0BUSY	=	0x00ec
                           0000ED   892 G$ADCINT$0$0 == 0x00ed
                           0000ED   893 _ADCINT	=	0x00ed
                           0000ED   894 G$AD0INT$0$0 == 0x00ed
                           0000ED   895 _AD0INT	=	0x00ed
                           0000EE   896 G$ADCTM$0$0 == 0x00ee
                           0000EE   897 _ADCTM	=	0x00ee
                           0000EE   898 G$AD0TM$0$0 == 0x00ee
                           0000EE   899 _AD0TM	=	0x00ee
                           0000EF   900 G$ADCEN$0$0 == 0x00ef
                           0000EF   901 _ADCEN	=	0x00ef
                           0000EF   902 G$AD0EN$0$0 == 0x00ef
                           0000EF   903 _AD0EN	=	0x00ef
                           0000F8   904 G$SPIEN$0$0 == 0x00f8
                           0000F8   905 _SPIEN	=	0x00f8
                           0000F9   906 G$MSTEN$0$0 == 0x00f9
                           0000F9   907 _MSTEN	=	0x00f9
                           0000FA   908 G$SLVSEL$0$0 == 0x00fa
                           0000FA   909 _SLVSEL	=	0x00fa
                           0000FB   910 G$TXBSY$0$0 == 0x00fb
                           0000FB   911 _TXBSY	=	0x00fb
                           0000FC   912 G$RXOVRN$0$0 == 0x00fc
                           0000FC   913 _RXOVRN	=	0x00fc
                           0000FD   914 G$MODF$0$0 == 0x00fd
                           0000FD   915 _MODF	=	0x00fd
                           0000FE   916 G$WCOL$0$0 == 0x00fe
                           0000FE   917 _WCOL	=	0x00fe
                           0000FF   918 G$SPIF$0$0 == 0x00ff
                           0000FF   919 _SPIF	=	0x00ff
                           0000C7   920 G$BUS_BUSY$0$0 == 0x00c7
                           0000C7   921 _BUS_BUSY	=	0x00c7
                           0000C6   922 G$BUS_EN$0$0 == 0x00c6
                           0000C6   923 _BUS_EN	=	0x00c6
                           0000C5   924 G$BUS_START$0$0 == 0x00c5
                           0000C5   925 _BUS_START	=	0x00c5
                           0000C4   926 G$BUS_STOP$0$0 == 0x00c4
                           0000C4   927 _BUS_STOP	=	0x00c4
                           0000C3   928 G$BUS_INT$0$0 == 0x00c3
                           0000C3   929 _BUS_INT	=	0x00c3
                           0000C2   930 G$BUS_AA$0$0 == 0x00c2
                           0000C2   931 _BUS_AA	=	0x00c2
                           0000C1   932 G$BUS_FTE$0$0 == 0x00c1
                           0000C1   933 _BUS_FTE	=	0x00c1
                           0000C0   934 G$BUS_TOE$0$0 == 0x00c0
                           0000C0   935 _BUS_TOE	=	0x00c0
                           000083   936 G$BUS_SCL$0$0 == 0x0083
                           000083   937 _BUS_SCL	=	0x0083
                                    938 ;--------------------------------------------------------
                                    939 ; overlayable register banks
                                    940 ;--------------------------------------------------------
                                    941 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        942 	.ds 8
                                    943 ;--------------------------------------------------------
                                    944 ; internal ram data
                                    945 ;--------------------------------------------------------
                                    946 	.area DSEG    (DATA)
                           000000   947 L5Code.lcd_clear$NumBytes$1$77==.
      000000                        948 _lcd_clear_NumBytes_1_77:
      000000                        949 	.ds 1
                           000001   950 L5Code.lcd_clear$Cmd$1$77==.
      000001                        951 _lcd_clear_Cmd_1_77:
      000001                        952 	.ds 2
                           000003   953 L5Code.read_keypad$Data$1$78==.
      000003                        954 _read_keypad_Data_1_78:
      000003                        955 	.ds 2
                           000005   956 L5Code.i2c_write_data$start_reg$1$97==.
      000005                        957 _i2c_write_data_PARM_2:
      000005                        958 	.ds 1
                           000006   959 L5Code.i2c_write_data$buffer$1$97==.
      000006                        960 _i2c_write_data_PARM_3:
      000006                        961 	.ds 3
                           000009   962 L5Code.i2c_write_data$num_bytes$1$97==.
      000009                        963 _i2c_write_data_PARM_4:
      000009                        964 	.ds 1
                           00000A   965 L5Code.i2c_read_data$start_reg$1$99==.
      00000A                        966 _i2c_read_data_PARM_2:
      00000A                        967 	.ds 1
                           00000B   968 L5Code.i2c_read_data$buffer$1$99==.
      00000B                        969 _i2c_read_data_PARM_3:
      00000B                        970 	.ds 3
                           00000E   971 L5Code.i2c_read_data$num_bytes$1$99==.
      00000E                        972 _i2c_read_data_PARM_4:
      00000E                        973 	.ds 1
                           00000F   974 L5Code.Accel_Init$Data2$1$103==.
      00000F                        975 _Accel_Init_Data2_1_103:
      00000F                        976 	.ds 1
                           000010   977 G$PW_NEUT$0$0==.
      000010                        978 _PW_NEUT::
      000010                        979 	.ds 2
                           000012   980 G$PW_MIN$0$0==.
      000012                        981 _PW_MIN::
      000012                        982 	.ds 2
                           000014   983 G$PW_MAX$0$0==.
      000014                        984 _PW_MAX::
      000014                        985 	.ds 2
                           000016   986 G$gx$0$0==.
      000016                        987 _gx::
      000016                        988 	.ds 2
                           000018   989 G$gy$0$0==.
      000018                        990 _gy::
      000018                        991 	.ds 2
                           00001A   992 G$x0$0$0==.
      00001A                        993 _x0::
      00001A                        994 	.ds 2
                           00001C   995 G$y0$0$0==.
      00001C                        996 _y0::
      00001C                        997 	.ds 2
                           00001E   998 G$counts$0$0==.
      00001E                        999 _counts::
      00001E                       1000 	.ds 2
                           000020  1001 G$counts_accel$0$0==.
      000020                       1002 _counts_accel::
      000020                       1003 	.ds 2
                           000022  1004 G$counts_lcd$0$0==.
      000022                       1005 _counts_lcd::
      000022                       1006 	.ds 2
                           000024  1007 G$MOTOR_PW$0$0==.
      000024                       1008 _MOTOR_PW::
      000024                       1009 	.ds 2
                           000026  1010 G$STEERING_PW$0$0==.
      000026                       1011 _STEERING_PW::
      000026                       1012 	.ds 2
                           000028  1013 G$ks$0$0==.
      000028                       1014 _ks::
      000028                       1015 	.ds 2
                           00002A  1016 G$kd_x$0$0==.
      00002A                       1017 _kd_x::
      00002A                       1018 	.ds 2
                           00002C  1019 G$kd_y$0$0==.
      00002C                       1020 _kd_y::
      00002C                       1021 	.ds 2
                           00002E  1022 G$error_sum$0$0==.
      00002E                       1023 _error_sum::
      00002E                       1024 	.ds 2
                           000030  1025 L5Code.main$counter$1$116==.
      000030                       1026 _main_counter_1_116:
      000030                       1027 	.ds 2
                           000032  1028 L5Code.ReadAccel$Data$1$127==.
      000032                       1029 _ReadAccel_Data_1_127:
      000032                       1030 	.ds 5
                           000037  1031 L5Code.ReadAccel$avg_gy$1$127==.
      000037                       1032 _ReadAccel_avg_gy_1_127:
      000037                       1033 	.ds 2
                           000039  1034 L5Code.getNumberFromKeypad$data2$1$141==.
      000039                       1035 _getNumberFromKeypad_data2_1_141:
      000039                       1036 	.ds 3
                                   1037 ;--------------------------------------------------------
                                   1038 ; overlayable items in internal ram 
                                   1039 ;--------------------------------------------------------
                                   1040 	.area	OSEG    (OVR,DATA)
                                   1041 	.area	OSEG    (OVR,DATA)
                                   1042 	.area	OSEG    (OVR,DATA)
                                   1043 	.area	OSEG    (OVR,DATA)
                                   1044 	.area	OSEG    (OVR,DATA)
                                   1045 	.area	OSEG    (OVR,DATA)
                                   1046 	.area	OSEG    (OVR,DATA)
                                   1047 ;--------------------------------------------------------
                                   1048 ; Stack segment in internal ram 
                                   1049 ;--------------------------------------------------------
                                   1050 	.area	SSEG
      000000                       1051 __start__stack:
      000000                       1052 	.ds	1
                                   1053 
                                   1054 ;--------------------------------------------------------
                                   1055 ; indirectly addressable internal ram data
                                   1056 ;--------------------------------------------------------
                                   1057 	.area ISEG    (DATA)
                                   1058 ;--------------------------------------------------------
                                   1059 ; absolute internal ram data
                                   1060 ;--------------------------------------------------------
                                   1061 	.area IABS    (ABS,DATA)
                                   1062 	.area IABS    (ABS,DATA)
                                   1063 ;--------------------------------------------------------
                                   1064 ; bit data
                                   1065 ;--------------------------------------------------------
                                   1066 	.area BSEG    (BIT)
                                   1067 ;--------------------------------------------------------
                                   1068 ; paged external ram data
                                   1069 ;--------------------------------------------------------
                                   1070 	.area PSEG    (PAG,XDATA)
                                   1071 ;--------------------------------------------------------
                                   1072 ; external ram data
                                   1073 ;--------------------------------------------------------
                                   1074 	.area XSEG    (XDATA)
                           000000  1075 L5Code.lcd_print$text$1$73==.
      000000                       1076 _lcd_print_text_1_73:
      000000                       1077 	.ds 80
                                   1078 ;--------------------------------------------------------
                                   1079 ; absolute external ram data
                                   1080 ;--------------------------------------------------------
                                   1081 	.area XABS    (ABS,XDATA)
                                   1082 ;--------------------------------------------------------
                                   1083 ; external initialized ram data
                                   1084 ;--------------------------------------------------------
                                   1085 	.area XISEG   (XDATA)
                                   1086 	.area HOME    (CODE)
                                   1087 	.area GSINIT0 (CODE)
                                   1088 	.area GSINIT1 (CODE)
                                   1089 	.area GSINIT2 (CODE)
                                   1090 	.area GSINIT3 (CODE)
                                   1091 	.area GSINIT4 (CODE)
                                   1092 	.area GSINIT5 (CODE)
                                   1093 	.area GSINIT  (CODE)
                                   1094 	.area GSFINAL (CODE)
                                   1095 	.area CSEG    (CODE)
                                   1096 ;--------------------------------------------------------
                                   1097 ; interrupt vector 
                                   1098 ;--------------------------------------------------------
                                   1099 	.area HOME    (CODE)
      000000                       1100 __interrupt_vect:
      000000 02r00r00         [24] 1101 	ljmp	__sdcc_gsinit_startup
      000003 32               [24] 1102 	reti
      000004                       1103 	.ds	7
      00000B 32               [24] 1104 	reti
      00000C                       1105 	.ds	7
      000013 32               [24] 1106 	reti
      000014                       1107 	.ds	7
      00001B 32               [24] 1108 	reti
      00001C                       1109 	.ds	7
      000023 32               [24] 1110 	reti
      000024                       1111 	.ds	7
      00002B 32               [24] 1112 	reti
      00002C                       1113 	.ds	7
      000033 32               [24] 1114 	reti
      000034                       1115 	.ds	7
      00003B 32               [24] 1116 	reti
      00003C                       1117 	.ds	7
      000043 32               [24] 1118 	reti
      000044                       1119 	.ds	7
      00004B 02r0Cr80         [24] 1120 	ljmp	_PCA_ISR
                                   1121 ;--------------------------------------------------------
                                   1122 ; global & static initialisations
                                   1123 ;--------------------------------------------------------
                                   1124 	.area HOME    (CODE)
                                   1125 	.area GSINIT  (CODE)
                                   1126 	.area GSFINAL (CODE)
                                   1127 	.area GSINIT  (CODE)
                                   1128 	.globl __sdcc_gsinit_startup
                                   1129 	.globl __sdcc_program_startup
                                   1130 	.globl __start__stack
                                   1131 	.globl __mcs51_genXINIT
                                   1132 	.globl __mcs51_genXRAMCLEAR
                                   1133 	.globl __mcs51_genRAMCLEAR
                           000000  1134 	C$5Code.c$33$1$161 ==.
                                   1135 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:33: unsigned int PW_NEUT = 2780;
      000000 75*10 DC         [24] 1136 	mov	_PW_NEUT,#0xDC
      000003 75*11 0A         [24] 1137 	mov	(_PW_NEUT + 1),#0x0A
                           000006  1138 	C$5Code.c$34$1$161 ==.
                                   1139 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:34: unsigned int PW_MIN = 2320;
      000006 75*12 10         [24] 1140 	mov	_PW_MIN,#0x10
      000009 75*13 09         [24] 1141 	mov	(_PW_MIN + 1),#0x09
                           00000C  1142 	C$5Code.c$35$1$161 ==.
                                   1143 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:35: unsigned int PW_MAX = 3500;
      00000C 75*14 AC         [24] 1144 	mov	_PW_MAX,#0xAC
      00000F 75*15 0D         [24] 1145 	mov	(_PW_MAX + 1),#0x0D
                           000012  1146 	C$5Code.c$37$1$161 ==.
                                   1147 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:37: int gx=0;
      000012 E4               [12] 1148 	clr	a
      000013 F5*16            [12] 1149 	mov	_gx,a
      000015 F5*17            [12] 1150 	mov	(_gx + 1),a
                           000017  1151 	C$5Code.c$38$1$161 ==.
                                   1152 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:38: int gy=0;
      000017 F5*18            [12] 1153 	mov	_gy,a
      000019 F5*19            [12] 1154 	mov	(_gy + 1),a
                           00001B  1155 	C$5Code.c$39$1$161 ==.
                                   1156 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:39: int x0=0;
      00001B F5*1A            [12] 1157 	mov	_x0,a
      00001D F5*1B            [12] 1158 	mov	(_x0 + 1),a
                           00001F  1159 	C$5Code.c$40$1$161 ==.
                                   1160 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:40: int y0=0;
      00001F F5*1C            [12] 1161 	mov	_y0,a
      000021 F5*1D            [12] 1162 	mov	(_y0 + 1),a
                           000023  1163 	C$5Code.c$42$1$161 ==.
                                   1164 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:42: unsigned int counts = 0;
      000023 F5*1E            [12] 1165 	mov	_counts,a
      000025 F5*1F            [12] 1166 	mov	(_counts + 1),a
                           000027  1167 	C$5Code.c$43$1$161 ==.
                                   1168 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:43: unsigned int counts_accel = 0;
      000027 F5*20            [12] 1169 	mov	_counts_accel,a
      000029 F5*21            [12] 1170 	mov	(_counts_accel + 1),a
                           00002B  1171 	C$5Code.c$44$1$161 ==.
                                   1172 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:44: unsigned int counts_lcd = 0;
      00002B F5*22            [12] 1173 	mov	_counts_lcd,a
      00002D F5*23            [12] 1174 	mov	(_counts_lcd + 1),a
                           00002F  1175 	C$5Code.c$46$1$161 ==.
                                   1176 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:46: unsigned int MOTOR_PW = 0;
      00002F F5*24            [12] 1177 	mov	_MOTOR_PW,a
      000031 F5*25            [12] 1178 	mov	(_MOTOR_PW + 1),a
                           000033  1179 	C$5Code.c$47$1$161 ==.
                                   1180 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:47: unsigned int STEERING_PW = 0;
      000033 F5*26            [12] 1181 	mov	_STEERING_PW,a
      000035 F5*27            [12] 1182 	mov	(_STEERING_PW + 1),a
                           000037  1183 	C$5Code.c$49$1$161 ==.
                                   1184 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:49: int ks = 1; //steering gain
      000037 75*28 01         [24] 1185 	mov	_ks,#0x01
                                   1186 ;	1-genFromRTrack replaced	mov	(_ks + 1),#0x00
      00003A F5*29            [12] 1187 	mov	(_ks + 1),a
                           00003C  1188 	C$5Code.c$50$1$161 ==.
                                   1189 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:50: int kd_x = 1; //drive gain
      00003C 75*2A 01         [24] 1190 	mov	_kd_x,#0x01
                                   1191 ;	1-genFromRTrack replaced	mov	(_kd_x + 1),#0x00
      00003F F5*2B            [12] 1192 	mov	(_kd_x + 1),a
                           000041  1193 	C$5Code.c$51$1$161 ==.
                                   1194 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:51: int kd_y = 1; //drive gain
      000041 75*2C 01         [24] 1195 	mov	_kd_y,#0x01
                                   1196 ;	1-genFromRTrack replaced	mov	(_kd_y + 1),#0x00
      000044 F5*2D            [12] 1197 	mov	(_kd_y + 1),a
                                   1198 	.area GSFINAL (CODE)
      000000 02r00r4E         [24] 1199 	ljmp	__sdcc_program_startup
                                   1200 ;--------------------------------------------------------
                                   1201 ; Home
                                   1202 ;--------------------------------------------------------
                                   1203 	.area HOME    (CODE)
                                   1204 	.area HOME    (CODE)
      00004E                       1205 __sdcc_program_startup:
      00004E 02r04rD6         [24] 1206 	ljmp	_main
                                   1207 ;	return from main will return to caller
                                   1208 ;--------------------------------------------------------
                                   1209 ; code
                                   1210 ;--------------------------------------------------------
                                   1211 	.area CSEG    (CODE)
                                   1212 ;------------------------------------------------------------
                                   1213 ;Allocation info for local variables in function 'SYSCLK_Init'
                                   1214 ;------------------------------------------------------------
                                   1215 ;i                         Allocated to registers 
                                   1216 ;------------------------------------------------------------
                           000000  1217 	G$SYSCLK_Init$0$0 ==.
                           000000  1218 	C$c8051_SDCC.h$42$0$0 ==.
                                   1219 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:42: void SYSCLK_Init(void)
                                   1220 ;	-----------------------------------------
                                   1221 ;	 function SYSCLK_Init
                                   1222 ;	-----------------------------------------
      000000                       1223 _SYSCLK_Init:
                           000007  1224 	ar7 = 0x07
                           000006  1225 	ar6 = 0x06
                           000005  1226 	ar5 = 0x05
                           000004  1227 	ar4 = 0x04
                           000003  1228 	ar3 = 0x03
                           000002  1229 	ar2 = 0x02
                           000001  1230 	ar1 = 0x01
                           000000  1231 	ar0 = 0x00
                           000000  1232 	C$c8051_SDCC.h$46$1$31 ==.
                                   1233 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:46: OSCXCN = 0x67;                      // start external oscillator with
      000000 75 B1 67         [24] 1234 	mov	_OSCXCN,#0x67
                           000003  1235 	C$c8051_SDCC.h$49$1$31 ==.
                                   1236 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:49: for (i=0; i < 256; i++);            // wait for oscillator to start
      000003 7E 00            [12] 1237 	mov	r6,#0x00
      000005 7F 01            [12] 1238 	mov	r7,#0x01
      000007                       1239 00107$:
      000007 1E               [12] 1240 	dec	r6
      000008 BE FF 01         [24] 1241 	cjne	r6,#0xFF,00121$
      00000B 1F               [12] 1242 	dec	r7
      00000C                       1243 00121$:
      00000C EE               [12] 1244 	mov	a,r6
      00000D 4F               [12] 1245 	orl	a,r7
      00000E 70 F7            [24] 1246 	jnz	00107$
                           000010  1247 	C$c8051_SDCC.h$51$1$31 ==.
                                   1248 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:51: while (!(OSCXCN & 0x80));           // Wait for crystal osc. to settle
      000010                       1249 00102$:
      000010 E5 B1            [12] 1250 	mov	a,_OSCXCN
      000012 30 E7 FB         [24] 1251 	jnb	acc.7,00102$
                           000015  1252 	C$c8051_SDCC.h$53$1$31 ==.
                                   1253 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:53: OSCICN = 0x88;                      // select external oscillator as SYSCLK
      000015 75 B2 88         [24] 1254 	mov	_OSCICN,#0x88
                           000018  1255 	C$c8051_SDCC.h$56$1$31 ==.
                           000018  1256 	XG$SYSCLK_Init$0$0 ==.
      000018 22               [24] 1257 	ret
                                   1258 ;------------------------------------------------------------
                                   1259 ;Allocation info for local variables in function 'UART0_Init'
                                   1260 ;------------------------------------------------------------
                           000019  1261 	G$UART0_Init$0$0 ==.
                           000019  1262 	C$c8051_SDCC.h$64$1$31 ==.
                                   1263 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:64: void UART0_Init(void)
                                   1264 ;	-----------------------------------------
                                   1265 ;	 function UART0_Init
                                   1266 ;	-----------------------------------------
      000019                       1267 _UART0_Init:
                           000019  1268 	C$c8051_SDCC.h$66$1$33 ==.
                                   1269 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:66: SCON0  = 0x50;                      // SCON0: mode 1, 8-bit UART, enable RX
      000019 75 98 50         [24] 1270 	mov	_SCON0,#0x50
                           00001C  1271 	C$c8051_SDCC.h$67$1$33 ==.
                                   1272 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:67: TMOD   = 0x20;                      // TMOD: timer 1, mode 2, 8-bit reload
      00001C 75 89 20         [24] 1273 	mov	_TMOD,#0x20
                           00001F  1274 	C$c8051_SDCC.h$68$1$33 ==.
                                   1275 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:68: TH1    = -(SYSCLK/BAUDRATE/16);     // set Timer1 reload value for baudrate
      00001F 75 8D DC         [24] 1276 	mov	_TH1,#0xDC
                           000022  1277 	C$c8051_SDCC.h$69$1$33 ==.
                                   1278 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:69: TR1    = 1;                         // start Timer1
      000022 D2 8E            [12] 1279 	setb	_TR1
                           000024  1280 	C$c8051_SDCC.h$70$1$33 ==.
                                   1281 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:70: CKCON |= 0x10;                      // Timer1 uses SYSCLK as time base
      000024 43 8E 10         [24] 1282 	orl	_CKCON,#0x10
                           000027  1283 	C$c8051_SDCC.h$71$1$33 ==.
                                   1284 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:71: PCON  |= 0x80;                      // SMOD00 = 1 (disable baud rate 
      000027 43 87 80         [24] 1285 	orl	_PCON,#0x80
                           00002A  1286 	C$c8051_SDCC.h$73$1$33 ==.
                                   1287 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:73: TI0    = 1;                         // Indicate TX0 ready
      00002A D2 99            [12] 1288 	setb	_TI0
                           00002C  1289 	C$c8051_SDCC.h$74$1$33 ==.
                                   1290 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:74: P0MDOUT |= 0x01;                    // Set TX0 to push/pull
      00002C 43 A4 01         [24] 1291 	orl	_P0MDOUT,#0x01
                           00002F  1292 	C$c8051_SDCC.h$75$1$33 ==.
                           00002F  1293 	XG$UART0_Init$0$0 ==.
      00002F 22               [24] 1294 	ret
                                   1295 ;------------------------------------------------------------
                                   1296 ;Allocation info for local variables in function 'Sys_Init'
                                   1297 ;------------------------------------------------------------
                           000030  1298 	G$Sys_Init$0$0 ==.
                           000030  1299 	C$c8051_SDCC.h$83$1$33 ==.
                                   1300 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:83: void Sys_Init(void)
                                   1301 ;	-----------------------------------------
                                   1302 ;	 function Sys_Init
                                   1303 ;	-----------------------------------------
      000030                       1304 _Sys_Init:
                           000030  1305 	C$c8051_SDCC.h$85$1$35 ==.
                                   1306 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:85: WDTCN = 0xde;			// disable watchdog timer
      000030 75 FF DE         [24] 1307 	mov	_WDTCN,#0xDE
                           000033  1308 	C$c8051_SDCC.h$86$1$35 ==.
                                   1309 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:86: WDTCN = 0xad;
      000033 75 FF AD         [24] 1310 	mov	_WDTCN,#0xAD
                           000036  1311 	C$c8051_SDCC.h$88$1$35 ==.
                                   1312 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:88: SYSCLK_Init();			// initialize oscillator
      000036 12r00r00         [24] 1313 	lcall	_SYSCLK_Init
                           000039  1314 	C$c8051_SDCC.h$89$1$35 ==.
                                   1315 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:89: UART0_Init();			// initialize UART0
      000039 12r00r19         [24] 1316 	lcall	_UART0_Init
                           00003C  1317 	C$c8051_SDCC.h$91$1$35 ==.
                                   1318 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:91: XBR0 |= 0x04;
      00003C 43 E1 04         [24] 1319 	orl	_XBR0,#0x04
                           00003F  1320 	C$c8051_SDCC.h$92$1$35 ==.
                                   1321 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:92: XBR2 |= 0x40;                    	// Enable crossbar and weak pull-ups
      00003F 43 E3 40         [24] 1322 	orl	_XBR2,#0x40
                           000042  1323 	C$c8051_SDCC.h$93$1$35 ==.
                           000042  1324 	XG$Sys_Init$0$0 ==.
      000042 22               [24] 1325 	ret
                                   1326 ;------------------------------------------------------------
                                   1327 ;Allocation info for local variables in function 'putchar'
                                   1328 ;------------------------------------------------------------
                                   1329 ;c                         Allocated to registers r7 
                                   1330 ;------------------------------------------------------------
                           000043  1331 	G$putchar$0$0 ==.
                           000043  1332 	C$c8051_SDCC.h$98$1$35 ==.
                                   1333 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:98: void putchar(char c)
                                   1334 ;	-----------------------------------------
                                   1335 ;	 function putchar
                                   1336 ;	-----------------------------------------
      000043                       1337 _putchar:
      000043 AF 82            [24] 1338 	mov	r7,dpl
                           000045  1339 	C$c8051_SDCC.h$100$1$37 ==.
                                   1340 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:100: while (!TI0); 
      000045                       1341 00101$:
                           000045  1342 	C$c8051_SDCC.h$101$1$37 ==.
                                   1343 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:101: TI0 = 0;
      000045 10 99 02         [24] 1344 	jbc	_TI0,00112$
      000048 80 FB            [24] 1345 	sjmp	00101$
      00004A                       1346 00112$:
                           00004A  1347 	C$c8051_SDCC.h$102$1$37 ==.
                                   1348 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:102: SBUF0 = c;
      00004A 8F 99            [24] 1349 	mov	_SBUF0,r7
                           00004C  1350 	C$c8051_SDCC.h$103$1$37 ==.
                           00004C  1351 	XG$putchar$0$0 ==.
      00004C 22               [24] 1352 	ret
                                   1353 ;------------------------------------------------------------
                                   1354 ;Allocation info for local variables in function 'getchar'
                                   1355 ;------------------------------------------------------------
                                   1356 ;c                         Allocated to registers 
                                   1357 ;------------------------------------------------------------
                           00004D  1358 	G$getchar$0$0 ==.
                           00004D  1359 	C$c8051_SDCC.h$108$1$37 ==.
                                   1360 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:108: char getchar(void)
                                   1361 ;	-----------------------------------------
                                   1362 ;	 function getchar
                                   1363 ;	-----------------------------------------
      00004D                       1364 _getchar:
                           00004D  1365 	C$c8051_SDCC.h$111$1$39 ==.
                                   1366 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:111: while (!RI0);
      00004D                       1367 00101$:
                           00004D  1368 	C$c8051_SDCC.h$112$1$39 ==.
                                   1369 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:112: RI0 = 0;
      00004D 10 98 02         [24] 1370 	jbc	_RI0,00112$
      000050 80 FB            [24] 1371 	sjmp	00101$
      000052                       1372 00112$:
                           000052  1373 	C$c8051_SDCC.h$113$1$39 ==.
                                   1374 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:113: c = SBUF0;
      000052 85 99 82         [24] 1375 	mov	dpl,_SBUF0
                           000055  1376 	C$c8051_SDCC.h$114$1$39 ==.
                                   1377 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:114: putchar(c);                          // echo to terminal
      000055 12r00r43         [24] 1378 	lcall	_putchar
                           000058  1379 	C$c8051_SDCC.h$115$1$39 ==.
                                   1380 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:115: return SBUF0;
      000058 85 99 82         [24] 1381 	mov	dpl,_SBUF0
                           00005B  1382 	C$c8051_SDCC.h$116$1$39 ==.
                           00005B  1383 	XG$getchar$0$0 ==.
      00005B 22               [24] 1384 	ret
                                   1385 ;------------------------------------------------------------
                                   1386 ;Allocation info for local variables in function 'lcd_print'
                                   1387 ;------------------------------------------------------------
                                   1388 ;fmt                       Allocated to stack - _bp -5
                                   1389 ;len                       Allocated to registers r6 
                                   1390 ;i                         Allocated to registers 
                                   1391 ;ap                        Allocated to registers 
                                   1392 ;text                      Allocated with name '_lcd_print_text_1_73'
                                   1393 ;------------------------------------------------------------
                           00005C  1394 	G$lcd_print$0$0 ==.
                           00005C  1395 	C$i2c.h$81$1$39 ==.
                                   1396 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:81: void lcd_print(const char *fmt, ...)
                                   1397 ;	-----------------------------------------
                                   1398 ;	 function lcd_print
                                   1399 ;	-----------------------------------------
      00005C                       1400 _lcd_print:
      00005C C0*00            [24] 1401 	push	_bp
      00005E 85 81*00         [24] 1402 	mov	_bp,sp
                           000061  1403 	C$i2c.h$87$1$73 ==.
                                   1404 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:87: if ( strlen(fmt) <= 0 ) return;   //If there is no data to print, return
      000061 E5*00            [12] 1405 	mov	a,_bp
      000063 24 FB            [12] 1406 	add	a,#0xfb
      000065 F8               [12] 1407 	mov	r0,a
      000066 86 82            [24] 1408 	mov	dpl,@r0
      000068 08               [12] 1409 	inc	r0
      000069 86 83            [24] 1410 	mov	dph,@r0
      00006B 08               [12] 1411 	inc	r0
      00006C 86 F0            [24] 1412 	mov	b,@r0
      00006E 12r00r00         [24] 1413 	lcall	_strlen
      000071 E5 82            [12] 1414 	mov	a,dpl
      000073 85 83 F0         [24] 1415 	mov	b,dph
      000076 45 F0            [12] 1416 	orl	a,b
      000078 70 02            [24] 1417 	jnz	00102$
      00007A 80 62            [24] 1418 	sjmp	00109$
      00007C                       1419 00102$:
                           00007C  1420 	C$i2c.h$89$2$74 ==.
                                   1421 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:89: va_start(ap, fmt);
      00007C E5*00            [12] 1422 	mov	a,_bp
      00007E 24 FB            [12] 1423 	add	a,#0xFB
      000080 FF               [12] 1424 	mov	r7,a
      000081 8F*00            [24] 1425 	mov	_vsprintf_PARM_3,r7
                           000083  1426 	C$i2c.h$90$1$73 ==.
                                   1427 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:90: vsprintf(text, fmt, ap);
      000083 E5*00            [12] 1428 	mov	a,_bp
      000085 24 FB            [12] 1429 	add	a,#0xfb
      000087 F8               [12] 1430 	mov	r0,a
      000088 86*00            [24] 1431 	mov	_vsprintf_PARM_2,@r0
      00008A 08               [12] 1432 	inc	r0
      00008B 86*01            [24] 1433 	mov	(_vsprintf_PARM_2 + 1),@r0
      00008D 08               [12] 1434 	inc	r0
      00008E 86*02            [24] 1435 	mov	(_vsprintf_PARM_2 + 2),@r0
      000090 90r00r00         [24] 1436 	mov	dptr,#_lcd_print_text_1_73
      000093 75 F0 00         [24] 1437 	mov	b,#0x00
      000096 12r00r00         [24] 1438 	lcall	_vsprintf
                           000099  1439 	C$i2c.h$93$1$73 ==.
                                   1440 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:93: len = strlen(text);
      000099 90r00r00         [24] 1441 	mov	dptr,#_lcd_print_text_1_73
      00009C 75 F0 00         [24] 1442 	mov	b,#0x00
      00009F 12r00r00         [24] 1443 	lcall	_strlen
      0000A2 AE 82            [24] 1444 	mov	r6,dpl
                           0000A4  1445 	C$i2c.h$94$1$73 ==.
                                   1446 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:94: for(i=0; i<len; i++)
      0000A4 7F 00            [12] 1447 	mov	r7,#0x00
      0000A6                       1448 00107$:
      0000A6 C3               [12] 1449 	clr	c
      0000A7 EF               [12] 1450 	mov	a,r7
      0000A8 9E               [12] 1451 	subb	a,r6
      0000A9 50 1F            [24] 1452 	jnc	00105$
                           0000AB  1453 	C$i2c.h$96$2$76 ==.
                                   1454 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:96: if(text[i] == (unsigned char)'\n') text[i] = 13;
      0000AB EF               [12] 1455 	mov	a,r7
      0000AC 24r00            [12] 1456 	add	a,#_lcd_print_text_1_73
      0000AE F5 82            [12] 1457 	mov	dpl,a
      0000B0 E4               [12] 1458 	clr	a
      0000B1 34s00            [12] 1459 	addc	a,#(_lcd_print_text_1_73 >> 8)
      0000B3 F5 83            [12] 1460 	mov	dph,a
      0000B5 E0               [24] 1461 	movx	a,@dptr
      0000B6 FD               [12] 1462 	mov	r5,a
      0000B7 BD 0A 0D         [24] 1463 	cjne	r5,#0x0A,00108$
      0000BA EF               [12] 1464 	mov	a,r7
      0000BB 24r00            [12] 1465 	add	a,#_lcd_print_text_1_73
      0000BD F5 82            [12] 1466 	mov	dpl,a
      0000BF E4               [12] 1467 	clr	a
      0000C0 34s00            [12] 1468 	addc	a,#(_lcd_print_text_1_73 >> 8)
      0000C2 F5 83            [12] 1469 	mov	dph,a
      0000C4 74 0D            [12] 1470 	mov	a,#0x0D
      0000C6 F0               [24] 1471 	movx	@dptr,a
      0000C7                       1472 00108$:
                           0000C7  1473 	C$i2c.h$94$1$73 ==.
                                   1474 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:94: for(i=0; i<len; i++)
      0000C7 0F               [12] 1475 	inc	r7
      0000C8 80 DC            [24] 1476 	sjmp	00107$
      0000CA                       1477 00105$:
                           0000CA  1478 	C$i2c.h$99$1$73 ==.
                                   1479 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:99: i2c_write_data(0xC6, 0x00, text, len);
      0000CA 75*06r00         [24] 1480 	mov	_i2c_write_data_PARM_3,#_lcd_print_text_1_73
      0000CD 75*07s00         [24] 1481 	mov	(_i2c_write_data_PARM_3 + 1),#(_lcd_print_text_1_73 >> 8)
      0000D0 75*08 00         [24] 1482 	mov	(_i2c_write_data_PARM_3 + 2),#0x00
      0000D3 75*05 00         [24] 1483 	mov	_i2c_write_data_PARM_2,#0x00
      0000D6 8E*09            [24] 1484 	mov	_i2c_write_data_PARM_4,r6
      0000D8 75 82 C6         [24] 1485 	mov	dpl,#0xC6
      0000DB 12r03r72         [24] 1486 	lcall	_i2c_write_data
      0000DE                       1487 00109$:
      0000DE D0*00            [24] 1488 	pop	_bp
                           0000E0  1489 	C$i2c.h$100$1$73 ==.
                           0000E0  1490 	XG$lcd_print$0$0 ==.
      0000E0 22               [24] 1491 	ret
                                   1492 ;------------------------------------------------------------
                                   1493 ;Allocation info for local variables in function 'lcd_clear'
                                   1494 ;------------------------------------------------------------
                                   1495 ;NumBytes                  Allocated with name '_lcd_clear_NumBytes_1_77'
                                   1496 ;Cmd                       Allocated with name '_lcd_clear_Cmd_1_77'
                                   1497 ;------------------------------------------------------------
                           0000E1  1498 	G$lcd_clear$0$0 ==.
                           0000E1  1499 	C$i2c.h$103$1$73 ==.
                                   1500 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:103: void lcd_clear()
                                   1501 ;	-----------------------------------------
                                   1502 ;	 function lcd_clear
                                   1503 ;	-----------------------------------------
      0000E1                       1504 _lcd_clear:
                           0000E1  1505 	C$i2c.h$105$1$73 ==.
                                   1506 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:105: unsigned char NumBytes=0, Cmd[2];
      0000E1 75*00 00         [24] 1507 	mov	_lcd_clear_NumBytes_1_77,#0x00
                           0000E4  1508 	C$i2c.h$107$1$77 ==.
                                   1509 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:107: while(NumBytes < 64) i2c_read_data(0xC6, 0x00, &NumBytes, 1);
      0000E4                       1510 00101$:
      0000E4 74 C0            [12] 1511 	mov	a,#0x100 - 0x40
      0000E6 25*00            [12] 1512 	add	a,_lcd_clear_NumBytes_1_77
      0000E8 40 17            [24] 1513 	jc	00103$
      0000EA 75*0Br00         [24] 1514 	mov	_i2c_read_data_PARM_3,#_lcd_clear_NumBytes_1_77
      0000ED 75*0C 00         [24] 1515 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      0000F0 75*0D 40         [24] 1516 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      0000F3 75*0A 00         [24] 1517 	mov	_i2c_read_data_PARM_2,#0x00
      0000F6 75*0E 01         [24] 1518 	mov	_i2c_read_data_PARM_4,#0x01
      0000F9 75 82 C6         [24] 1519 	mov	dpl,#0xC6
      0000FC 12r03rE8         [24] 1520 	lcall	_i2c_read_data
      0000FF 80 E3            [24] 1521 	sjmp	00101$
      000101                       1522 00103$:
                           000101  1523 	C$i2c.h$109$1$77 ==.
                                   1524 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:109: Cmd[0] = 12;
      000101 75*01 0C         [24] 1525 	mov	_lcd_clear_Cmd_1_77,#0x0C
                           000104  1526 	C$i2c.h$110$1$77 ==.
                                   1527 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:110: i2c_write_data(0xC6, 0x00, Cmd, 1);
      000104 75*06r01         [24] 1528 	mov	_i2c_write_data_PARM_3,#_lcd_clear_Cmd_1_77
      000107 75*07 00         [24] 1529 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      00010A 75*08 40         [24] 1530 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      00010D 75*05 00         [24] 1531 	mov	_i2c_write_data_PARM_2,#0x00
      000110 75*09 01         [24] 1532 	mov	_i2c_write_data_PARM_4,#0x01
      000113 75 82 C6         [24] 1533 	mov	dpl,#0xC6
      000116 12r03r72         [24] 1534 	lcall	_i2c_write_data
                           000119  1535 	C$i2c.h$111$1$77 ==.
                           000119  1536 	XG$lcd_clear$0$0 ==.
      000119 22               [24] 1537 	ret
                                   1538 ;------------------------------------------------------------
                                   1539 ;Allocation info for local variables in function 'read_keypad'
                                   1540 ;------------------------------------------------------------
                                   1541 ;i                         Allocated to registers r7 
                                   1542 ;Data                      Allocated with name '_read_keypad_Data_1_78'
                                   1543 ;------------------------------------------------------------
                           00011A  1544 	G$read_keypad$0$0 ==.
                           00011A  1545 	C$i2c.h$114$1$77 ==.
                                   1546 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:114: char read_keypad()
                                   1547 ;	-----------------------------------------
                                   1548 ;	 function read_keypad
                                   1549 ;	-----------------------------------------
      00011A                       1550 _read_keypad:
                           00011A  1551 	C$i2c.h$118$1$78 ==.
                                   1552 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:118: i2c_read_data(0xC6, 0x01, Data, 2); //Read I2C data on address 192, register 1, 2 bytes of data.
      00011A 75*0Br03         [24] 1553 	mov	_i2c_read_data_PARM_3,#_read_keypad_Data_1_78
      00011D 75*0C 00         [24] 1554 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      000120 75*0D 40         [24] 1555 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000123 75*0A 01         [24] 1556 	mov	_i2c_read_data_PARM_2,#0x01
      000126 75*0E 02         [24] 1557 	mov	_i2c_read_data_PARM_4,#0x02
      000129 75 82 C6         [24] 1558 	mov	dpl,#0xC6
      00012C 12r03rE8         [24] 1559 	lcall	_i2c_read_data
                           00012F  1560 	C$i2c.h$119$1$78 ==.
                                   1561 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:119: if(Data[0] == 0xFF) return 0;  //No response on bus, no display
      00012F 74 FF            [12] 1562 	mov	a,#0xFF
      000131 B5*03 05         [24] 1563 	cjne	a,_read_keypad_Data_1_78,00102$
      000134 75 82 00         [24] 1564 	mov	dpl,#0x00
      000137 80 5F            [24] 1565 	sjmp	00116$
      000139                       1566 00102$:
                           000139  1567 	C$i2c.h$121$1$78 ==.
                                   1568 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:121: for(i=0; i<8; i++)             //loop 8 times
      000139 7F 00            [12] 1569 	mov	r7,#0x00
      00013B 8F 06            [24] 1570 	mov	ar6,r7
      00013D                       1571 00114$:
                           00013D  1572 	C$i2c.h$123$2$79 ==.
                                   1573 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:123: if(Data[0] & (0x01 << i))  //find the ASCII value of the keypad read, if it is the current loop value
      00013D 8E F0            [24] 1574 	mov	b,r6
      00013F 05 F0            [12] 1575 	inc	b
      000141 7C 01            [12] 1576 	mov	r4,#0x01
      000143 7D 00            [12] 1577 	mov	r5,#0x00
      000145 80 06            [24] 1578 	sjmp	00145$
      000147                       1579 00144$:
      000147 EC               [12] 1580 	mov	a,r4
      000148 2C               [12] 1581 	add	a,r4
      000149 FC               [12] 1582 	mov	r4,a
      00014A ED               [12] 1583 	mov	a,r5
      00014B 33               [12] 1584 	rlc	a
      00014C FD               [12] 1585 	mov	r5,a
      00014D                       1586 00145$:
      00014D D5 F0 F7         [24] 1587 	djnz	b,00144$
      000150 AA*03            [24] 1588 	mov	r2,_read_keypad_Data_1_78
      000152 7B 00            [12] 1589 	mov	r3,#0x00
      000154 EA               [12] 1590 	mov	a,r2
      000155 52 04            [12] 1591 	anl	ar4,a
      000157 EB               [12] 1592 	mov	a,r3
      000158 52 05            [12] 1593 	anl	ar5,a
      00015A EC               [12] 1594 	mov	a,r4
      00015B 4D               [12] 1595 	orl	a,r5
      00015C 60 07            [24] 1596 	jz	00115$
                           00015E  1597 	C$i2c.h$124$2$79 ==.
                                   1598 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:124: return i+49;
      00015E 74 31            [12] 1599 	mov	a,#0x31
      000160 2F               [12] 1600 	add	a,r7
      000161 F5 82            [12] 1601 	mov	dpl,a
      000163 80 33            [24] 1602 	sjmp	00116$
      000165                       1603 00115$:
                           000165  1604 	C$i2c.h$121$1$78 ==.
                                   1605 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:121: for(i=0; i<8; i++)             //loop 8 times
      000165 0E               [12] 1606 	inc	r6
      000166 8E 07            [24] 1607 	mov	ar7,r6
      000168 BE 08 00         [24] 1608 	cjne	r6,#0x08,00147$
      00016B                       1609 00147$:
      00016B 40 D0            [24] 1610 	jc	00114$
                           00016D  1611 	C$i2c.h$127$1$78 ==.
                                   1612 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:127: if(Data[1] & 0x01) return '9'; //if the value is equal to 9 return 9.
      00016D E5*04            [12] 1613 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      00016F 30 E0 05         [24] 1614 	jnb	acc.0,00107$
      000172 75 82 39         [24] 1615 	mov	dpl,#0x39
      000175 80 21            [24] 1616 	sjmp	00116$
      000177                       1617 00107$:
                           000177  1618 	C$i2c.h$129$1$78 ==.
                                   1619 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:129: if(Data[1] & 0x02) return '*'; //if the value is equal to the star.
      000177 E5*04            [12] 1620 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      000179 30 E1 05         [24] 1621 	jnb	acc.1,00109$
      00017C 75 82 2A         [24] 1622 	mov	dpl,#0x2A
      00017F 80 17            [24] 1623 	sjmp	00116$
      000181                       1624 00109$:
                           000181  1625 	C$i2c.h$131$1$78 ==.
                                   1626 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:131: if(Data[1] & 0x04) return '0'; //if the value is equal to the 0 key
      000181 E5*04            [12] 1627 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      000183 30 E2 05         [24] 1628 	jnb	acc.2,00111$
      000186 75 82 30         [24] 1629 	mov	dpl,#0x30
      000189 80 0D            [24] 1630 	sjmp	00116$
      00018B                       1631 00111$:
                           00018B  1632 	C$i2c.h$133$1$78 ==.
                                   1633 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:133: if(Data[1] & 0x08) return '#'; //if the value is equal to the pound key
      00018B E5*04            [12] 1634 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      00018D 30 E3 05         [24] 1635 	jnb	acc.3,00113$
      000190 75 82 23         [24] 1636 	mov	dpl,#0x23
      000193 80 03            [24] 1637 	sjmp	00116$
      000195                       1638 00113$:
                           000195  1639 	C$i2c.h$135$1$78 ==.
                                   1640 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:135: return -1;                     //else return a numerical -1 (0xFF)
      000195 75 82 FF         [24] 1641 	mov	dpl,#0xFF
      000198                       1642 00116$:
                           000198  1643 	C$i2c.h$136$1$78 ==.
                           000198  1644 	XG$read_keypad$0$0 ==.
      000198 22               [24] 1645 	ret
                                   1646 ;------------------------------------------------------------
                                   1647 ;Allocation info for local variables in function 'kpd_input'
                                   1648 ;------------------------------------------------------------
                                   1649 ;mode                      Allocated to registers r7 
                                   1650 ;sum                       Allocated to registers r5 r6 
                                   1651 ;key                       Allocated to registers r3 
                                   1652 ;i                         Allocated to registers 
                                   1653 ;------------------------------------------------------------
                           000199  1654 	G$kpd_input$0$0 ==.
                           000199  1655 	C$i2c.h$148$1$78 ==.
                                   1656 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:148: unsigned int kpd_input(char mode)
                                   1657 ;	-----------------------------------------
                                   1658 ;	 function kpd_input
                                   1659 ;	-----------------------------------------
      000199                       1660 _kpd_input:
      000199 AF 82            [24] 1661 	mov	r7,dpl
                           00019B  1662 	C$i2c.h$153$1$81 ==.
                                   1663 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:153: sum = 0;
                           00019B  1664 	C$i2c.h$156$1$81 ==.
                                   1665 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:156: if(mode==0)lcd_print("\nType digits; end w/#");
      00019B E4               [12] 1666 	clr	a
      00019C FD               [12] 1667 	mov	r5,a
      00019D FE               [12] 1668 	mov	r6,a
      00019E EF               [12] 1669 	mov	a,r7
      00019F 70 1D            [24] 1670 	jnz	00102$
      0001A1 C0 06            [24] 1671 	push	ar6
      0001A3 C0 05            [24] 1672 	push	ar5
      0001A5 74r00            [12] 1673 	mov	a,#___str_0
      0001A7 C0 E0            [24] 1674 	push	acc
      0001A9 74s00            [12] 1675 	mov	a,#(___str_0 >> 8)
      0001AB C0 E0            [24] 1676 	push	acc
      0001AD 74 80            [12] 1677 	mov	a,#0x80
      0001AF C0 E0            [24] 1678 	push	acc
      0001B1 12r00r5C         [24] 1679 	lcall	_lcd_print
      0001B4 15 81            [12] 1680 	dec	sp
      0001B6 15 81            [12] 1681 	dec	sp
      0001B8 15 81            [12] 1682 	dec	sp
      0001BA D0 05            [24] 1683 	pop	ar5
      0001BC D0 06            [24] 1684 	pop	ar6
      0001BE                       1685 00102$:
                           0001BE  1686 	C$i2c.h$158$1$81 ==.
                                   1687 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:158: lcd_print("     %c%c%c%c%c",0x08,0x08,0x08,0x08,0x08);
      0001BE C0 06            [24] 1688 	push	ar6
      0001C0 C0 05            [24] 1689 	push	ar5
      0001C2 74 08            [12] 1690 	mov	a,#0x08
      0001C4 C0 E0            [24] 1691 	push	acc
      0001C6 E4               [12] 1692 	clr	a
      0001C7 C0 E0            [24] 1693 	push	acc
      0001C9 74 08            [12] 1694 	mov	a,#0x08
      0001CB C0 E0            [24] 1695 	push	acc
      0001CD E4               [12] 1696 	clr	a
      0001CE C0 E0            [24] 1697 	push	acc
      0001D0 74 08            [12] 1698 	mov	a,#0x08
      0001D2 C0 E0            [24] 1699 	push	acc
      0001D4 E4               [12] 1700 	clr	a
      0001D5 C0 E0            [24] 1701 	push	acc
      0001D7 74 08            [12] 1702 	mov	a,#0x08
      0001D9 C0 E0            [24] 1703 	push	acc
      0001DB E4               [12] 1704 	clr	a
      0001DC C0 E0            [24] 1705 	push	acc
      0001DE 74 08            [12] 1706 	mov	a,#0x08
      0001E0 C0 E0            [24] 1707 	push	acc
      0001E2 E4               [12] 1708 	clr	a
      0001E3 C0 E0            [24] 1709 	push	acc
      0001E5 74r16            [12] 1710 	mov	a,#___str_1
      0001E7 C0 E0            [24] 1711 	push	acc
      0001E9 74s00            [12] 1712 	mov	a,#(___str_1 >> 8)
      0001EB C0 E0            [24] 1713 	push	acc
      0001ED 74 80            [12] 1714 	mov	a,#0x80
      0001EF C0 E0            [24] 1715 	push	acc
      0001F1 12r00r5C         [24] 1716 	lcall	_lcd_print
      0001F4 E5 81            [12] 1717 	mov	a,sp
      0001F6 24 F3            [12] 1718 	add	a,#0xf3
      0001F8 F5 81            [12] 1719 	mov	sp,a
                           0001FA  1720 	C$i2c.h$160$1$81 ==.
                                   1721 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:160: delay_time(500000);	//Add 20ms delay before reading i2c in loop
      0001FA 90 A1 20         [24] 1722 	mov	dptr,#0xA120
      0001FD 75 F0 07         [24] 1723 	mov	b,#0x07
      000200 E4               [12] 1724 	clr	a
      000201 12r03r0D         [24] 1725 	lcall	_delay_time
      000204 D0 05            [24] 1726 	pop	ar5
      000206 D0 06            [24] 1727 	pop	ar6
                           000208  1728 	C$i2c.h$164$1$81 ==.
                                   1729 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:164: for(i=0; i<5; i++)
      000208 7F 00            [12] 1730 	mov	r7,#0x00
                           00020A  1731 	C$i2c.h$166$3$84 ==.
                                   1732 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:166: while(((key=read_keypad()) == -1) || (key == '*'))delay_time(10000);
      00020A                       1733 00104$:
      00020A C0 07            [24] 1734 	push	ar7
      00020C C0 06            [24] 1735 	push	ar6
      00020E C0 05            [24] 1736 	push	ar5
      000210 12r01r1A         [24] 1737 	lcall	_read_keypad
      000213 AC 82            [24] 1738 	mov	r4,dpl
      000215 D0 05            [24] 1739 	pop	ar5
      000217 D0 06            [24] 1740 	pop	ar6
      000219 D0 07            [24] 1741 	pop	ar7
      00021B 8C 03            [24] 1742 	mov	ar3,r4
      00021D BC FF 02         [24] 1743 	cjne	r4,#0xFF,00146$
      000220 80 03            [24] 1744 	sjmp	00105$
      000222                       1745 00146$:
      000222 BB 2A 17         [24] 1746 	cjne	r3,#0x2A,00106$
      000225                       1747 00105$:
      000225 90 27 10         [24] 1748 	mov	dptr,#0x2710
      000228 E4               [12] 1749 	clr	a
      000229 F5 F0            [12] 1750 	mov	b,a
      00022B C0 07            [24] 1751 	push	ar7
      00022D C0 06            [24] 1752 	push	ar6
      00022F C0 05            [24] 1753 	push	ar5
      000231 12r03r0D         [24] 1754 	lcall	_delay_time
      000234 D0 05            [24] 1755 	pop	ar5
      000236 D0 06            [24] 1756 	pop	ar6
      000238 D0 07            [24] 1757 	pop	ar7
      00023A 80 CE            [24] 1758 	sjmp	00104$
      00023C                       1759 00106$:
                           00023C  1760 	C$i2c.h$167$2$82 ==.
                                   1761 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:167: if(key == '#')
      00023C BB 23 2A         [24] 1762 	cjne	r3,#0x23,00114$
                           00023F  1763 	C$i2c.h$169$3$83 ==.
                                   1764 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:169: while(read_keypad() == '#')delay_time(10000);
      00023F                       1765 00107$:
      00023F C0 06            [24] 1766 	push	ar6
      000241 C0 05            [24] 1767 	push	ar5
      000243 12r01r1A         [24] 1768 	lcall	_read_keypad
      000246 AC 82            [24] 1769 	mov	r4,dpl
      000248 D0 05            [24] 1770 	pop	ar5
      00024A D0 06            [24] 1771 	pop	ar6
      00024C BC 23 13         [24] 1772 	cjne	r4,#0x23,00109$
      00024F 90 27 10         [24] 1773 	mov	dptr,#0x2710
      000252 E4               [12] 1774 	clr	a
      000253 F5 F0            [12] 1775 	mov	b,a
      000255 C0 06            [24] 1776 	push	ar6
      000257 C0 05            [24] 1777 	push	ar5
      000259 12r03r0D         [24] 1778 	lcall	_delay_time
      00025C D0 05            [24] 1779 	pop	ar5
      00025E D0 06            [24] 1780 	pop	ar6
      000260 80 DD            [24] 1781 	sjmp	00107$
      000262                       1782 00109$:
                           000262  1783 	C$i2c.h$170$3$83 ==.
                                   1784 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:170: return sum;
      000262 8D 82            [24] 1785 	mov	dpl,r5
      000264 8E 83            [24] 1786 	mov	dph,r6
      000266 02r03r0C         [24] 1787 	ljmp	00119$
      000269                       1788 00114$:
                           000269  1789 	C$i2c.h$174$3$84 ==.
                                   1790 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:174: lcd_print("%c", key);
      000269 EB               [12] 1791 	mov	a,r3
      00026A FA               [12] 1792 	mov	r2,a
      00026B 33               [12] 1793 	rlc	a
      00026C 95 E0            [12] 1794 	subb	a,acc
      00026E FC               [12] 1795 	mov	r4,a
      00026F C0 07            [24] 1796 	push	ar7
      000271 C0 06            [24] 1797 	push	ar6
      000273 C0 05            [24] 1798 	push	ar5
      000275 C0 04            [24] 1799 	push	ar4
      000277 C0 03            [24] 1800 	push	ar3
      000279 C0 02            [24] 1801 	push	ar2
      00027B C0 02            [24] 1802 	push	ar2
      00027D C0 04            [24] 1803 	push	ar4
      00027F 74r26            [12] 1804 	mov	a,#___str_2
      000281 C0 E0            [24] 1805 	push	acc
      000283 74s00            [12] 1806 	mov	a,#(___str_2 >> 8)
      000285 C0 E0            [24] 1807 	push	acc
      000287 74 80            [12] 1808 	mov	a,#0x80
      000289 C0 E0            [24] 1809 	push	acc
      00028B 12r00r5C         [24] 1810 	lcall	_lcd_print
      00028E E5 81            [12] 1811 	mov	a,sp
      000290 24 FB            [12] 1812 	add	a,#0xfb
      000292 F5 81            [12] 1813 	mov	sp,a
      000294 D0 02            [24] 1814 	pop	ar2
      000296 D0 03            [24] 1815 	pop	ar3
      000298 D0 04            [24] 1816 	pop	ar4
      00029A D0 05            [24] 1817 	pop	ar5
      00029C D0 06            [24] 1818 	pop	ar6
                           00029E  1819 	C$i2c.h$175$1$81 ==.
                                   1820 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:175: sum = sum*10 + key - '0';
      00029E 8D*00            [24] 1821 	mov	__mulint_PARM_2,r5
      0002A0 8E*01            [24] 1822 	mov	(__mulint_PARM_2 + 1),r6
      0002A2 90 00 0A         [24] 1823 	mov	dptr,#0x000A
      0002A5 C0 04            [24] 1824 	push	ar4
      0002A7 C0 03            [24] 1825 	push	ar3
      0002A9 C0 02            [24] 1826 	push	ar2
      0002AB 12r00r00         [24] 1827 	lcall	__mulint
      0002AE A8 82            [24] 1828 	mov	r0,dpl
      0002B0 A9 83            [24] 1829 	mov	r1,dph
      0002B2 D0 02            [24] 1830 	pop	ar2
      0002B4 D0 03            [24] 1831 	pop	ar3
      0002B6 D0 04            [24] 1832 	pop	ar4
      0002B8 D0 07            [24] 1833 	pop	ar7
      0002BA EA               [12] 1834 	mov	a,r2
      0002BB 28               [12] 1835 	add	a,r0
      0002BC F8               [12] 1836 	mov	r0,a
      0002BD EC               [12] 1837 	mov	a,r4
      0002BE 39               [12] 1838 	addc	a,r1
      0002BF F9               [12] 1839 	mov	r1,a
      0002C0 E8               [12] 1840 	mov	a,r0
      0002C1 24 D0            [12] 1841 	add	a,#0xD0
      0002C3 FD               [12] 1842 	mov	r5,a
      0002C4 E9               [12] 1843 	mov	a,r1
      0002C5 34 FF            [12] 1844 	addc	a,#0xFF
      0002C7 FE               [12] 1845 	mov	r6,a
                           0002C8  1846 	C$i2c.h$176$3$84 ==.
                                   1847 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:176: while(read_keypad() == key)delay_time(10000); //wait for key to be released
      0002C8                       1848 00110$:
      0002C8 C0 07            [24] 1849 	push	ar7
      0002CA C0 06            [24] 1850 	push	ar6
      0002CC C0 05            [24] 1851 	push	ar5
      0002CE C0 03            [24] 1852 	push	ar3
      0002D0 12r01r1A         [24] 1853 	lcall	_read_keypad
      0002D3 AC 82            [24] 1854 	mov	r4,dpl
      0002D5 D0 03            [24] 1855 	pop	ar3
      0002D7 D0 05            [24] 1856 	pop	ar5
      0002D9 D0 06            [24] 1857 	pop	ar6
      0002DB D0 07            [24] 1858 	pop	ar7
      0002DD EC               [12] 1859 	mov	a,r4
      0002DE B5 03 1B         [24] 1860 	cjne	a,ar3,00118$
      0002E1 90 27 10         [24] 1861 	mov	dptr,#0x2710
      0002E4 E4               [12] 1862 	clr	a
      0002E5 F5 F0            [12] 1863 	mov	b,a
      0002E7 C0 07            [24] 1864 	push	ar7
      0002E9 C0 06            [24] 1865 	push	ar6
      0002EB C0 05            [24] 1866 	push	ar5
      0002ED C0 03            [24] 1867 	push	ar3
      0002EF 12r03r0D         [24] 1868 	lcall	_delay_time
      0002F2 D0 03            [24] 1869 	pop	ar3
      0002F4 D0 05            [24] 1870 	pop	ar5
      0002F6 D0 06            [24] 1871 	pop	ar6
      0002F8 D0 07            [24] 1872 	pop	ar7
      0002FA 80 CC            [24] 1873 	sjmp	00110$
      0002FC                       1874 00118$:
                           0002FC  1875 	C$i2c.h$164$1$81 ==.
                                   1876 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:164: for(i=0; i<5; i++)
      0002FC 0F               [12] 1877 	inc	r7
      0002FD C3               [12] 1878 	clr	c
      0002FE EF               [12] 1879 	mov	a,r7
      0002FF 64 80            [12] 1880 	xrl	a,#0x80
      000301 94 85            [12] 1881 	subb	a,#0x85
      000303 50 03            [24] 1882 	jnc	00155$
      000305 02r02r0A         [24] 1883 	ljmp	00104$
      000308                       1884 00155$:
                           000308  1885 	C$i2c.h$179$1$81 ==.
                                   1886 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:179: return sum;
      000308 8D 82            [24] 1887 	mov	dpl,r5
      00030A 8E 83            [24] 1888 	mov	dph,r6
      00030C                       1889 00119$:
                           00030C  1890 	C$i2c.h$180$1$81 ==.
                           00030C  1891 	XG$kpd_input$0$0 ==.
      00030C 22               [24] 1892 	ret
                                   1893 ;------------------------------------------------------------
                                   1894 ;Allocation info for local variables in function 'delay_time'
                                   1895 ;------------------------------------------------------------
                                   1896 ;time_end                  Allocated to registers r4 r5 r6 r7 
                                   1897 ;index                     Allocated to registers 
                                   1898 ;------------------------------------------------------------
                           00030D  1899 	G$delay_time$0$0 ==.
                           00030D  1900 	C$i2c.h$189$1$81 ==.
                                   1901 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:189: void delay_time (unsigned long time_end)
                                   1902 ;	-----------------------------------------
                                   1903 ;	 function delay_time
                                   1904 ;	-----------------------------------------
      00030D                       1905 _delay_time:
      00030D AC 82            [24] 1906 	mov	r4,dpl
      00030F AD 83            [24] 1907 	mov	r5,dph
      000311 AE F0            [24] 1908 	mov	r6,b
      000313 FF               [12] 1909 	mov	r7,a
                           000314  1910 	C$i2c.h$192$1$86 ==.
                                   1911 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:192: for (index = 0; index < time_end; index++); //for loop delay
      000314 78 00            [12] 1912 	mov	r0,#0x00
      000316 79 00            [12] 1913 	mov	r1,#0x00
      000318 7A 00            [12] 1914 	mov	r2,#0x00
      00031A 7B 00            [12] 1915 	mov	r3,#0x00
      00031C                       1916 00103$:
      00031C C3               [12] 1917 	clr	c
      00031D E8               [12] 1918 	mov	a,r0
      00031E 9C               [12] 1919 	subb	a,r4
      00031F E9               [12] 1920 	mov	a,r1
      000320 9D               [12] 1921 	subb	a,r5
      000321 EA               [12] 1922 	mov	a,r2
      000322 9E               [12] 1923 	subb	a,r6
      000323 EB               [12] 1924 	mov	a,r3
      000324 9F               [12] 1925 	subb	a,r7
      000325 50 0F            [24] 1926 	jnc	00105$
      000327 08               [12] 1927 	inc	r0
      000328 B8 00 09         [24] 1928 	cjne	r0,#0x00,00115$
      00032B 09               [12] 1929 	inc	r1
      00032C B9 00 05         [24] 1930 	cjne	r1,#0x00,00115$
      00032F 0A               [12] 1931 	inc	r2
      000330 BA 00 E9         [24] 1932 	cjne	r2,#0x00,00103$
      000333 0B               [12] 1933 	inc	r3
      000334                       1934 00115$:
      000334 80 E6            [24] 1935 	sjmp	00103$
      000336                       1936 00105$:
                           000336  1937 	C$i2c.h$193$1$86 ==.
                           000336  1938 	XG$delay_time$0$0 ==.
      000336 22               [24] 1939 	ret
                                   1940 ;------------------------------------------------------------
                                   1941 ;Allocation info for local variables in function 'i2c_start'
                                   1942 ;------------------------------------------------------------
                           000337  1943 	G$i2c_start$0$0 ==.
                           000337  1944 	C$i2c.h$196$1$86 ==.
                                   1945 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:196: void i2c_start(void)
                                   1946 ;	-----------------------------------------
                                   1947 ;	 function i2c_start
                                   1948 ;	-----------------------------------------
      000337                       1949 _i2c_start:
                           000337  1950 	C$i2c.h$198$1$88 ==.
                                   1951 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:198: while(BUSY);              //Wait until SMBus0 is free
      000337                       1952 00101$:
      000337 20 C7 FD         [24] 1953 	jb	_BUSY,00101$
                           00033A  1954 	C$i2c.h$199$1$88 ==.
                                   1955 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:199: STA = 1;                  //Set Start Bit
      00033A D2 C5            [12] 1956 	setb	_STA
                           00033C  1957 	C$i2c.h$200$1$88 ==.
                                   1958 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:200: while(!SI);               //Wait until start sent
      00033C                       1959 00104$:
      00033C 30 C3 FD         [24] 1960 	jnb	_SI,00104$
                           00033F  1961 	C$i2c.h$201$1$88 ==.
                                   1962 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:201: STA = 0;                  //Clear start bit
      00033F C2 C5            [12] 1963 	clr	_STA
                           000341  1964 	C$i2c.h$202$1$88 ==.
                                   1965 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:202: SI = 0;                   //Clear SI
      000341 C2 C3            [12] 1966 	clr	_SI
                           000343  1967 	C$i2c.h$203$1$88 ==.
                           000343  1968 	XG$i2c_start$0$0 ==.
      000343 22               [24] 1969 	ret
                                   1970 ;------------------------------------------------------------
                                   1971 ;Allocation info for local variables in function 'i2c_write'
                                   1972 ;------------------------------------------------------------
                                   1973 ;output_data               Allocated to registers 
                                   1974 ;------------------------------------------------------------
                           000344  1975 	G$i2c_write$0$0 ==.
                           000344  1976 	C$i2c.h$206$1$88 ==.
                                   1977 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:206: void i2c_write(unsigned char output_data)
                                   1978 ;	-----------------------------------------
                                   1979 ;	 function i2c_write
                                   1980 ;	-----------------------------------------
      000344                       1981 _i2c_write:
      000344 85 82 C2         [24] 1982 	mov	_SMB0DAT,dpl
                           000347  1983 	C$i2c.h$209$1$90 ==.
                                   1984 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:209: while(!SI);               //Wait until send is complete
      000347                       1985 00101$:
                           000347  1986 	C$i2c.h$210$1$90 ==.
                                   1987 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:210: SI = 0;                   //Clear SI
      000347 10 C3 02         [24] 1988 	jbc	_SI,00112$
      00034A 80 FB            [24] 1989 	sjmp	00101$
      00034C                       1990 00112$:
                           00034C  1991 	C$i2c.h$211$1$90 ==.
                           00034C  1992 	XG$i2c_write$0$0 ==.
      00034C 22               [24] 1993 	ret
                                   1994 ;------------------------------------------------------------
                                   1995 ;Allocation info for local variables in function 'i2c_write_and_stop'
                                   1996 ;------------------------------------------------------------
                                   1997 ;output_data               Allocated to registers 
                                   1998 ;------------------------------------------------------------
                           00034D  1999 	G$i2c_write_and_stop$0$0 ==.
                           00034D  2000 	C$i2c.h$214$1$90 ==.
                                   2001 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:214: void i2c_write_and_stop(unsigned char output_data)
                                   2002 ;	-----------------------------------------
                                   2003 ;	 function i2c_write_and_stop
                                   2004 ;	-----------------------------------------
      00034D                       2005 _i2c_write_and_stop:
      00034D 85 82 C2         [24] 2006 	mov	_SMB0DAT,dpl
                           000350  2007 	C$i2c.h$217$1$92 ==.
                                   2008 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:217: STO = 1;                  //Set stop bit
      000350 D2 C4            [12] 2009 	setb	_STO
                           000352  2010 	C$i2c.h$218$1$92 ==.
                                   2011 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:218: while(!SI);               //Wait until send is complete
      000352                       2012 00101$:
                           000352  2013 	C$i2c.h$219$1$92 ==.
                                   2014 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:219: SI = 0;                   //clear SI
      000352 10 C3 02         [24] 2015 	jbc	_SI,00112$
      000355 80 FB            [24] 2016 	sjmp	00101$
      000357                       2017 00112$:
                           000357  2018 	C$i2c.h$220$1$92 ==.
                           000357  2019 	XG$i2c_write_and_stop$0$0 ==.
      000357 22               [24] 2020 	ret
                                   2021 ;------------------------------------------------------------
                                   2022 ;Allocation info for local variables in function 'i2c_read'
                                   2023 ;------------------------------------------------------------
                                   2024 ;input_data                Allocated to registers 
                                   2025 ;------------------------------------------------------------
                           000358  2026 	G$i2c_read$0$0 ==.
                           000358  2027 	C$i2c.h$223$1$92 ==.
                                   2028 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:223: unsigned char i2c_read(void)
                                   2029 ;	-----------------------------------------
                                   2030 ;	 function i2c_read
                                   2031 ;	-----------------------------------------
      000358                       2032 _i2c_read:
                           000358  2033 	C$i2c.h$226$1$94 ==.
                                   2034 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:226: while(!SI);                //Wait until we have data to read
      000358                       2035 00101$:
      000358 30 C3 FD         [24] 2036 	jnb	_SI,00101$
                           00035B  2037 	C$i2c.h$227$1$94 ==.
                                   2038 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:227: input_data = SMB0DAT;      //Read the data
      00035B 85 C2 82         [24] 2039 	mov	dpl,_SMB0DAT
                           00035E  2040 	C$i2c.h$228$1$94 ==.
                                   2041 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:228: SI = 0;                    //Clear SI
      00035E C2 C3            [12] 2042 	clr	_SI
                           000360  2043 	C$i2c.h$229$1$94 ==.
                                   2044 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:229: return input_data;         //Return the read data
                           000360  2045 	C$i2c.h$230$1$94 ==.
                           000360  2046 	XG$i2c_read$0$0 ==.
      000360 22               [24] 2047 	ret
                                   2048 ;------------------------------------------------------------
                                   2049 ;Allocation info for local variables in function 'i2c_read_and_stop'
                                   2050 ;------------------------------------------------------------
                                   2051 ;input_data                Allocated to registers r7 
                                   2052 ;------------------------------------------------------------
                           000361  2053 	G$i2c_read_and_stop$0$0 ==.
                           000361  2054 	C$i2c.h$233$1$94 ==.
                                   2055 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:233: unsigned char i2c_read_and_stop(void)
                                   2056 ;	-----------------------------------------
                                   2057 ;	 function i2c_read_and_stop
                                   2058 ;	-----------------------------------------
      000361                       2059 _i2c_read_and_stop:
                           000361  2060 	C$i2c.h$236$1$96 ==.
                                   2061 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:236: while(!SI);                //Wait until we have data to read
      000361                       2062 00101$:
      000361 30 C3 FD         [24] 2063 	jnb	_SI,00101$
                           000364  2064 	C$i2c.h$237$1$96 ==.
                                   2065 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:237: input_data = SMB0DAT;      //Read the data
      000364 AF C2            [24] 2066 	mov	r7,_SMB0DAT
                           000366  2067 	C$i2c.h$238$1$96 ==.
                                   2068 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:238: SI = 0;                    //Clear SI
      000366 C2 C3            [12] 2069 	clr	_SI
                           000368  2070 	C$i2c.h$239$1$96 ==.
                                   2071 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:239: STO = 1;                   //Set stop bit
      000368 D2 C4            [12] 2072 	setb	_STO
                           00036A  2073 	C$i2c.h$240$1$96 ==.
                                   2074 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:240: while(!SI);                //Wait for stop
      00036A                       2075 00104$:
                           00036A  2076 	C$i2c.h$241$1$96 ==.
                                   2077 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:241: SI = 0;
      00036A 10 C3 02         [24] 2078 	jbc	_SI,00122$
      00036D 80 FB            [24] 2079 	sjmp	00104$
      00036F                       2080 00122$:
                           00036F  2081 	C$i2c.h$242$1$96 ==.
                                   2082 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:242: return input_data;         //Return the read data
      00036F 8F 82            [24] 2083 	mov	dpl,r7
                           000371  2084 	C$i2c.h$243$1$96 ==.
                           000371  2085 	XG$i2c_read_and_stop$0$0 ==.
      000371 22               [24] 2086 	ret
                                   2087 ;------------------------------------------------------------
                                   2088 ;Allocation info for local variables in function 'i2c_write_data'
                                   2089 ;------------------------------------------------------------
                                   2090 ;start_reg                 Allocated with name '_i2c_write_data_PARM_2'
                                   2091 ;buffer                    Allocated with name '_i2c_write_data_PARM_3'
                                   2092 ;num_bytes                 Allocated with name '_i2c_write_data_PARM_4'
                                   2093 ;addr                      Allocated to registers r7 
                                   2094 ;i                         Allocated to registers 
                                   2095 ;------------------------------------------------------------
                           000372  2096 	G$i2c_write_data$0$0 ==.
                           000372  2097 	C$i2c.h$246$1$96 ==.
                                   2098 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:246: void i2c_write_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2099 ;	-----------------------------------------
                                   2100 ;	 function i2c_write_data
                                   2101 ;	-----------------------------------------
      000372                       2102 _i2c_write_data:
      000372 AF 82            [24] 2103 	mov	r7,dpl
                           000374  2104 	C$i2c.h$250$1$98 ==.
                                   2105 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:250: i2c_start();               //initiate I2C transfer
      000374 C0 07            [24] 2106 	push	ar7
      000376 12r03r37         [24] 2107 	lcall	_i2c_start
      000379 D0 07            [24] 2108 	pop	ar7
                           00037B  2109 	C$i2c.h$251$1$98 ==.
                                   2110 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:251: i2c_write(addr & ~0x01);   //write the desired address to the bus
      00037B 74 FE            [12] 2111 	mov	a,#0xFE
      00037D 5F               [12] 2112 	anl	a,r7
      00037E F5 82            [12] 2113 	mov	dpl,a
      000380 12r03r44         [24] 2114 	lcall	_i2c_write
                           000383  2115 	C$i2c.h$252$1$98 ==.
                                   2116 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:252: i2c_write(start_reg);      //write the start register to the bus
      000383 85*05 82         [24] 2117 	mov	dpl,_i2c_write_data_PARM_2
      000386 12r03r44         [24] 2118 	lcall	_i2c_write
                           000389  2119 	C$i2c.h$253$1$98 ==.
                                   2120 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:253: for(i=0; i<num_bytes-1; i++) //write the data to the register(s)
      000389 7F 00            [12] 2121 	mov	r7,#0x00
      00038B                       2122 00103$:
      00038B AD*09            [24] 2123 	mov	r5,_i2c_write_data_PARM_4
      00038D 7E 00            [12] 2124 	mov	r6,#0x00
      00038F 1D               [12] 2125 	dec	r5
      000390 BD FF 01         [24] 2126 	cjne	r5,#0xFF,00114$
      000393 1E               [12] 2127 	dec	r6
      000394                       2128 00114$:
      000394 8F 03            [24] 2129 	mov	ar3,r7
      000396 7C 00            [12] 2130 	mov	r4,#0x00
      000398 C3               [12] 2131 	clr	c
      000399 EB               [12] 2132 	mov	a,r3
      00039A 9D               [12] 2133 	subb	a,r5
      00039B EC               [12] 2134 	mov	a,r4
      00039C 64 80            [12] 2135 	xrl	a,#0x80
      00039E 8E F0            [24] 2136 	mov	b,r6
      0003A0 63 F0 80         [24] 2137 	xrl	b,#0x80
      0003A3 95 F0            [12] 2138 	subb	a,b
      0003A5 50 1F            [24] 2139 	jnc	00101$
                           0003A7  2140 	C$i2c.h$254$1$98 ==.
                                   2141 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:254: i2c_write(buffer[i]);
      0003A7 EF               [12] 2142 	mov	a,r7
      0003A8 25*06            [12] 2143 	add	a,_i2c_write_data_PARM_3
      0003AA FC               [12] 2144 	mov	r4,a
      0003AB E4               [12] 2145 	clr	a
      0003AC 35*07            [12] 2146 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003AE FD               [12] 2147 	mov	r5,a
      0003AF AE*08            [24] 2148 	mov	r6,(_i2c_write_data_PARM_3 + 2)
      0003B1 8C 82            [24] 2149 	mov	dpl,r4
      0003B3 8D 83            [24] 2150 	mov	dph,r5
      0003B5 8E F0            [24] 2151 	mov	b,r6
      0003B7 12r00r00         [24] 2152 	lcall	__gptrget
      0003BA F5 82            [12] 2153 	mov	dpl,a
      0003BC C0 07            [24] 2154 	push	ar7
      0003BE 12r03r44         [24] 2155 	lcall	_i2c_write
      0003C1 D0 07            [24] 2156 	pop	ar7
                           0003C3  2157 	C$i2c.h$253$1$98 ==.
                                   2158 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:253: for(i=0; i<num_bytes-1; i++) //write the data to the register(s)
      0003C3 0F               [12] 2159 	inc	r7
      0003C4 80 C5            [24] 2160 	sjmp	00103$
      0003C6                       2161 00101$:
                           0003C6  2162 	C$i2c.h$255$1$98 ==.
                                   2163 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:255: i2c_write_and_stop(buffer[num_bytes-1]); //Stop transfer
      0003C6 AE*09            [24] 2164 	mov	r6,_i2c_write_data_PARM_4
      0003C8 7F 00            [12] 2165 	mov	r7,#0x00
      0003CA 1E               [12] 2166 	dec	r6
      0003CB BE FF 01         [24] 2167 	cjne	r6,#0xFF,00116$
      0003CE 1F               [12] 2168 	dec	r7
      0003CF                       2169 00116$:
      0003CF EE               [12] 2170 	mov	a,r6
      0003D0 25*06            [12] 2171 	add	a,_i2c_write_data_PARM_3
      0003D2 FE               [12] 2172 	mov	r6,a
      0003D3 EF               [12] 2173 	mov	a,r7
      0003D4 35*07            [12] 2174 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003D6 FF               [12] 2175 	mov	r7,a
      0003D7 AD*08            [24] 2176 	mov	r5,(_i2c_write_data_PARM_3 + 2)
      0003D9 8E 82            [24] 2177 	mov	dpl,r6
      0003DB 8F 83            [24] 2178 	mov	dph,r7
      0003DD 8D F0            [24] 2179 	mov	b,r5
      0003DF 12r00r00         [24] 2180 	lcall	__gptrget
      0003E2 F5 82            [12] 2181 	mov	dpl,a
      0003E4 12r03r4D         [24] 2182 	lcall	_i2c_write_and_stop
                           0003E7  2183 	C$i2c.h$256$1$98 ==.
                           0003E7  2184 	XG$i2c_write_data$0$0 ==.
      0003E7 22               [24] 2185 	ret
                                   2186 ;------------------------------------------------------------
                                   2187 ;Allocation info for local variables in function 'i2c_read_data'
                                   2188 ;------------------------------------------------------------
                                   2189 ;start_reg                 Allocated with name '_i2c_read_data_PARM_2'
                                   2190 ;buffer                    Allocated with name '_i2c_read_data_PARM_3'
                                   2191 ;num_bytes                 Allocated with name '_i2c_read_data_PARM_4'
                                   2192 ;addr                      Allocated to registers r7 
                                   2193 ;j                         Allocated to registers 
                                   2194 ;------------------------------------------------------------
                           0003E8  2195 	G$i2c_read_data$0$0 ==.
                           0003E8  2196 	C$i2c.h$259$1$98 ==.
                                   2197 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:259: void i2c_read_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2198 ;	-----------------------------------------
                                   2199 ;	 function i2c_read_data
                                   2200 ;	-----------------------------------------
      0003E8                       2201 _i2c_read_data:
      0003E8 AF 82            [24] 2202 	mov	r7,dpl
                           0003EA  2203 	C$i2c.h$262$1$100 ==.
                                   2204 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:262: i2c_start();               //Start I2C transfer
      0003EA C0 07            [24] 2205 	push	ar7
      0003EC 12r03r37         [24] 2206 	lcall	_i2c_start
      0003EF D0 07            [24] 2207 	pop	ar7
                           0003F1  2208 	C$i2c.h$263$1$100 ==.
                                   2209 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:263: i2c_write(addr & ~0x01);   //Write address of device that will be written to, send 0
      0003F1 8F 06            [24] 2210 	mov	ar6,r7
      0003F3 74 FE            [12] 2211 	mov	a,#0xFE
      0003F5 5E               [12] 2212 	anl	a,r6
      0003F6 F5 82            [12] 2213 	mov	dpl,a
      0003F8 C0 07            [24] 2214 	push	ar7
      0003FA 12r03r44         [24] 2215 	lcall	_i2c_write
                           0003FD  2216 	C$i2c.h$264$1$100 ==.
                                   2217 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:264: i2c_write_and_stop(start_reg); //Write & stop the 1st register to be read
      0003FD 85*0A 82         [24] 2218 	mov	dpl,_i2c_read_data_PARM_2
      000400 12r03r4D         [24] 2219 	lcall	_i2c_write_and_stop
                           000403  2220 	C$i2c.h$265$1$100 ==.
                                   2221 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:265: i2c_start();               //Start I2C transfer
      000403 12r03r37         [24] 2222 	lcall	_i2c_start
      000406 D0 07            [24] 2223 	pop	ar7
                           000408  2224 	C$i2c.h$266$1$100 ==.
                                   2225 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:266: i2c_write(addr | 0x01);    //Write address again, this time indicating a read operation
      000408 74 01            [12] 2226 	mov	a,#0x01
      00040A 4F               [12] 2227 	orl	a,r7
      00040B F5 82            [12] 2228 	mov	dpl,a
      00040D 12r03r44         [24] 2229 	lcall	_i2c_write
                           000410  2230 	C$i2c.h$267$1$100 ==.
                                   2231 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:267: for(j = 0; j < num_bytes - 1; j++)
      000410 7F 00            [12] 2232 	mov	r7,#0x00
      000412                       2233 00103$:
      000412 AD*0E            [24] 2234 	mov	r5,_i2c_read_data_PARM_4
      000414 7E 00            [12] 2235 	mov	r6,#0x00
      000416 1D               [12] 2236 	dec	r5
      000417 BD FF 01         [24] 2237 	cjne	r5,#0xFF,00114$
      00041A 1E               [12] 2238 	dec	r6
      00041B                       2239 00114$:
      00041B 8F 03            [24] 2240 	mov	ar3,r7
      00041D 7C 00            [12] 2241 	mov	r4,#0x00
      00041F C3               [12] 2242 	clr	c
      000420 EB               [12] 2243 	mov	a,r3
      000421 9D               [12] 2244 	subb	a,r5
      000422 EC               [12] 2245 	mov	a,r4
      000423 64 80            [12] 2246 	xrl	a,#0x80
      000425 8E F0            [24] 2247 	mov	b,r6
      000427 63 F0 80         [24] 2248 	xrl	b,#0x80
      00042A 95 F0            [12] 2249 	subb	a,b
      00042C 50 2E            [24] 2250 	jnc	00101$
                           00042E  2251 	C$i2c.h$269$2$101 ==.
                                   2252 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:269: AA = 1;                //Set acknowledge bit
      00042E D2 C2            [12] 2253 	setb	_AA
                           000430  2254 	C$i2c.h$270$2$101 ==.
                                   2255 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:270: buffer[j] = i2c_read();//Read data, save it in buffer
      000430 EF               [12] 2256 	mov	a,r7
      000431 25*0B            [12] 2257 	add	a,_i2c_read_data_PARM_3
      000433 FC               [12] 2258 	mov	r4,a
      000434 E4               [12] 2259 	clr	a
      000435 35*0C            [12] 2260 	addc	a,(_i2c_read_data_PARM_3 + 1)
      000437 FD               [12] 2261 	mov	r5,a
      000438 AE*0D            [24] 2262 	mov	r6,(_i2c_read_data_PARM_3 + 2)
      00043A C0 07            [24] 2263 	push	ar7
      00043C C0 06            [24] 2264 	push	ar6
      00043E C0 05            [24] 2265 	push	ar5
      000440 C0 04            [24] 2266 	push	ar4
      000442 12r03r58         [24] 2267 	lcall	_i2c_read
      000445 AB 82            [24] 2268 	mov	r3,dpl
      000447 D0 04            [24] 2269 	pop	ar4
      000449 D0 05            [24] 2270 	pop	ar5
      00044B D0 06            [24] 2271 	pop	ar6
      00044D D0 07            [24] 2272 	pop	ar7
      00044F 8C 82            [24] 2273 	mov	dpl,r4
      000451 8D 83            [24] 2274 	mov	dph,r5
      000453 8E F0            [24] 2275 	mov	b,r6
      000455 EB               [12] 2276 	mov	a,r3
      000456 12r00r00         [24] 2277 	lcall	__gptrput
                           000459  2278 	C$i2c.h$267$1$100 ==.
                                   2279 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:267: for(j = 0; j < num_bytes - 1; j++)
      000459 0F               [12] 2280 	inc	r7
      00045A 80 B6            [24] 2281 	sjmp	00103$
      00045C                       2282 00101$:
                           00045C  2283 	C$i2c.h$272$1$100 ==.
                                   2284 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:272: AA = 0;
      00045C C2 C2            [12] 2285 	clr	_AA
                           00045E  2286 	C$i2c.h$273$1$100 ==.
                                   2287 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:273: buffer[num_bytes - 1] = i2c_read_and_stop(); //Read the last byte and stop, save it in the buffer
      00045E AE*0E            [24] 2288 	mov	r6,_i2c_read_data_PARM_4
      000460 7F 00            [12] 2289 	mov	r7,#0x00
      000462 1E               [12] 2290 	dec	r6
      000463 BE FF 01         [24] 2291 	cjne	r6,#0xFF,00116$
      000466 1F               [12] 2292 	dec	r7
      000467                       2293 00116$:
      000467 EE               [12] 2294 	mov	a,r6
      000468 25*0B            [12] 2295 	add	a,_i2c_read_data_PARM_3
      00046A FE               [12] 2296 	mov	r6,a
      00046B EF               [12] 2297 	mov	a,r7
      00046C 35*0C            [12] 2298 	addc	a,(_i2c_read_data_PARM_3 + 1)
      00046E FF               [12] 2299 	mov	r7,a
      00046F AD*0D            [24] 2300 	mov	r5,(_i2c_read_data_PARM_3 + 2)
      000471 C0 07            [24] 2301 	push	ar7
      000473 C0 06            [24] 2302 	push	ar6
      000475 C0 05            [24] 2303 	push	ar5
      000477 12r03r61         [24] 2304 	lcall	_i2c_read_and_stop
      00047A AC 82            [24] 2305 	mov	r4,dpl
      00047C D0 05            [24] 2306 	pop	ar5
      00047E D0 06            [24] 2307 	pop	ar6
      000480 D0 07            [24] 2308 	pop	ar7
      000482 8E 82            [24] 2309 	mov	dpl,r6
      000484 8F 83            [24] 2310 	mov	dph,r7
      000486 8D F0            [24] 2311 	mov	b,r5
      000488 EC               [12] 2312 	mov	a,r4
      000489 12r00r00         [24] 2313 	lcall	__gptrput
                           00048C  2314 	C$i2c.h$274$1$100 ==.
                           00048C  2315 	XG$i2c_read_data$0$0 ==.
      00048C 22               [24] 2316 	ret
                                   2317 ;------------------------------------------------------------
                                   2318 ;Allocation info for local variables in function 'Accel_Init'
                                   2319 ;------------------------------------------------------------
                                   2320 ;Data2                     Allocated with name '_Accel_Init_Data2_1_103'
                                   2321 ;------------------------------------------------------------
                           00048D  2322 	G$Accel_Init$0$0 ==.
                           00048D  2323 	C$i2c.h$283$1$100 ==.
                                   2324 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:283: void Accel_Init(void)
                                   2325 ;	-----------------------------------------
                                   2326 ;	 function Accel_Init
                                   2327 ;	-----------------------------------------
      00048D                       2328 _Accel_Init:
                           00048D  2329 	C$i2c.h$287$1$103 ==.
                                   2330 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:287: Data2[0]=0x23;	//normal power mode, 50Hz ODR, y & x axes enabled
      00048D 75*0F 23         [24] 2331 	mov	_Accel_Init_Data2_1_103,#0x23
                           000490  2332 	C$i2c.h$289$1$103 ==.
                                   2333 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:289: i2c_write_data(addr_accel, 0x20, Data2, 1);
      000490 75*06r0F         [24] 2334 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      000493 75*07 00         [24] 2335 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      000496 75*08 40         [24] 2336 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      000499 75*05 20         [24] 2337 	mov	_i2c_write_data_PARM_2,#0x20
      00049C 75*09 01         [24] 2338 	mov	_i2c_write_data_PARM_4,#0x01
      00049F 75 82 30         [24] 2339 	mov	dpl,#0x30
      0004A2 12r03r72         [24] 2340 	lcall	_i2c_write_data
                           0004A5  2341 	C$i2c.h$290$1$103 ==.
                                   2342 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:290: Data2[0]=0x00;	//Default - no filtering
      0004A5 75*0F 00         [24] 2343 	mov	_Accel_Init_Data2_1_103,#0x00
                           0004A8  2344 	C$i2c.h$292$1$103 ==.
                                   2345 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:292: i2c_write_data(addr_accel, 0x21, Data2, 1);
      0004A8 75*06r0F         [24] 2346 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      0004AB 75*07 00         [24] 2347 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004AE 75*08 40         [24] 2348 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004B1 75*05 21         [24] 2349 	mov	_i2c_write_data_PARM_2,#0x21
      0004B4 75*09 01         [24] 2350 	mov	_i2c_write_data_PARM_4,#0x01
      0004B7 75 82 30         [24] 2351 	mov	dpl,#0x30
      0004BA 12r03r72         [24] 2352 	lcall	_i2c_write_data
                           0004BD  2353 	C$i2c.h$293$1$103 ==.
                                   2354 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:293: Data2[0]=0x00;	//default - no interrupts enabled
      0004BD 75*0F 00         [24] 2355 	mov	_Accel_Init_Data2_1_103,#0x00
                           0004C0  2356 	C$i2c.h$294$1$103 ==.
                                   2357 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:294: i2c_write_data(addr_accel, 0x22, Data2, 1);
      0004C0 75*06r0F         [24] 2358 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      0004C3 75*07 00         [24] 2359 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004C6 75*08 40         [24] 2360 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004C9 75*05 22         [24] 2361 	mov	_i2c_write_data_PARM_2,#0x22
      0004CC 75*09 01         [24] 2362 	mov	_i2c_write_data_PARM_4,#0x01
      0004CF 75 82 30         [24] 2363 	mov	dpl,#0x30
      0004D2 12r03r72         [24] 2364 	lcall	_i2c_write_data
                           0004D5  2365 	C$i2c.h$298$1$103 ==.
                           0004D5  2366 	XG$Accel_Init$0$0 ==.
      0004D5 22               [24] 2367 	ret
                                   2368 ;------------------------------------------------------------
                                   2369 ;Allocation info for local variables in function 'main'
                                   2370 ;------------------------------------------------------------
                                   2371 ;input                     Allocated to registers 
                                   2372 ;desiredHeading            Allocated to registers 
                                   2373 ;range                     Allocated to registers 
                                   2374 ;heading                   Allocated to registers 
                                   2375 ;battery                   Allocated to registers 
                                   2376 ;index                     Allocated to registers r6 r7 
                                   2377 ;sum_x                     Allocated to registers r4 r5 
                                   2378 ;sum_y                     Allocated to registers r2 r3 
                                   2379 ;counter                   Allocated with name '_main_counter_1_116'
                                   2380 ;------------------------------------------------------------
                           0004D6  2381 	G$main$0$0 ==.
                           0004D6  2382 	C$5Code.c$58$1$103 ==.
                                   2383 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:58: void main(void)
                                   2384 ;	-----------------------------------------
                                   2385 ;	 function main
                                   2386 ;	-----------------------------------------
      0004D6                       2387 _main:
                           0004D6  2388 	C$5Code.c$65$1$103 ==.
                                   2389 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:65: unsigned int index = 1;
      0004D6 7E 01            [12] 2390 	mov	r6,#0x01
                           0004D8  2391 	C$5Code.c$67$1$103 ==.
                                   2392 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:67: int sum_x = 0;
                           0004D8  2393 	C$5Code.c$68$1$103 ==.
                                   2394 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:68: int sum_y = 0;
                           0004D8  2395 	C$5Code.c$69$1$103 ==.
                                   2396 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:69: unsigned int counter = 0;
      0004D8 E4               [12] 2397 	clr	a
      0004D9 FF               [12] 2398 	mov	r7,a
      0004DA FC               [12] 2399 	mov	r4,a
      0004DB FD               [12] 2400 	mov	r5,a
      0004DC FA               [12] 2401 	mov	r2,a
      0004DD FB               [12] 2402 	mov	r3,a
      0004DE F5*30            [12] 2403 	mov	_main_counter_1_116,a
      0004E0 F5*31            [12] 2404 	mov	(_main_counter_1_116 + 1),a
                           0004E2  2405 	C$5Code.c$71$1$116 ==.
                                   2406 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:71: Sys_Init();
      0004E2 C0 07            [24] 2407 	push	ar7
      0004E4 C0 06            [24] 2408 	push	ar6
      0004E6 C0 05            [24] 2409 	push	ar5
      0004E8 C0 04            [24] 2410 	push	ar4
      0004EA C0 03            [24] 2411 	push	ar3
      0004EC C0 02            [24] 2412 	push	ar2
      0004EE 12r00r30         [24] 2413 	lcall	_Sys_Init
                           0004F1  2414 	C$5Code.c$72$1$116 ==.
                                   2415 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:72: putchar(' '); //the quotes in this line may not format correctly
      0004F1 75 82 20         [24] 2416 	mov	dpl,#0x20
      0004F4 12r00r43         [24] 2417 	lcall	_putchar
                           0004F7  2418 	C$5Code.c$73$1$116 ==.
                                   2419 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:73: Port_Init();
      0004F7 12r0Cr3C         [24] 2420 	lcall	_Port_Init
                           0004FA  2421 	C$5Code.c$74$1$116 ==.
                                   2422 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:74: XBR0_Init();
      0004FA 12r0Cr67         [24] 2423 	lcall	_XBR0_Init
                           0004FD  2424 	C$5Code.c$75$1$116 ==.
                                   2425 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:75: PCA_Init();
      0004FD 12r0Cr6B         [24] 2426 	lcall	_PCA_Init
                           000500  2427 	C$5Code.c$76$1$116 ==.
                                   2428 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:76: SMB0_Init();
      000500 12r0CrAF         [24] 2429 	lcall	_SMB0_Init
                           000503  2430 	C$5Code.c$77$1$116 ==.
                                   2431 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:77: ADC_Init();
      000503 12r0Cr5A         [24] 2432 	lcall	_ADC_Init
                           000506  2433 	C$5Code.c$78$1$116 ==.
                                   2434 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:78: Accel_Init();
      000506 12r04r8D         [24] 2435 	lcall	_Accel_Init
                           000509  2436 	C$5Code.c$81$1$116 ==.
                                   2437 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:81: ks = getDesiredGainSteering();
      000509 12r0Br2E         [24] 2438 	lcall	_getDesiredGainSteering
      00050C 85 82*28         [24] 2439 	mov	_ks,dpl
      00050F 85 83*29         [24] 2440 	mov	(_ks + 1),dph
                           000512  2441 	C$5Code.c$82$1$116 ==.
                                   2442 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:82: kd_x = getDesiredGainDriveMotorX();
      000512 12r0Br88         [24] 2443 	lcall	_getDesiredGainDriveMotorX
      000515 85 82*2A         [24] 2444 	mov	_kd_x,dpl
      000518 85 83*2B         [24] 2445 	mov	(_kd_x + 1),dph
                           00051B  2446 	C$5Code.c$83$1$116 ==.
                                   2447 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:83: kd_y = getDesiredGainDriveMotorY();
      00051B 12r0BrE2         [24] 2448 	lcall	_getDesiredGainDriveMotorY
      00051E 85 82*2C         [24] 2449 	mov	_kd_y,dpl
      000521 85 83*2D         [24] 2450 	mov	(_kd_y + 1),dph
                           000524  2451 	C$5Code.c$86$1$116 ==.
                                   2452 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:86: lcd_clear();
      000524 12r00rE1         [24] 2453 	lcall	_lcd_clear
                           000527  2454 	C$5Code.c$87$1$116 ==.
                                   2455 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:87: lcd_print(" Put car on level   ");
      000527 74r29            [12] 2456 	mov	a,#___str_3
      000529 C0 E0            [24] 2457 	push	acc
      00052B 74s00            [12] 2458 	mov	a,#(___str_3 >> 8)
      00052D C0 E0            [24] 2459 	push	acc
      00052F 74 80            [12] 2460 	mov	a,#0x80
      000531 C0 E0            [24] 2461 	push	acc
      000533 12r00r5C         [24] 2462 	lcall	_lcd_print
      000536 15 81            [12] 2463 	dec	sp
      000538 15 81            [12] 2464 	dec	sp
      00053A 15 81            [12] 2465 	dec	sp
                           00053C  2466 	C$5Code.c$88$1$116 ==.
                                   2467 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:88: lcd_print(" surface and press  ");
      00053C 74r3E            [12] 2468 	mov	a,#___str_4
      00053E C0 E0            [24] 2469 	push	acc
      000540 74s00            [12] 2470 	mov	a,#(___str_4 >> 8)
      000542 C0 E0            [24] 2471 	push	acc
      000544 74 80            [12] 2472 	mov	a,#0x80
      000546 C0 E0            [24] 2473 	push	acc
      000548 12r00r5C         [24] 2474 	lcall	_lcd_print
      00054B 15 81            [12] 2475 	dec	sp
      00054D 15 81            [12] 2476 	dec	sp
      00054F 15 81            [12] 2477 	dec	sp
                           000551  2478 	C$5Code.c$89$1$116 ==.
                                   2479 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:89: lcd_print(" pound (#)          ");
      000551 74r53            [12] 2480 	mov	a,#___str_5
      000553 C0 E0            [24] 2481 	push	acc
      000555 74s00            [12] 2482 	mov	a,#(___str_5 >> 8)
      000557 C0 E0            [24] 2483 	push	acc
      000559 74 80            [12] 2484 	mov	a,#0x80
      00055B C0 E0            [24] 2485 	push	acc
      00055D 12r00r5C         [24] 2486 	lcall	_lcd_print
      000560 15 81            [12] 2487 	dec	sp
      000562 15 81            [12] 2488 	dec	sp
      000564 15 81            [12] 2489 	dec	sp
      000566 D0 02            [24] 2490 	pop	ar2
      000568 D0 03            [24] 2491 	pop	ar3
      00056A D0 04            [24] 2492 	pop	ar4
      00056C D0 05            [24] 2493 	pop	ar5
      00056E D0 06            [24] 2494 	pop	ar6
      000570 D0 07            [24] 2495 	pop	ar7
                           000572  2496 	C$5Code.c$91$1$116 ==.
                                   2497 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:91: while(getIndividualPress() != 35);
      000572                       2498 00101$:
      000572 C0 07            [24] 2499 	push	ar7
      000574 C0 06            [24] 2500 	push	ar6
      000576 C0 05            [24] 2501 	push	ar5
      000578 C0 04            [24] 2502 	push	ar4
      00057A C0 03            [24] 2503 	push	ar3
      00057C C0 02            [24] 2504 	push	ar2
      00057E 12r0Ar71         [24] 2505 	lcall	_getIndividualPress
      000581 A9 82            [24] 2506 	mov	r1,dpl
      000583 D0 02            [24] 2507 	pop	ar2
      000585 D0 03            [24] 2508 	pop	ar3
      000587 D0 04            [24] 2509 	pop	ar4
      000589 D0 05            [24] 2510 	pop	ar5
      00058B D0 06            [24] 2511 	pop	ar6
      00058D D0 07            [24] 2512 	pop	ar7
      00058F B9 23 E0         [24] 2513 	cjne	r1,#0x23,00101$
                           000592  2514 	C$5Code.c$93$3$118 ==.
                                   2515 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:93: while(counts < 250)
      000592 A8*30            [24] 2516 	mov	r0,_main_counter_1_116
      000594 A9*31            [24] 2517 	mov	r1,(_main_counter_1_116 + 1)
      000596                       2518 00115$:
      000596 C3               [12] 2519 	clr	c
      000597 E5*1E            [12] 2520 	mov	a,_counts
      000599 94 FA            [12] 2521 	subb	a,#0xFA
      00059B E5*1F            [12] 2522 	mov	a,(_counts + 1)
      00059D 94 00            [12] 2523 	subb	a,#0x00
      00059F 40 03            [24] 2524 	jc	00170$
      0005A1 02r07r2C         [24] 2525 	ljmp	00141$
      0005A4                       2526 00170$:
                           0005A4  2527 	C$5Code.c$95$1$116 ==.
                                   2528 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:95: if(counts % 20 == 0)
      0005A4 75*00 14         [24] 2529 	mov	__moduint_PARM_2,#0x14
      0005A7 75*01 00         [24] 2530 	mov	(__moduint_PARM_2 + 1),#0x00
      0005AA 85*1E 82         [24] 2531 	mov	dpl,_counts
      0005AD 85*1F 83         [24] 2532 	mov	dph,(_counts + 1)
      0005B0 C0 07            [24] 2533 	push	ar7
      0005B2 C0 06            [24] 2534 	push	ar6
      0005B4 C0 05            [24] 2535 	push	ar5
      0005B6 C0 04            [24] 2536 	push	ar4
      0005B8 C0 03            [24] 2537 	push	ar3
      0005BA C0 02            [24] 2538 	push	ar2
      0005BC C0 01            [24] 2539 	push	ar1
      0005BE C0 00            [24] 2540 	push	ar0
      0005C0 12r00r00         [24] 2541 	lcall	__moduint
      0005C3 E5 82            [12] 2542 	mov	a,dpl
      0005C5 85 83 F0         [24] 2543 	mov	b,dph
      0005C8 D0 00            [24] 2544 	pop	ar0
      0005CA D0 01            [24] 2545 	pop	ar1
      0005CC D0 02            [24] 2546 	pop	ar2
      0005CE D0 03            [24] 2547 	pop	ar3
      0005D0 D0 04            [24] 2548 	pop	ar4
      0005D2 D0 05            [24] 2549 	pop	ar5
      0005D4 D0 06            [24] 2550 	pop	ar6
      0005D6 D0 07            [24] 2551 	pop	ar7
      0005D8 45 F0            [12] 2552 	orl	a,b
      0005DA 70 BA            [24] 2553 	jnz	00115$
                           0005DC  2554 	C$5Code.c$97$3$118 ==.
                                   2555 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:97: lcd_clear();
      0005DC C0 07            [24] 2556 	push	ar7
      0005DE C0 06            [24] 2557 	push	ar6
      0005E0 C0 05            [24] 2558 	push	ar5
      0005E2 C0 04            [24] 2559 	push	ar4
      0005E4 C0 03            [24] 2560 	push	ar3
      0005E6 C0 02            [24] 2561 	push	ar2
      0005E8 C0 01            [24] 2562 	push	ar1
      0005EA C0 00            [24] 2563 	push	ar0
      0005EC 12r00rE1         [24] 2564 	lcall	_lcd_clear
                           0005EF  2565 	C$5Code.c$98$3$118 ==.
                                   2566 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:98: lcd_print("                    ");
      0005EF 74r68            [12] 2567 	mov	a,#___str_6
      0005F1 C0 E0            [24] 2568 	push	acc
      0005F3 74s00            [12] 2569 	mov	a,#(___str_6 >> 8)
      0005F5 C0 E0            [24] 2570 	push	acc
      0005F7 74 80            [12] 2571 	mov	a,#0x80
      0005F9 C0 E0            [24] 2572 	push	acc
      0005FB 12r00r5C         [24] 2573 	lcall	_lcd_print
      0005FE 15 81            [12] 2574 	dec	sp
      000600 15 81            [12] 2575 	dec	sp
      000602 15 81            [12] 2576 	dec	sp
      000604 D0 00            [24] 2577 	pop	ar0
      000606 D0 01            [24] 2578 	pop	ar1
      000608 D0 02            [24] 2579 	pop	ar2
      00060A D0 03            [24] 2580 	pop	ar3
      00060C D0 04            [24] 2581 	pop	ar4
      00060E D0 05            [24] 2582 	pop	ar5
      000610 D0 06            [24] 2583 	pop	ar6
      000612 D0 07            [24] 2584 	pop	ar7
                           000614  2585 	C$5Code.c$100$3$118 ==.
                                   2586 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:100: if(index == 1)
      000614 BE 01 37         [24] 2587 	cjne	r6,#0x01,00111$
      000617 BF 00 34         [24] 2588 	cjne	r7,#0x00,00111$
                           00061A  2589 	C$5Code.c$102$4$119 ==.
                                   2590 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:102: lcd_print(" Reading accel      ");
      00061A C0 05            [24] 2591 	push	ar5
      00061C C0 04            [24] 2592 	push	ar4
      00061E C0 03            [24] 2593 	push	ar3
      000620 C0 02            [24] 2594 	push	ar2
      000622 C0 01            [24] 2595 	push	ar1
      000624 C0 00            [24] 2596 	push	ar0
      000626 74r7D            [12] 2597 	mov	a,#___str_7
      000628 C0 E0            [24] 2598 	push	acc
      00062A 74s00            [12] 2599 	mov	a,#(___str_7 >> 8)
      00062C C0 E0            [24] 2600 	push	acc
      00062E 74 80            [12] 2601 	mov	a,#0x80
      000630 C0 E0            [24] 2602 	push	acc
      000632 12r00r5C         [24] 2603 	lcall	_lcd_print
      000635 15 81            [12] 2604 	dec	sp
      000637 15 81            [12] 2605 	dec	sp
      000639 15 81            [12] 2606 	dec	sp
      00063B D0 00            [24] 2607 	pop	ar0
      00063D D0 01            [24] 2608 	pop	ar1
      00063F D0 02            [24] 2609 	pop	ar2
      000641 D0 03            [24] 2610 	pop	ar3
      000643 D0 04            [24] 2611 	pop	ar4
      000645 D0 05            [24] 2612 	pop	ar5
                           000647  2613 	C$5Code.c$103$4$119 ==.
                                   2614 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:103: index = 2;
      000647 7E 02            [12] 2615 	mov	r6,#0x02
      000649 7F 00            [12] 2616 	mov	r7,#0x00
      00064B 02r06rF1         [24] 2617 	ljmp	00112$
      00064E                       2618 00111$:
                           00064E  2619 	C$5Code.c$105$3$118 ==.
                                   2620 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:105: else if(index == 2)
      00064E BE 02 36         [24] 2621 	cjne	r6,#0x02,00108$
      000651 BF 00 33         [24] 2622 	cjne	r7,#0x00,00108$
                           000654  2623 	C$5Code.c$107$4$120 ==.
                                   2624 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:107: lcd_print(" Reading accel.     ");
      000654 C0 05            [24] 2625 	push	ar5
      000656 C0 04            [24] 2626 	push	ar4
      000658 C0 03            [24] 2627 	push	ar3
      00065A C0 02            [24] 2628 	push	ar2
      00065C C0 01            [24] 2629 	push	ar1
      00065E C0 00            [24] 2630 	push	ar0
      000660 74r92            [12] 2631 	mov	a,#___str_8
      000662 C0 E0            [24] 2632 	push	acc
      000664 74s00            [12] 2633 	mov	a,#(___str_8 >> 8)
      000666 C0 E0            [24] 2634 	push	acc
      000668 74 80            [12] 2635 	mov	a,#0x80
      00066A C0 E0            [24] 2636 	push	acc
      00066C 12r00r5C         [24] 2637 	lcall	_lcd_print
      00066F 15 81            [12] 2638 	dec	sp
      000671 15 81            [12] 2639 	dec	sp
      000673 15 81            [12] 2640 	dec	sp
      000675 D0 00            [24] 2641 	pop	ar0
      000677 D0 01            [24] 2642 	pop	ar1
      000679 D0 02            [24] 2643 	pop	ar2
      00067B D0 03            [24] 2644 	pop	ar3
      00067D D0 04            [24] 2645 	pop	ar4
      00067F D0 05            [24] 2646 	pop	ar5
                           000681  2647 	C$5Code.c$108$4$120 ==.
                                   2648 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:108: index = 3;
      000681 7E 03            [12] 2649 	mov	r6,#0x03
      000683 7F 00            [12] 2650 	mov	r7,#0x00
      000685 80 6A            [24] 2651 	sjmp	00112$
      000687                       2652 00108$:
                           000687  2653 	C$5Code.c$110$3$118 ==.
                                   2654 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:110: else if(index == 3)
      000687 BE 03 36         [24] 2655 	cjne	r6,#0x03,00105$
      00068A BF 00 33         [24] 2656 	cjne	r7,#0x00,00105$
                           00068D  2657 	C$5Code.c$112$4$121 ==.
                                   2658 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:112: lcd_print(" Reading accel..    ");
      00068D C0 05            [24] 2659 	push	ar5
      00068F C0 04            [24] 2660 	push	ar4
      000691 C0 03            [24] 2661 	push	ar3
      000693 C0 02            [24] 2662 	push	ar2
      000695 C0 01            [24] 2663 	push	ar1
      000697 C0 00            [24] 2664 	push	ar0
      000699 74rA7            [12] 2665 	mov	a,#___str_9
      00069B C0 E0            [24] 2666 	push	acc
      00069D 74s00            [12] 2667 	mov	a,#(___str_9 >> 8)
      00069F C0 E0            [24] 2668 	push	acc
      0006A1 74 80            [12] 2669 	mov	a,#0x80
      0006A3 C0 E0            [24] 2670 	push	acc
      0006A5 12r00r5C         [24] 2671 	lcall	_lcd_print
      0006A8 15 81            [12] 2672 	dec	sp
      0006AA 15 81            [12] 2673 	dec	sp
      0006AC 15 81            [12] 2674 	dec	sp
      0006AE D0 00            [24] 2675 	pop	ar0
      0006B0 D0 01            [24] 2676 	pop	ar1
      0006B2 D0 02            [24] 2677 	pop	ar2
      0006B4 D0 03            [24] 2678 	pop	ar3
      0006B6 D0 04            [24] 2679 	pop	ar4
      0006B8 D0 05            [24] 2680 	pop	ar5
                           0006BA  2681 	C$5Code.c$113$4$121 ==.
                                   2682 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:113: index = 4;
      0006BA 7E 04            [12] 2683 	mov	r6,#0x04
      0006BC 7F 00            [12] 2684 	mov	r7,#0x00
      0006BE 80 31            [24] 2685 	sjmp	00112$
      0006C0                       2686 00105$:
                           0006C0  2687 	C$5Code.c$117$4$122 ==.
                                   2688 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:117: lcd_print(" Reading accel...   ");
      0006C0 C0 05            [24] 2689 	push	ar5
      0006C2 C0 04            [24] 2690 	push	ar4
      0006C4 C0 03            [24] 2691 	push	ar3
      0006C6 C0 02            [24] 2692 	push	ar2
      0006C8 C0 01            [24] 2693 	push	ar1
      0006CA C0 00            [24] 2694 	push	ar0
      0006CC 74rBC            [12] 2695 	mov	a,#___str_10
      0006CE C0 E0            [24] 2696 	push	acc
      0006D0 74s00            [12] 2697 	mov	a,#(___str_10 >> 8)
      0006D2 C0 E0            [24] 2698 	push	acc
      0006D4 74 80            [12] 2699 	mov	a,#0x80
      0006D6 C0 E0            [24] 2700 	push	acc
      0006D8 12r00r5C         [24] 2701 	lcall	_lcd_print
      0006DB 15 81            [12] 2702 	dec	sp
      0006DD 15 81            [12] 2703 	dec	sp
      0006DF 15 81            [12] 2704 	dec	sp
      0006E1 D0 00            [24] 2705 	pop	ar0
      0006E3 D0 01            [24] 2706 	pop	ar1
      0006E5 D0 02            [24] 2707 	pop	ar2
      0006E7 D0 03            [24] 2708 	pop	ar3
      0006E9 D0 04            [24] 2709 	pop	ar4
      0006EB D0 05            [24] 2710 	pop	ar5
                           0006ED  2711 	C$5Code.c$118$4$122 ==.
                                   2712 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:118: index = 1;
      0006ED 7E 01            [12] 2713 	mov	r6,#0x01
      0006EF 7F 00            [12] 2714 	mov	r7,#0x00
      0006F1                       2715 00112$:
                           0006F1  2716 	C$5Code.c$121$3$118 ==.
                                   2717 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:121: ReadAccel();
      0006F1 C0 07            [24] 2718 	push	ar7
      0006F3 C0 06            [24] 2719 	push	ar6
      0006F5 C0 05            [24] 2720 	push	ar5
      0006F7 C0 04            [24] 2721 	push	ar4
      0006F9 C0 03            [24] 2722 	push	ar3
      0006FB C0 02            [24] 2723 	push	ar2
      0006FD C0 01            [24] 2724 	push	ar1
      0006FF C0 00            [24] 2725 	push	ar0
      000701 12r08r50         [24] 2726 	lcall	_ReadAccel
      000704 D0 00            [24] 2727 	pop	ar0
      000706 D0 01            [24] 2728 	pop	ar1
      000708 D0 02            [24] 2729 	pop	ar2
      00070A D0 03            [24] 2730 	pop	ar3
      00070C D0 04            [24] 2731 	pop	ar4
      00070E D0 05            [24] 2732 	pop	ar5
      000710 D0 06            [24] 2733 	pop	ar6
      000712 D0 07            [24] 2734 	pop	ar7
                           000714  2735 	C$5Code.c$122$3$118 ==.
                                   2736 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:122: sum_x += gx;
      000714 E5*16            [12] 2737 	mov	a,_gx
      000716 2C               [12] 2738 	add	a,r4
      000717 FC               [12] 2739 	mov	r4,a
      000718 E5*17            [12] 2740 	mov	a,(_gx + 1)
      00071A 3D               [12] 2741 	addc	a,r5
      00071B FD               [12] 2742 	mov	r5,a
                           00071C  2743 	C$5Code.c$123$3$118 ==.
                                   2744 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:123: sum_y += gy; 
      00071C E5*18            [12] 2745 	mov	a,_gy
      00071E 2A               [12] 2746 	add	a,r2
      00071F FA               [12] 2747 	mov	r2,a
      000720 E5*19            [12] 2748 	mov	a,(_gy + 1)
      000722 3B               [12] 2749 	addc	a,r3
      000723 FB               [12] 2750 	mov	r3,a
                           000724  2751 	C$5Code.c$124$3$118 ==.
                                   2752 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:124: counter++;
      000724 08               [12] 2753 	inc	r0
      000725 B8 00 01         [24] 2754 	cjne	r0,#0x00,00178$
      000728 09               [12] 2755 	inc	r1
      000729                       2756 00178$:
      000729 02r05r96         [24] 2757 	ljmp	00115$
      00072C                       2758 00141$:
      00072C 88*30            [24] 2759 	mov	_main_counter_1_116,r0
      00072E 89*31            [24] 2760 	mov	(_main_counter_1_116 + 1),r1
                           000730  2761 	C$5Code.c$128$1$116 ==.
                                   2762 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:128: x0 = (sum_x / counter);
      000730 8C 82            [24] 2763 	mov	dpl,r4
      000732 8D 83            [24] 2764 	mov	dph,r5
      000734 85*30*00         [24] 2765 	mov	__divuint_PARM_2,_main_counter_1_116
      000737 85*31*01         [24] 2766 	mov	(__divuint_PARM_2 + 1),(_main_counter_1_116 + 1)
      00073A C0 03            [24] 2767 	push	ar3
      00073C C0 02            [24] 2768 	push	ar2
      00073E 12r00r00         [24] 2769 	lcall	__divuint
      000741 85 82*1A         [24] 2770 	mov	_x0,dpl
      000744 85 83*1B         [24] 2771 	mov	(_x0 + 1),dph
      000747 D0 02            [24] 2772 	pop	ar2
      000749 D0 03            [24] 2773 	pop	ar3
                           00074B  2774 	C$5Code.c$129$1$116 ==.
                                   2775 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:129: y0 = (sum_y / counter);
      00074B 8A 82            [24] 2776 	mov	dpl,r2
      00074D 8B 83            [24] 2777 	mov	dph,r3
      00074F 85*30*00         [24] 2778 	mov	__divuint_PARM_2,_main_counter_1_116
      000752 85*31*01         [24] 2779 	mov	(__divuint_PARM_2 + 1),(_main_counter_1_116 + 1)
      000755 12r00r00         [24] 2780 	lcall	__divuint
      000758 85 82*1C         [24] 2781 	mov	_y0,dpl
      00075B 85 83*1D         [24] 2782 	mov	(_y0 + 1),dph
                           00075E  2783 	C$5Code.c$131$1$116 ==.
                                   2784 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:131: printf("y0: %d\n\r", y0);
      00075E C0*1C            [24] 2785 	push	_y0
      000760 C0*1D            [24] 2786 	push	(_y0 + 1)
      000762 74rD1            [12] 2787 	mov	a,#___str_11
      000764 C0 E0            [24] 2788 	push	acc
      000766 74s00            [12] 2789 	mov	a,#(___str_11 >> 8)
      000768 C0 E0            [24] 2790 	push	acc
      00076A 74 80            [12] 2791 	mov	a,#0x80
      00076C C0 E0            [24] 2792 	push	acc
      00076E 12r00r00         [24] 2793 	lcall	_printf
      000771 E5 81            [12] 2794 	mov	a,sp
      000773 24 FB            [12] 2795 	add	a,#0xfb
      000775 F5 81            [12] 2796 	mov	sp,a
                           000777  2797 	C$5Code.c$132$1$116 ==.
                                   2798 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:132: printf("x0: %d\n\r", x0);
      000777 C0*1A            [24] 2799 	push	_x0
      000779 C0*1B            [24] 2800 	push	(_x0 + 1)
      00077B 74rDA            [12] 2801 	mov	a,#___str_12
      00077D C0 E0            [24] 2802 	push	acc
      00077F 74s00            [12] 2803 	mov	a,#(___str_12 >> 8)
      000781 C0 E0            [24] 2804 	push	acc
      000783 74 80            [12] 2805 	mov	a,#0x80
      000785 C0 E0            [24] 2806 	push	acc
      000787 12r00r00         [24] 2807 	lcall	_printf
      00078A E5 81            [12] 2808 	mov	a,sp
      00078C 24 FB            [12] 2809 	add	a,#0xfb
      00078E F5 81            [12] 2810 	mov	sp,a
                           000790  2811 	C$5Code.c$134$1$116 ==.
                                   2812 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:134: counts = 0;
      000790 E4               [12] 2813 	clr	a
      000791 F5*1E            [12] 2814 	mov	_counts,a
      000793 F5*1F            [12] 2815 	mov	(_counts + 1),a
                           000795  2816 	C$5Code.c$135$1$116 ==.
                                   2817 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:135: PCA0CP2 = 0xFFFF - PW_NEUT;
      000795 14               [12] 2818 	dec	a
      000796 C3               [12] 2819 	clr	c
      000797 95*10            [12] 2820 	subb	a,_PW_NEUT
      000799 F5 EC            [12] 2821 	mov	((_PCA0CP2 >> 0) & 0xFF),a
      00079B 74 FF            [12] 2822 	mov	a,#0xFF
      00079D 95*11            [12] 2823 	subb	a,(_PW_NEUT + 1)
      00079F F5 FC            [12] 2824 	mov	((_PCA0CP2 >> 8) & 0xFF),a
                           0007A1  2825 	C$5Code.c$136$1$116 ==.
                                   2826 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:136: while(counts < 2);
      0007A1                       2827 00118$:
      0007A1 C3               [12] 2828 	clr	c
      0007A2 E5*1E            [12] 2829 	mov	a,_counts
      0007A4 94 02            [12] 2830 	subb	a,#0x02
      0007A6 E5*1F            [12] 2831 	mov	a,(_counts + 1)
      0007A8 94 00            [12] 2832 	subb	a,#0x00
      0007AA 40 F5            [24] 2833 	jc	00118$
                           0007AC  2834 	C$5Code.c$138$1$116 ==.
                                   2835 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:138: printf("%5d-x0\n\r",x0);
      0007AC C0*1A            [24] 2836 	push	_x0
      0007AE C0*1B            [24] 2837 	push	(_x0 + 1)
      0007B0 74rE3            [12] 2838 	mov	a,#___str_13
      0007B2 C0 E0            [24] 2839 	push	acc
      0007B4 74s00            [12] 2840 	mov	a,#(___str_13 >> 8)
      0007B6 C0 E0            [24] 2841 	push	acc
      0007B8 74 80            [12] 2842 	mov	a,#0x80
      0007BA C0 E0            [24] 2843 	push	acc
      0007BC 12r00r00         [24] 2844 	lcall	_printf
      0007BF E5 81            [12] 2845 	mov	a,sp
      0007C1 24 FB            [12] 2846 	add	a,#0xfb
      0007C3 F5 81            [12] 2847 	mov	sp,a
                           0007C5  2848 	C$5Code.c$139$1$116 ==.
                                   2849 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:139: printf("%5d-y0\n\r\n", y0);
      0007C5 C0*1C            [24] 2850 	push	_y0
      0007C7 C0*1D            [24] 2851 	push	(_y0 + 1)
      0007C9 74rEC            [12] 2852 	mov	a,#___str_14
      0007CB C0 E0            [24] 2853 	push	acc
      0007CD 74s00            [12] 2854 	mov	a,#(___str_14 >> 8)
      0007CF C0 E0            [24] 2855 	push	acc
      0007D1 74 80            [12] 2856 	mov	a,#0x80
      0007D3 C0 E0            [24] 2857 	push	acc
      0007D5 12r00r00         [24] 2858 	lcall	_printf
      0007D8 E5 81            [12] 2859 	mov	a,sp
      0007DA 24 FB            [12] 2860 	add	a,#0xfb
      0007DC F5 81            [12] 2861 	mov	sp,a
                           0007DE  2862 	C$5Code.c$141$1$116 ==.
                                   2863 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:141: while(1)
      0007DE                       2864 00125$:
                           0007DE  2865 	C$5Code.c$143$2$123 ==.
                                   2866 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:143: counts = 0;
      0007DE E4               [12] 2867 	clr	a
      0007DF F5*1E            [12] 2868 	mov	_counts,a
      0007E1 F5*1F            [12] 2869 	mov	(_counts + 1),a
                           0007E3  2870 	C$5Code.c$144$2$123 ==.
                                   2871 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:144: while(counts < 15);
      0007E3                       2872 00121$:
      0007E3 C3               [12] 2873 	clr	c
      0007E4 E5*1E            [12] 2874 	mov	a,_counts
      0007E6 94 0F            [12] 2875 	subb	a,#0x0F
      0007E8 E5*1F            [12] 2876 	mov	a,(_counts + 1)
      0007EA 94 00            [12] 2877 	subb	a,#0x00
      0007EC 40 F5            [24] 2878 	jc	00121$
                           0007EE  2879 	C$5Code.c$146$2$123 ==.
                                   2880 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:146: ReadAccel();
      0007EE 12r08r50         [24] 2881 	lcall	_ReadAccel
                           0007F1  2882 	C$5Code.c$147$2$123 ==.
                                   2883 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:147: SteeringServo();
      0007F1 12r09r8B         [24] 2884 	lcall	_SteeringServo
                           0007F4  2885 	C$5Code.c$148$2$123 ==.
                                   2886 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:148: MotorServo();
      0007F4 12r09rE0         [24] 2887 	lcall	_MotorServo
                           0007F7  2888 	C$5Code.c$158$2$123 ==.
                                   2889 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:158: printf("%5d-gx  %5d-gy  %5d-fgx  %5d-fgy  %4d-MotoPW  %4d-SterPW\n\r", gx, gy, (gx-x0), (gy-y0), MOTOR_PW, STEERING_PW);
      0007F7 E5*18            [12] 2890 	mov	a,_gy
      0007F9 C3               [12] 2891 	clr	c
      0007FA 95*1C            [12] 2892 	subb	a,_y0
      0007FC FE               [12] 2893 	mov	r6,a
      0007FD E5*19            [12] 2894 	mov	a,(_gy + 1)
      0007FF 95*1D            [12] 2895 	subb	a,(_y0 + 1)
      000801 FF               [12] 2896 	mov	r7,a
      000802 E5*16            [12] 2897 	mov	a,_gx
      000804 C3               [12] 2898 	clr	c
      000805 95*1A            [12] 2899 	subb	a,_x0
      000807 FC               [12] 2900 	mov	r4,a
      000808 E5*17            [12] 2901 	mov	a,(_gx + 1)
      00080A 95*1B            [12] 2902 	subb	a,(_x0 + 1)
      00080C FD               [12] 2903 	mov	r5,a
      00080D C0*26            [24] 2904 	push	_STEERING_PW
      00080F C0*27            [24] 2905 	push	(_STEERING_PW + 1)
      000811 C0*24            [24] 2906 	push	_MOTOR_PW
      000813 C0*25            [24] 2907 	push	(_MOTOR_PW + 1)
      000815 C0 06            [24] 2908 	push	ar6
      000817 C0 07            [24] 2909 	push	ar7
      000819 C0 04            [24] 2910 	push	ar4
      00081B C0 05            [24] 2911 	push	ar5
      00081D C0*18            [24] 2912 	push	_gy
      00081F C0*19            [24] 2913 	push	(_gy + 1)
      000821 C0*16            [24] 2914 	push	_gx
      000823 C0*17            [24] 2915 	push	(_gx + 1)
      000825 74rF6            [12] 2916 	mov	a,#___str_15
      000827 C0 E0            [24] 2917 	push	acc
      000829 74s00            [12] 2918 	mov	a,#(___str_15 >> 8)
      00082B C0 E0            [24] 2919 	push	acc
      00082D 74 80            [12] 2920 	mov	a,#0x80
      00082F C0 E0            [24] 2921 	push	acc
      000831 12r00r00         [24] 2922 	lcall	_printf
      000834 E5 81            [12] 2923 	mov	a,sp
      000836 24 F1            [12] 2924 	add	a,#0xf1
      000838 F5 81            [12] 2925 	mov	sp,a
      00083A 80 A2            [24] 2926 	sjmp	00125$
                           00083C  2927 	C$5Code.c$211$1$116 ==.
                           00083C  2928 	XG$main$0$0 ==.
      00083C 22               [24] 2929 	ret
                                   2930 ;------------------------------------------------------------
                                   2931 ;Allocation info for local variables in function 'ReadBattery'
                                   2932 ;------------------------------------------------------------
                           00083D  2933 	G$ReadBattery$0$0 ==.
                           00083D  2934 	C$5Code.c$213$1$116 ==.
                                   2935 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:213: unsigned char ReadBattery(void)
                                   2936 ;	-----------------------------------------
                                   2937 ;	 function ReadBattery
                                   2938 ;	-----------------------------------------
      00083D                       2939 _ReadBattery:
                           00083D  2940 	C$5Code.c$215$1$125 ==.
                                   2941 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:215: ADC1CN = ADC1CN & ~0x20; // Clear the “Conversion Completed” flag
      00083D AF AA            [24] 2942 	mov	r7,_ADC1CN
      00083F 74 DF            [12] 2943 	mov	a,#0xDF
      000841 5F               [12] 2944 	anl	a,r7
      000842 F5 AA            [12] 2945 	mov	_ADC1CN,a
                           000844  2946 	C$5Code.c$216$1$125 ==.
                                   2947 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:216: ADC1CN = ADC1CN | 0x10; // Initiate A/D conversion
      000844 43 AA 10         [24] 2948 	orl	_ADC1CN,#0x10
                           000847  2949 	C$5Code.c$217$1$125 ==.
                                   2950 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:217: while ((ADC1CN & 0x20) == 0x00);// Wait for conversion to complete
      000847                       2951 00101$:
      000847 E5 AA            [12] 2952 	mov	a,_ADC1CN
      000849 30 E5 FB         [24] 2953 	jnb	acc.5,00101$
                           00084C  2954 	C$5Code.c$218$1$125 ==.
                                   2955 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:218: return ADC1; // Return digital value in ADC1 register
      00084C 85 9C 82         [24] 2956 	mov	dpl,_ADC1
                           00084F  2957 	C$5Code.c$219$1$125 ==.
                           00084F  2958 	XG$ReadBattery$0$0 ==.
      00084F 22               [24] 2959 	ret
                                   2960 ;------------------------------------------------------------
                                   2961 ;Allocation info for local variables in function 'ReadAccel'
                                   2962 ;------------------------------------------------------------
                                   2963 ;i                         Allocated to registers 
                                   2964 ;Data                      Allocated with name '_ReadAccel_Data_1_127'
                                   2965 ;avg_gx                    Allocated to registers r6 r7 
                                   2966 ;avg_gy                    Allocated with name '_ReadAccel_avg_gy_1_127'
                                   2967 ;------------------------------------------------------------
                           000850  2968 	G$ReadAccel$0$0 ==.
                           000850  2969 	C$5Code.c$222$1$125 ==.
                                   2970 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:222: void ReadAccel(void)
                                   2971 ;	-----------------------------------------
                                   2972 ;	 function ReadAccel
                                   2973 ;	-----------------------------------------
      000850                       2974 _ReadAccel:
                           000850  2975 	C$5Code.c$226$1$125 ==.
                                   2976 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:226: int avg_gx=0;  //Clear Averages
                           000850  2977 	C$5Code.c$227$1$125 ==.
                                   2978 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:227: int avg_gy=0;
                           000850  2979 	C$5Code.c$228$1$127 ==.
                                   2980 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:228: for(i=0; i<7; i++)
      000850 E4               [12] 2981 	clr a
      000851 FE               [12] 2982 	mov r6,a
      000852 FF               [12] 2983 	mov r7,a
      000853 F5*37            [12] 2984 	mov _ReadAccel_avg_gy_1_127,a
      000855 F5*38            [12] 2985 	mov (_ReadAccel_avg_gy_1_127 + 1),a
      000857 FA               [12] 2986 	mov r2,a
      000858 FB               [12] 2987 	mov r3,a
      000859                       2988 00111$:
                           000859  2989 	C$5Code.c$230$2$128 ==.
                                   2990 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:230: i2c_read_data(0x30, 0x27, Data,1);   //Read status register
      000859 75*0Br32         [24] 2991 	mov	_i2c_read_data_PARM_3,#_ReadAccel_Data_1_127
      00085C 75*0C 00         [24] 2992 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      00085F 75*0D 40         [24] 2993 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000862 75*0A 27         [24] 2994 	mov	_i2c_read_data_PARM_2,#0x27
      000865 75*0E 01         [24] 2995 	mov	_i2c_read_data_PARM_4,#0x01
      000868 75 82 30         [24] 2996 	mov	dpl,#0x30
      00086B C0 07            [24] 2997 	push	ar7
      00086D C0 06            [24] 2998 	push	ar6
      00086F C0 03            [24] 2999 	push	ar3
      000871 C0 02            [24] 3000 	push	ar2
      000873 12r03rE8         [24] 3001 	lcall	_i2c_read_data
      000876 D0 02            [24] 3002 	pop	ar2
      000878 D0 03            [24] 3003 	pop	ar3
      00087A D0 06            [24] 3004 	pop	ar6
      00087C D0 07            [24] 3005 	pop	ar7
                           00087E  3006 	C$5Code.c$232$2$128 ==.
                                   3007 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:232: counts_accel = 0;
      00087E E4               [12] 3008 	clr	a
      00087F F5*20            [12] 3009 	mov	_counts_accel,a
      000881 F5*21            [12] 3010 	mov	(_counts_accel + 1),a
                           000883  3011 	C$5Code.c$233$2$128 ==.
                                   3012 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:233: while(counts_accel < 2);
      000883                       3013 00101$:
      000883 C3               [12] 3014 	clr	c
      000884 E5*20            [12] 3015 	mov	a,_counts_accel
      000886 94 02            [12] 3016 	subb	a,#0x02
      000888 E5*21            [12] 3017 	mov	a,(_counts_accel + 1)
      00088A 94 00            [12] 3018 	subb	a,#0x00
      00088C 40 F5            [24] 3019 	jc	00101$
                           00088E  3020 	C$5Code.c$235$2$128 ==.
                                   3021 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:235: while((Data[0]&0x03)!=0x03)
      00088E                       3022 00107$:
      00088E 74 03            [12] 3023 	mov	a,#0x03
      000890 55*32            [12] 3024 	anl	a,_ReadAccel_Data_1_127
      000892 FD               [12] 3025 	mov	r5,a
      000893 BD 03 02         [24] 3026 	cjne	r5,#0x03,00138$
      000896 80 37            [24] 3027 	sjmp	00109$
      000898                       3028 00138$:
                           000898  3029 	C$5Code.c$237$3$129 ==.
                                   3030 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:237: i2c_read_data(0x30, 0x27, Data,1);   //Read status register
      000898 75*0Br32         [24] 3031 	mov	_i2c_read_data_PARM_3,#_ReadAccel_Data_1_127
      00089B 75*0C 00         [24] 3032 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      00089E 75*0D 40         [24] 3033 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      0008A1 75*0A 27         [24] 3034 	mov	_i2c_read_data_PARM_2,#0x27
      0008A4 75*0E 01         [24] 3035 	mov	_i2c_read_data_PARM_4,#0x01
      0008A7 75 82 30         [24] 3036 	mov	dpl,#0x30
      0008AA C0 07            [24] 3037 	push	ar7
      0008AC C0 06            [24] 3038 	push	ar6
      0008AE C0 03            [24] 3039 	push	ar3
      0008B0 C0 02            [24] 3040 	push	ar2
      0008B2 12r03rE8         [24] 3041 	lcall	_i2c_read_data
      0008B5 D0 02            [24] 3042 	pop	ar2
      0008B7 D0 03            [24] 3043 	pop	ar3
      0008B9 D0 06            [24] 3044 	pop	ar6
      0008BB D0 07            [24] 3045 	pop	ar7
                           0008BD  3046 	C$5Code.c$238$3$129 ==.
                                   3047 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:238: counts_accel = 0;
      0008BD E4               [12] 3048 	clr	a
      0008BE F5*20            [12] 3049 	mov	_counts_accel,a
      0008C0 F5*21            [12] 3050 	mov	(_counts_accel + 1),a
                           0008C2  3051 	C$5Code.c$239$3$129 ==.
                                   3052 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:239: while(counts_accel < 2);
      0008C2                       3053 00104$:
      0008C2 C3               [12] 3054 	clr	c
      0008C3 E5*20            [12] 3055 	mov	a,_counts_accel
      0008C5 94 02            [12] 3056 	subb	a,#0x02
      0008C7 E5*21            [12] 3057 	mov	a,(_counts_accel + 1)
      0008C9 94 00            [12] 3058 	subb	a,#0x00
      0008CB 50 C1            [24] 3059 	jnc	00107$
      0008CD 80 F3            [24] 3060 	sjmp	00104$
      0008CF                       3061 00109$:
                           0008CF  3062 	C$5Code.c$242$2$128 ==.
                                   3063 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:242: i2c_read_data(addr_accel, 0x28|0x80, Data,4);  //Read 4 byte, starting at reg 0x28
      0008CF 75*0Br32         [24] 3064 	mov	_i2c_read_data_PARM_3,#_ReadAccel_Data_1_127
      0008D2 75*0C 00         [24] 3065 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      0008D5 75*0D 40         [24] 3066 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      0008D8 75*0A A8         [24] 3067 	mov	_i2c_read_data_PARM_2,#0xA8
      0008DB 75*0E 04         [24] 3068 	mov	_i2c_read_data_PARM_4,#0x04
      0008DE 75 82 30         [24] 3069 	mov	dpl,#0x30
      0008E1 C0 07            [24] 3070 	push	ar7
      0008E3 C0 06            [24] 3071 	push	ar6
      0008E5 C0 03            [24] 3072 	push	ar3
      0008E7 C0 02            [24] 3073 	push	ar2
      0008E9 12r03rE8         [24] 3074 	lcall	_i2c_read_data
      0008EC D0 02            [24] 3075 	pop	ar2
      0008EE D0 03            [24] 3076 	pop	ar3
      0008F0 D0 06            [24] 3077 	pop	ar6
      0008F2 D0 07            [24] 3078 	pop	ar7
                           0008F4  3079 	C$5Code.c$244$2$128 ==.
                                   3080 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:244: avg_gx += ((Data[1]<<8)>>4);
      0008F4 AD*33            [24] 3081 	mov	r5,(_ReadAccel_Data_1_127 + 0x0001)
      0008F6 7C 00            [12] 3082 	mov	r4,#0x00
      0008F8 ED               [12] 3083 	mov	a,r5
      0008F9 C4               [12] 3084 	swap	a
      0008FA CC               [12] 3085 	xch	a,r4
      0008FB C4               [12] 3086 	swap	a
      0008FC 54 0F            [12] 3087 	anl	a,#0x0F
      0008FE 6C               [12] 3088 	xrl	a,r4
      0008FF CC               [12] 3089 	xch	a,r4
      000900 54 0F            [12] 3090 	anl	a,#0x0F
      000902 CC               [12] 3091 	xch	a,r4
      000903 6C               [12] 3092 	xrl	a,r4
      000904 CC               [12] 3093 	xch	a,r4
      000905 30 E3 02         [24] 3094 	jnb	acc.3,00140$
      000908 44 F0            [12] 3095 	orl	a,#0xF0
      00090A                       3096 00140$:
      00090A FD               [12] 3097 	mov	r5,a
      00090B EC               [12] 3098 	mov	a,r4
      00090C 2E               [12] 3099 	add	a,r6
      00090D FE               [12] 3100 	mov	r6,a
      00090E ED               [12] 3101 	mov	a,r5
      00090F 3F               [12] 3102 	addc	a,r7
      000910 FF               [12] 3103 	mov	r7,a
                           000911  3104 	C$5Code.c$245$2$128 ==.
                                   3105 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:245: avg_gy += ((Data [3]<<8)>>4);
      000911 AD*35            [24] 3106 	mov	r5,(_ReadAccel_Data_1_127 + 0x0003)
      000913 7C 00            [12] 3107 	mov	r4,#0x00
      000915 ED               [12] 3108 	mov	a,r5
      000916 C4               [12] 3109 	swap	a
      000917 CC               [12] 3110 	xch	a,r4
      000918 C4               [12] 3111 	swap	a
      000919 54 0F            [12] 3112 	anl	a,#0x0F
      00091B 6C               [12] 3113 	xrl	a,r4
      00091C CC               [12] 3114 	xch	a,r4
      00091D 54 0F            [12] 3115 	anl	a,#0x0F
      00091F CC               [12] 3116 	xch	a,r4
      000920 6C               [12] 3117 	xrl	a,r4
      000921 CC               [12] 3118 	xch	a,r4
      000922 30 E3 02         [24] 3119 	jnb	acc.3,00141$
      000925 44 F0            [12] 3120 	orl	a,#0xF0
      000927                       3121 00141$:
      000927 FD               [12] 3122 	mov	r5,a
      000928 EC               [12] 3123 	mov	a,r4
      000929 25*37            [12] 3124 	add	a,_ReadAccel_avg_gy_1_127
      00092B F5*37            [12] 3125 	mov	_ReadAccel_avg_gy_1_127,a
      00092D ED               [12] 3126 	mov	a,r5
      00092E 35*38            [12] 3127 	addc	a,(_ReadAccel_avg_gy_1_127 + 1)
      000930 F5*38            [12] 3128 	mov	(_ReadAccel_avg_gy_1_127 + 1),a
                           000932  3129 	C$5Code.c$228$1$127 ==.
                                   3130 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:228: for(i=0; i<7; i++)
      000932 0A               [12] 3131 	inc	r2
      000933 BA 00 01         [24] 3132 	cjne	r2,#0x00,00142$
      000936 0B               [12] 3133 	inc	r3
      000937                       3134 00142$:
      000937 C3               [12] 3135 	clr	c
      000938 EA               [12] 3136 	mov	a,r2
      000939 94 07            [12] 3137 	subb	a,#0x07
      00093B EB               [12] 3138 	mov	a,r3
      00093C 64 80            [12] 3139 	xrl	a,#0x80
      00093E 94 80            [12] 3140 	subb	a,#0x80
      000940 50 03            [24] 3141 	jnc	00143$
      000942 02r08r59         [24] 3142 	ljmp	00111$
      000945                       3143 00143$:
                           000945  3144 	C$5Code.c$248$1$127 ==.
                                   3145 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:248: avg_gx = avg_gx/8;
      000945 75*00 08         [24] 3146 	mov	__divsint_PARM_2,#0x08
      000948 75*01 00         [24] 3147 	mov	(__divsint_PARM_2 + 1),#0x00
      00094B 8E 82            [24] 3148 	mov	dpl,r6
      00094D 8F 83            [24] 3149 	mov	dph,r7
      00094F 12r00r00         [24] 3150 	lcall	__divsint
      000952 AE 82            [24] 3151 	mov	r6,dpl
      000954 AF 83            [24] 3152 	mov	r7,dph
                           000956  3153 	C$5Code.c$249$1$127 ==.
                                   3154 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:249: avg_gy = avg_gy/8;
      000956 75*00 08         [24] 3155 	mov	__divsint_PARM_2,#0x08
      000959 75*01 00         [24] 3156 	mov	(__divsint_PARM_2 + 1),#0x00
      00095C 85*37 82         [24] 3157 	mov	dpl,_ReadAccel_avg_gy_1_127
      00095F 85*38 83         [24] 3158 	mov	dph,(_ReadAccel_avg_gy_1_127 + 1)
      000962 C0 07            [24] 3159 	push	ar7
      000964 C0 06            [24] 3160 	push	ar6
      000966 12r00r00         [24] 3161 	lcall	__divsint
      000969 85 82*37         [24] 3162 	mov	_ReadAccel_avg_gy_1_127,dpl
      00096C 85 83*38         [24] 3163 	mov	(_ReadAccel_avg_gy_1_127 + 1),dph
      00096F D0 06            [24] 3164 	pop	ar6
      000971 D0 07            [24] 3165 	pop	ar7
                           000973  3166 	C$5Code.c$252$1$127 ==.
                                   3167 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:252: gx = avg_gx - x0;
      000973 EE               [12] 3168 	mov	a,r6
      000974 C3               [12] 3169 	clr	c
      000975 95*1A            [12] 3170 	subb	a,_x0
      000977 F5*16            [12] 3171 	mov	_gx,a
      000979 EF               [12] 3172 	mov	a,r7
      00097A 95*1B            [12] 3173 	subb	a,(_x0 + 1)
      00097C F5*17            [12] 3174 	mov	(_gx + 1),a
                           00097E  3175 	C$5Code.c$253$1$127 ==.
                                   3176 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:253: gy = avg_gy + y0;
      00097E E5*1C            [12] 3177 	mov	a,_y0
      000980 25*37            [12] 3178 	add	a,_ReadAccel_avg_gy_1_127
      000982 F5*18            [12] 3179 	mov	_gy,a
      000984 E5*1D            [12] 3180 	mov	a,(_y0 + 1)
      000986 35*38            [12] 3181 	addc	a,(_ReadAccel_avg_gy_1_127 + 1)
      000988 F5*19            [12] 3182 	mov	(_gy + 1),a
                           00098A  3183 	C$5Code.c$254$1$127 ==.
                           00098A  3184 	XG$ReadAccel$0$0 ==.
      00098A 22               [24] 3185 	ret
                                   3186 ;------------------------------------------------------------
                                   3187 ;Allocation info for local variables in function 'SteeringServo'
                                   3188 ;------------------------------------------------------------
                           00098B  3189 	G$SteeringServo$0$0 ==.
                           00098B  3190 	C$5Code.c$265$1$127 ==.
                                   3191 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:265: void SteeringServo()
                                   3192 ;	-----------------------------------------
                                   3193 ;	 function SteeringServo
                                   3194 ;	-----------------------------------------
      00098B                       3195 _SteeringServo:
                           00098B  3196 	C$5Code.c$267$1$130 ==.
                                   3197 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:267: STEERING_PW = PW_NEUT - (ks * (gx - x0));
      00098B E5*16            [12] 3198 	mov	a,_gx
      00098D C3               [12] 3199 	clr	c
      00098E 95*1A            [12] 3200 	subb	a,_x0
      000990 F5*00            [12] 3201 	mov	__mulint_PARM_2,a
      000992 E5*17            [12] 3202 	mov	a,(_gx + 1)
      000994 95*1B            [12] 3203 	subb	a,(_x0 + 1)
      000996 F5*01            [12] 3204 	mov	(__mulint_PARM_2 + 1),a
      000998 85*28 82         [24] 3205 	mov	dpl,_ks
      00099B 85*29 83         [24] 3206 	mov	dph,(_ks + 1)
      00099E 12r00r00         [24] 3207 	lcall	__mulint
      0009A1 AE 82            [24] 3208 	mov	r6,dpl
      0009A3 AF 83            [24] 3209 	mov	r7,dph
      0009A5 E5*10            [12] 3210 	mov	a,_PW_NEUT
      0009A7 C3               [12] 3211 	clr	c
      0009A8 9E               [12] 3212 	subb	a,r6
      0009A9 F5*26            [12] 3213 	mov	_STEERING_PW,a
      0009AB E5*11            [12] 3214 	mov	a,(_PW_NEUT + 1)
      0009AD 9F               [12] 3215 	subb	a,r7
      0009AE F5*27            [12] 3216 	mov	(_STEERING_PW + 1),a
                           0009B0  3217 	C$5Code.c$269$1$130 ==.
                                   3218 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:269: if(STEERING_PW > 3380) // check if less than pulsewidth minimum
      0009B0 C3               [12] 3219 	clr	c
      0009B1 74 34            [12] 3220 	mov	a,#0x34
      0009B3 95*26            [12] 3221 	subb	a,_STEERING_PW
      0009B5 74 0D            [12] 3222 	mov	a,#0x0D
      0009B7 95*27            [12] 3223 	subb	a,(_STEERING_PW + 1)
      0009B9 50 06            [24] 3224 	jnc	00102$
                           0009BB  3225 	C$5Code.c$271$2$131 ==.
                                   3226 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:271: STEERING_PW = 3380;    // set SERVO_PW to a minimum value
      0009BB 75*26 34         [24] 3227 	mov	_STEERING_PW,#0x34
      0009BE 75*27 0D         [24] 3228 	mov	(_STEERING_PW + 1),#0x0D
      0009C1                       3229 00102$:
                           0009C1  3230 	C$5Code.c$274$1$130 ==.
                                   3231 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:274: if(STEERING_PW < PW_MIN)  // check if pulsewidth maximum exceeded
      0009C1 C3               [12] 3232 	clr	c
      0009C2 E5*26            [12] 3233 	mov	a,_STEERING_PW
      0009C4 95*12            [12] 3234 	subb	a,_PW_MIN
      0009C6 E5*27            [12] 3235 	mov	a,(_STEERING_PW + 1)
      0009C8 95*13            [12] 3236 	subb	a,(_PW_MIN + 1)
      0009CA 50 06            [24] 3237 	jnc	00104$
                           0009CC  3238 	C$5Code.c$276$2$132 ==.
                                   3239 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:276: STEERING_PW = PW_MIN;     // set PW to a maximum value
      0009CC 85*12*26         [24] 3240 	mov	_STEERING_PW,_PW_MIN
      0009CF 85*13*27         [24] 3241 	mov	(_STEERING_PW + 1),(_PW_MIN + 1)
      0009D2                       3242 00104$:
                           0009D2  3243 	C$5Code.c$280$1$130 ==.
                                   3244 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:280: PCA0CP0 = 0xFFFF - STEERING_PW;
      0009D2 74 FF            [12] 3245 	mov	a,#0xFF
      0009D4 C3               [12] 3246 	clr	c
      0009D5 95*26            [12] 3247 	subb	a,_STEERING_PW
      0009D7 F5 EA            [12] 3248 	mov	((_PCA0CP0 >> 0) & 0xFF),a
      0009D9 74 FF            [12] 3249 	mov	a,#0xFF
      0009DB 95*27            [12] 3250 	subb	a,(_STEERING_PW + 1)
      0009DD F5 FA            [12] 3251 	mov	((_PCA0CP0 >> 8) & 0xFF),a
                           0009DF  3252 	C$5Code.c$281$1$130 ==.
                           0009DF  3253 	XG$SteeringServo$0$0 ==.
      0009DF 22               [24] 3254 	ret
                                   3255 ;------------------------------------------------------------
                                   3256 ;Allocation info for local variables in function 'MotorServo'
                                   3257 ;------------------------------------------------------------
                                   3258 ;temp1                     Allocated to registers r6 r7 
                                   3259 ;temp2                     Allocated to registers r4 r5 
                                   3260 ;------------------------------------------------------------
                           0009E0  3261 	G$MotorServo$0$0 ==.
                           0009E0  3262 	C$5Code.c$287$1$130 ==.
                                   3263 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:287: void MotorServo()
                                   3264 ;	-----------------------------------------
                                   3265 ;	 function MotorServo
                                   3266 ;	-----------------------------------------
      0009E0                       3267 _MotorServo:
                           0009E0  3268 	C$5Code.c$302$1$133 ==.
                                   3269 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:302: unsigned int temp1 = abs((gy-y0) * kd_y);
      0009E0 E5*18            [12] 3270 	mov	a,_gy
      0009E2 C3               [12] 3271 	clr	c
      0009E3 95*1C            [12] 3272 	subb	a,_y0
      0009E5 F5 82            [12] 3273 	mov	dpl,a
      0009E7 E5*19            [12] 3274 	mov	a,(_gy + 1)
      0009E9 95*1D            [12] 3275 	subb	a,(_y0 + 1)
      0009EB F5 83            [12] 3276 	mov	dph,a
      0009ED 85*2C*00         [24] 3277 	mov	__mulint_PARM_2,_kd_y
      0009F0 85*2D*01         [24] 3278 	mov	(__mulint_PARM_2 + 1),(_kd_y + 1)
      0009F3 12r00r00         [24] 3279 	lcall	__mulint
      0009F6 12r00r00         [24] 3280 	lcall	_abs
      0009F9 AE 82            [24] 3281 	mov	r6,dpl
      0009FB AF 83            [24] 3282 	mov	r7,dph
                           0009FD  3283 	C$5Code.c$303$1$133 ==.
                                   3284 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:303: unsigned int temp2 = abs((gx-x0) * kd_x);
      0009FD E5*16            [12] 3285 	mov	a,_gx
      0009FF C3               [12] 3286 	clr	c
      000A00 95*1A            [12] 3287 	subb	a,_x0
      000A02 F5 82            [12] 3288 	mov	dpl,a
      000A04 E5*17            [12] 3289 	mov	a,(_gx + 1)
      000A06 95*1B            [12] 3290 	subb	a,(_x0 + 1)
      000A08 F5 83            [12] 3291 	mov	dph,a
      000A0A 85*2A*00         [24] 3292 	mov	__mulint_PARM_2,_kd_x
      000A0D 85*2B*01         [24] 3293 	mov	(__mulint_PARM_2 + 1),(_kd_x + 1)
      000A10 C0 07            [24] 3294 	push	ar7
      000A12 C0 06            [24] 3295 	push	ar6
      000A14 12r00r00         [24] 3296 	lcall	__mulint
      000A17 12r00r00         [24] 3297 	lcall	_abs
      000A1A AC 82            [24] 3298 	mov	r4,dpl
      000A1C AD 83            [24] 3299 	mov	r5,dph
      000A1E D0 06            [24] 3300 	pop	ar6
      000A20 D0 07            [24] 3301 	pop	ar7
                           000A22  3302 	C$5Code.c$305$1$133 ==.
                                   3303 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:305: if(temp1 > temp2)
      000A22 C3               [12] 3304 	clr	c
      000A23 EC               [12] 3305 	mov	a,r4
      000A24 9E               [12] 3306 	subb	a,r6
      000A25 ED               [12] 3307 	mov	a,r5
      000A26 9F               [12] 3308 	subb	a,r7
      000A27 50 0D            [24] 3309 	jnc	00102$
                           000A29  3310 	C$5Code.c$307$2$134 ==.
                                   3311 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:307: MOTOR_PW = PW_NEUT - temp1;
      000A29 E5*10            [12] 3312 	mov	a,_PW_NEUT
      000A2B C3               [12] 3313 	clr	c
      000A2C 9E               [12] 3314 	subb	a,r6
      000A2D F5*24            [12] 3315 	mov	_MOTOR_PW,a
      000A2F E5*11            [12] 3316 	mov	a,(_PW_NEUT + 1)
      000A31 9F               [12] 3317 	subb	a,r7
      000A32 F5*25            [12] 3318 	mov	(_MOTOR_PW + 1),a
      000A34 80 0B            [24] 3319 	sjmp	00103$
      000A36                       3320 00102$:
                           000A36  3321 	C$5Code.c$311$2$135 ==.
                                   3322 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:311: MOTOR_PW = PW_NEUT - temp2;
      000A36 E5*10            [12] 3323 	mov	a,_PW_NEUT
      000A38 C3               [12] 3324 	clr	c
      000A39 9C               [12] 3325 	subb	a,r4
      000A3A F5*24            [12] 3326 	mov	_MOTOR_PW,a
      000A3C E5*11            [12] 3327 	mov	a,(_PW_NEUT + 1)
      000A3E 9D               [12] 3328 	subb	a,r5
      000A3F F5*25            [12] 3329 	mov	(_MOTOR_PW + 1),a
      000A41                       3330 00103$:
                           000A41  3331 	C$5Code.c$315$1$133 ==.
                                   3332 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:315: if(MOTOR_PW > PW_MAX)
      000A41 C3               [12] 3333 	clr	c
      000A42 E5*14            [12] 3334 	mov	a,_PW_MAX
      000A44 95*24            [12] 3335 	subb	a,_MOTOR_PW
      000A46 E5*15            [12] 3336 	mov	a,(_PW_MAX + 1)
      000A48 95*25            [12] 3337 	subb	a,(_MOTOR_PW + 1)
      000A4A 50 06            [24] 3338 	jnc	00105$
                           000A4C  3339 	C$5Code.c$316$1$133 ==.
                                   3340 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:316: MOTOR_PW = 3500;
      000A4C 75*24 AC         [24] 3341 	mov	_MOTOR_PW,#0xAC
      000A4F 75*25 0D         [24] 3342 	mov	(_MOTOR_PW + 1),#0x0D
      000A52                       3343 00105$:
                           000A52  3344 	C$5Code.c$318$1$133 ==.
                                   3345 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:318: if(MOTOR_PW < PW_NEUT) //changed to pwneut because car should never be going backwards
      000A52 C3               [12] 3346 	clr	c
      000A53 E5*24            [12] 3347 	mov	a,_MOTOR_PW
      000A55 95*10            [12] 3348 	subb	a,_PW_NEUT
      000A57 E5*25            [12] 3349 	mov	a,(_MOTOR_PW + 1)
      000A59 95*11            [12] 3350 	subb	a,(_PW_NEUT + 1)
      000A5B 50 06            [24] 3351 	jnc	00107$
                           000A5D  3352 	C$5Code.c$319$1$133 ==.
                                   3353 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:319: MOTOR_PW = 2780;
      000A5D 75*24 DC         [24] 3354 	mov	_MOTOR_PW,#0xDC
      000A60 75*25 0A         [24] 3355 	mov	(_MOTOR_PW + 1),#0x0A
      000A63                       3356 00107$:
                           000A63  3357 	C$5Code.c$322$1$133 ==.
                                   3358 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:322: PCA0CP2 = 0xFFFF - MOTOR_PW;
      000A63 74 FF            [12] 3359 	mov	a,#0xFF
      000A65 C3               [12] 3360 	clr	c
      000A66 95*24            [12] 3361 	subb	a,_MOTOR_PW
      000A68 F5 EC            [12] 3362 	mov	((_PCA0CP2 >> 0) & 0xFF),a
      000A6A 74 FF            [12] 3363 	mov	a,#0xFF
      000A6C 95*25            [12] 3364 	subb	a,(_MOTOR_PW + 1)
      000A6E F5 FC            [12] 3365 	mov	((_PCA0CP2 >> 8) & 0xFF),a
                           000A70  3366 	C$5Code.c$325$1$133 ==.
                           000A70  3367 	XG$MotorServo$0$0 ==.
      000A70 22               [24] 3368 	ret
                                   3369 ;------------------------------------------------------------
                                   3370 ;Allocation info for local variables in function 'getIndividualPress'
                                   3371 ;------------------------------------------------------------
                                   3372 ;finalKey                  Allocated to registers r6 
                                   3373 ;keypad                    Allocated to registers r7 
                                   3374 ;------------------------------------------------------------
                           000A71  3375 	G$getIndividualPress$0$0 ==.
                           000A71  3376 	C$5Code.c$334$1$133 ==.
                                   3377 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:334: char getIndividualPress(void)
                                   3378 ;	-----------------------------------------
                                   3379 ;	 function getIndividualPress
                                   3380 ;	-----------------------------------------
      000A71                       3381 _getIndividualPress:
                           000A71  3382 	C$5Code.c$337$1$137 ==.
                                   3383 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:337: char keypad = read_keypad();
      000A71 12r01r1A         [24] 3384 	lcall	_read_keypad
      000A74 AF 82            [24] 3385 	mov	r7,dpl
                           000A76  3386 	C$5Code.c$339$1$137 ==.
                                   3387 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:339: counts = 0;
      000A76 E4               [12] 3388 	clr	a
      000A77 F5*1E            [12] 3389 	mov	_counts,a
      000A79 F5*1F            [12] 3390 	mov	(_counts + 1),a
                           000A7B  3391 	C$5Code.c$340$1$137 ==.
                                   3392 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:340: while(counts <5);
      000A7B                       3393 00101$:
      000A7B C3               [12] 3394 	clr	c
      000A7C E5*1E            [12] 3395 	mov	a,_counts
      000A7E 94 05            [12] 3396 	subb	a,#0x05
      000A80 E5*1F            [12] 3397 	mov	a,(_counts + 1)
      000A82 94 00            [12] 3398 	subb	a,#0x00
      000A84 40 F5            [24] 3399 	jc	00101$
                           000A86  3400 	C$5Code.c$342$1$137 ==.
                                   3401 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:342: while(keypad == -1) //while loop holds while key isnt pressed
      000A86                       3402 00107$:
      000A86 BF FF 17         [24] 3403 	cjne	r7,#0xFF,00109$
                           000A89  3404 	C$5Code.c$344$2$138 ==.
                                   3405 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:344: keypad = read_keypad();
      000A89 12r01r1A         [24] 3406 	lcall	_read_keypad
      000A8C AF 82            [24] 3407 	mov	r7,dpl
                           000A8E  3408 	C$5Code.c$345$2$138 ==.
                                   3409 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:345: counts = 0;
      000A8E E4               [12] 3410 	clr	a
      000A8F F5*1E            [12] 3411 	mov	_counts,a
      000A91 F5*1F            [12] 3412 	mov	(_counts + 1),a
                           000A93  3413 	C$5Code.c$346$2$138 ==.
                                   3414 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:346: while(counts <5);
      000A93                       3415 00104$:
      000A93 C3               [12] 3416 	clr	c
      000A94 E5*1E            [12] 3417 	mov	a,_counts
      000A96 94 05            [12] 3418 	subb	a,#0x05
      000A98 E5*1F            [12] 3419 	mov	a,(_counts + 1)
      000A9A 94 00            [12] 3420 	subb	a,#0x00
      000A9C 50 E8            [24] 3421 	jnc	00107$
      000A9E 80 F3            [24] 3422 	sjmp	00104$
      000AA0                       3423 00109$:
                           000AA0  3424 	C$5Code.c$349$1$137 ==.
                                   3425 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:349: finalKey = keypad;
      000AA0 8F 06            [24] 3426 	mov	ar6,r7
                           000AA2  3427 	C$5Code.c$351$1$137 ==.
                                   3428 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:351: while(keypad != -1) //while loop holds while key is pressed
      000AA2                       3429 00113$:
      000AA2 BF FF 02         [24] 3430 	cjne	r7,#0xFF,00149$
      000AA5 80 1B            [24] 3431 	sjmp	00115$
      000AA7                       3432 00149$:
                           000AA7  3433 	C$5Code.c$353$2$139 ==.
                                   3434 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:353: keypad = read_keypad();
      000AA7 C0 06            [24] 3435 	push	ar6
      000AA9 12r01r1A         [24] 3436 	lcall	_read_keypad
      000AAC AF 82            [24] 3437 	mov	r7,dpl
      000AAE D0 06            [24] 3438 	pop	ar6
                           000AB0  3439 	C$5Code.c$354$2$139 ==.
                                   3440 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:354: counts = 0;
      000AB0 E4               [12] 3441 	clr	a
      000AB1 F5*1E            [12] 3442 	mov	_counts,a
      000AB3 F5*1F            [12] 3443 	mov	(_counts + 1),a
                           000AB5  3444 	C$5Code.c$355$2$139 ==.
                                   3445 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:355: while(counts <5);
      000AB5                       3446 00110$:
      000AB5 C3               [12] 3447 	clr	c
      000AB6 E5*1E            [12] 3448 	mov	a,_counts
      000AB8 94 05            [12] 3449 	subb	a,#0x05
      000ABA E5*1F            [12] 3450 	mov	a,(_counts + 1)
      000ABC 94 00            [12] 3451 	subb	a,#0x00
      000ABE 50 E2            [24] 3452 	jnc	00113$
      000AC0 80 F3            [24] 3453 	sjmp	00110$
      000AC2                       3454 00115$:
                           000AC2  3455 	C$5Code.c$358$1$137 ==.
                                   3456 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:358: return finalKey;
      000AC2 8E 82            [24] 3457 	mov	dpl,r6
                           000AC4  3458 	C$5Code.c$359$1$137 ==.
                           000AC4  3459 	XG$getIndividualPress$0$0 ==.
      000AC4 22               [24] 3460 	ret
                                   3461 ;------------------------------------------------------------
                                   3462 ;Allocation info for local variables in function 'getNumberFromKeypad'
                                   3463 ;------------------------------------------------------------
                                   3464 ;letter                    Allocated to registers r6 
                                   3465 ;data2                     Allocated with name '_getNumberFromKeypad_data2_1_141'
                                   3466 ;index                     Allocated to registers 
                                   3467 ;temp                      Allocated to registers 
                                   3468 ;------------------------------------------------------------
                           000AC5  3469 	G$getNumberFromKeypad$0$0 ==.
                           000AC5  3470 	C$5Code.c$362$1$137 ==.
                                   3471 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:362: unsigned int getNumberFromKeypad(void)
                                   3472 ;	-----------------------------------------
                                   3473 ;	 function getNumberFromKeypad
                                   3474 ;	-----------------------------------------
      000AC5                       3475 _getNumberFromKeypad:
                           000AC5  3476 	C$5Code.c$369$1$141 ==.
                                   3477 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:369: data2[0] = ' ' ;
      000AC5 75*39 20         [24] 3478 	mov	_getNumberFromKeypad_data2_1_141,#0x20
                           000AC8  3479 	C$5Code.c$370$1$141 ==.
                                   3480 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:370: data2[1] = ' ';
      000AC8 75*3A 20         [24] 3481 	mov	(_getNumberFromKeypad_data2_1_141 + 0x0001),#0x20
                           000ACB  3482 	C$5Code.c$371$1$141 ==.
                                   3483 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:371: data2[2] = ' ';
      000ACB 75*3B 20         [24] 3484 	mov	(_getNumberFromKeypad_data2_1_141 + 0x0002),#0x20
                           000ACE  3485 	C$5Code.c$373$1$141 ==.
                                   3486 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:373: for(index = 0; index < 3; index++)
      000ACE 7F 00            [12] 3487 	mov	r7,#0x00
      000AD0                       3488 00111$:
                           000AD0  3489 	C$5Code.c$375$2$142 ==.
                                   3490 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:375: letter = getIndividualPress();
      000AD0 C0 07            [24] 3491 	push	ar7
      000AD2 12r0Ar71         [24] 3492 	lcall	_getIndividualPress
      000AD5 AE 82            [24] 3493 	mov	r6,dpl
      000AD7 D0 07            [24] 3494 	pop	ar7
                           000AD9  3495 	C$5Code.c$377$2$142 ==.
                                   3496 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:377: if(letter != 42 && letter != 35)
      000AD9 BE 2A 02         [24] 3497 	cjne	r6,#0x2A,00131$
      000ADC 80 0D            [24] 3498 	sjmp	00107$
      000ADE                       3499 00131$:
      000ADE BE 23 02         [24] 3500 	cjne	r6,#0x23,00132$
      000AE1 80 08            [24] 3501 	sjmp	00107$
      000AE3                       3502 00132$:
                           000AE3  3503 	C$5Code.c$379$3$143 ==.
                                   3504 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:379: data2[index] = letter;
      000AE3 EF               [12] 3505 	mov	a,r7
      000AE4 24r39            [12] 3506 	add	a,#_getNumberFromKeypad_data2_1_141
      000AE6 F8               [12] 3507 	mov	r0,a
      000AE7 A6 06            [24] 3508 	mov	@r0,ar6
      000AE9 80 0E            [24] 3509 	sjmp	00108$
      000AEB                       3510 00107$:
                           000AEB  3511 	C$5Code.c$381$2$142 ==.
                                   3512 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:381: else if(letter == 35)
      000AEB BE 23 02         [24] 3513 	cjne	r6,#0x23,00133$
      000AEE 80 34            [24] 3514 	sjmp	00110$
      000AF0                       3515 00133$:
                           000AF0  3516 	C$5Code.c$385$2$142 ==.
                                   3517 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:385: else if(letter == 42)
      000AF0 BE 2A 06         [24] 3518 	cjne	r6,#0x2A,00108$
                           000AF3  3519 	C$5Code.c$387$3$145 ==.
                                   3520 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:387: data2[index] = '.';
      000AF3 EF               [12] 3521 	mov	a,r7
      000AF4 24r39            [12] 3522 	add	a,#_getNumberFromKeypad_data2_1_141
      000AF6 F8               [12] 3523 	mov	r0,a
      000AF7 76 2E            [12] 3524 	mov	@r0,#0x2E
      000AF9                       3525 00108$:
                           000AF9  3526 	C$5Code.c$389$2$142 ==.
                                   3527 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:389: lcd_print("%c", data2[index]);
      000AF9 EF               [12] 3528 	mov	a,r7
      000AFA 24r39            [12] 3529 	add	a,#_getNumberFromKeypad_data2_1_141
      000AFC F9               [12] 3530 	mov	r1,a
      000AFD 87 06            [24] 3531 	mov	ar6,@r1
      000AFF 7D 00            [12] 3532 	mov	r5,#0x00
      000B01 C0 07            [24] 3533 	push	ar7
      000B03 C0 06            [24] 3534 	push	ar6
      000B05 C0 05            [24] 3535 	push	ar5
      000B07 74r26            [12] 3536 	mov	a,#___str_2
      000B09 C0 E0            [24] 3537 	push	acc
      000B0B 74s00            [12] 3538 	mov	a,#(___str_2 >> 8)
      000B0D C0 E0            [24] 3539 	push	acc
      000B0F 74 80            [12] 3540 	mov	a,#0x80
      000B11 C0 E0            [24] 3541 	push	acc
      000B13 12r00r5C         [24] 3542 	lcall	_lcd_print
      000B16 E5 81            [12] 3543 	mov	a,sp
      000B18 24 FB            [12] 3544 	add	a,#0xfb
      000B1A F5 81            [12] 3545 	mov	sp,a
      000B1C D0 07            [24] 3546 	pop	ar7
                           000B1E  3547 	C$5Code.c$373$1$141 ==.
                                   3548 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:373: for(index = 0; index < 3; index++)
      000B1E 0F               [12] 3549 	inc	r7
      000B1F BF 03 00         [24] 3550 	cjne	r7,#0x03,00136$
      000B22                       3551 00136$:
      000B22 40 AC            [24] 3552 	jc	00111$
      000B24                       3553 00110$:
                           000B24  3554 	C$5Code.c$392$1$141 ==.
                                   3555 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:392: temp = atoi(data2);
      000B24 90r00r39         [24] 3556 	mov	dptr,#_getNumberFromKeypad_data2_1_141
      000B27 75 F0 40         [24] 3557 	mov	b,#0x40
      000B2A 12r00r00         [24] 3558 	lcall	_atoi
                           000B2D  3559 	C$5Code.c$394$1$141 ==.
                                   3560 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:394: return temp;
                           000B2D  3561 	C$5Code.c$395$1$141 ==.
                           000B2D  3562 	XG$getNumberFromKeypad$0$0 ==.
      000B2D 22               [24] 3563 	ret
                                   3564 ;------------------------------------------------------------
                                   3565 ;Allocation info for local variables in function 'getDesiredGainSteering'
                                   3566 ;------------------------------------------------------------
                                   3567 ;temp                      Allocated to registers r6 r7 
                                   3568 ;------------------------------------------------------------
                           000B2E  3569 	G$getDesiredGainSteering$0$0 ==.
                           000B2E  3570 	C$5Code.c$404$1$141 ==.
                                   3571 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:404: unsigned int getDesiredGainSteering(void)
                                   3572 ;	-----------------------------------------
                                   3573 ;	 function getDesiredGainSteering
                                   3574 ;	-----------------------------------------
      000B2E                       3575 _getDesiredGainSteering:
                           000B2E  3576 	C$5Code.c$408$1$147 ==.
                                   3577 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:408: lcd_clear();
      000B2E 12r00rE1         [24] 3578 	lcall	_lcd_clear
                           000B31  3579 	C$5Code.c$409$1$147 ==.
                                   3580 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:409: lcd_print("Please type in the  ");
      000B31 74r31            [12] 3581 	mov	a,#___str_16
      000B33 C0 E0            [24] 3582 	push	acc
      000B35 74s01            [12] 3583 	mov	a,#(___str_16 >> 8)
      000B37 C0 E0            [24] 3584 	push	acc
      000B39 74 80            [12] 3585 	mov	a,#0x80
      000B3B C0 E0            [24] 3586 	push	acc
      000B3D 12r00r5C         [24] 3587 	lcall	_lcd_print
      000B40 15 81            [12] 3588 	dec	sp
      000B42 15 81            [12] 3589 	dec	sp
      000B44 15 81            [12] 3590 	dec	sp
                           000B46  3591 	C$5Code.c$410$1$147 ==.
                                   3592 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:410: lcd_print("steering gain: ");
      000B46 74r46            [12] 3593 	mov	a,#___str_17
      000B48 C0 E0            [24] 3594 	push	acc
      000B4A 74s01            [12] 3595 	mov	a,#(___str_17 >> 8)
      000B4C C0 E0            [24] 3596 	push	acc
      000B4E 74 80            [12] 3597 	mov	a,#0x80
      000B50 C0 E0            [24] 3598 	push	acc
      000B52 12r00r5C         [24] 3599 	lcall	_lcd_print
      000B55 15 81            [12] 3600 	dec	sp
      000B57 15 81            [12] 3601 	dec	sp
      000B59 15 81            [12] 3602 	dec	sp
                           000B5B  3603 	C$5Code.c$412$1$147 ==.
                                   3604 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:412: temp = getNumberFromKeypad();
      000B5B 12r0ArC5         [24] 3605 	lcall	_getNumberFromKeypad
      000B5E AE 82            [24] 3606 	mov	r6,dpl
      000B60 AF 83            [24] 3607 	mov	r7,dph
                           000B62  3608 	C$5Code.c$413$1$147 ==.
                                   3609 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:413: printf("\rGain Steering: %u\n\r", temp);
      000B62 C0 07            [24] 3610 	push	ar7
      000B64 C0 06            [24] 3611 	push	ar6
      000B66 C0 06            [24] 3612 	push	ar6
      000B68 C0 07            [24] 3613 	push	ar7
      000B6A 74r56            [12] 3614 	mov	a,#___str_18
      000B6C C0 E0            [24] 3615 	push	acc
      000B6E 74s01            [12] 3616 	mov	a,#(___str_18 >> 8)
      000B70 C0 E0            [24] 3617 	push	acc
      000B72 74 80            [12] 3618 	mov	a,#0x80
      000B74 C0 E0            [24] 3619 	push	acc
      000B76 12r00r00         [24] 3620 	lcall	_printf
      000B79 E5 81            [12] 3621 	mov	a,sp
      000B7B 24 FB            [12] 3622 	add	a,#0xfb
      000B7D F5 81            [12] 3623 	mov	sp,a
      000B7F D0 06            [24] 3624 	pop	ar6
      000B81 D0 07            [24] 3625 	pop	ar7
                           000B83  3626 	C$5Code.c$414$1$147 ==.
                                   3627 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:414: return temp;
      000B83 8E 82            [24] 3628 	mov	dpl,r6
      000B85 8F 83            [24] 3629 	mov	dph,r7
                           000B87  3630 	C$5Code.c$415$1$147 ==.
                           000B87  3631 	XG$getDesiredGainSteering$0$0 ==.
      000B87 22               [24] 3632 	ret
                                   3633 ;------------------------------------------------------------
                                   3634 ;Allocation info for local variables in function 'getDesiredGainDriveMotorX'
                                   3635 ;------------------------------------------------------------
                                   3636 ;temp                      Allocated to registers r6 r7 
                                   3637 ;------------------------------------------------------------
                           000B88  3638 	G$getDesiredGainDriveMotorX$0$0 ==.
                           000B88  3639 	C$5Code.c$422$1$147 ==.
                                   3640 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:422: unsigned int getDesiredGainDriveMotorX(void)
                                   3641 ;	-----------------------------------------
                                   3642 ;	 function getDesiredGainDriveMotorX
                                   3643 ;	-----------------------------------------
      000B88                       3644 _getDesiredGainDriveMotorX:
                           000B88  3645 	C$5Code.c$426$1$149 ==.
                                   3646 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:426: lcd_clear();
      000B88 12r00rE1         [24] 3647 	lcall	_lcd_clear
                           000B8B  3648 	C$5Code.c$427$1$149 ==.
                                   3649 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:427: lcd_print("Please type in the  ");
      000B8B 74r31            [12] 3650 	mov	a,#___str_16
      000B8D C0 E0            [24] 3651 	push	acc
      000B8F 74s01            [12] 3652 	mov	a,#(___str_16 >> 8)
      000B91 C0 E0            [24] 3653 	push	acc
      000B93 74 80            [12] 3654 	mov	a,#0x80
      000B95 C0 E0            [24] 3655 	push	acc
      000B97 12r00r5C         [24] 3656 	lcall	_lcd_print
      000B9A 15 81            [12] 3657 	dec	sp
      000B9C 15 81            [12] 3658 	dec	sp
      000B9E 15 81            [12] 3659 	dec	sp
                           000BA0  3660 	C$5Code.c$428$1$149 ==.
                                   3661 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:428: lcd_print("driver gain (x): ");
      000BA0 74r6B            [12] 3662 	mov	a,#___str_19
      000BA2 C0 E0            [24] 3663 	push	acc
      000BA4 74s01            [12] 3664 	mov	a,#(___str_19 >> 8)
      000BA6 C0 E0            [24] 3665 	push	acc
      000BA8 74 80            [12] 3666 	mov	a,#0x80
      000BAA C0 E0            [24] 3667 	push	acc
      000BAC 12r00r5C         [24] 3668 	lcall	_lcd_print
      000BAF 15 81            [12] 3669 	dec	sp
      000BB1 15 81            [12] 3670 	dec	sp
      000BB3 15 81            [12] 3671 	dec	sp
                           000BB5  3672 	C$5Code.c$430$1$149 ==.
                                   3673 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:430: temp = getNumberFromKeypad();
      000BB5 12r0ArC5         [24] 3674 	lcall	_getNumberFromKeypad
      000BB8 AE 82            [24] 3675 	mov	r6,dpl
      000BBA AF 83            [24] 3676 	mov	r7,dph
                           000BBC  3677 	C$5Code.c$431$1$149 ==.
                                   3678 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:431: printf("Gain Drive Motor (x): %u\n\r", temp);
      000BBC C0 07            [24] 3679 	push	ar7
      000BBE C0 06            [24] 3680 	push	ar6
      000BC0 C0 06            [24] 3681 	push	ar6
      000BC2 C0 07            [24] 3682 	push	ar7
      000BC4 74r7D            [12] 3683 	mov	a,#___str_20
      000BC6 C0 E0            [24] 3684 	push	acc
      000BC8 74s01            [12] 3685 	mov	a,#(___str_20 >> 8)
      000BCA C0 E0            [24] 3686 	push	acc
      000BCC 74 80            [12] 3687 	mov	a,#0x80
      000BCE C0 E0            [24] 3688 	push	acc
      000BD0 12r00r00         [24] 3689 	lcall	_printf
      000BD3 E5 81            [12] 3690 	mov	a,sp
      000BD5 24 FB            [12] 3691 	add	a,#0xfb
      000BD7 F5 81            [12] 3692 	mov	sp,a
      000BD9 D0 06            [24] 3693 	pop	ar6
      000BDB D0 07            [24] 3694 	pop	ar7
                           000BDD  3695 	C$5Code.c$432$1$149 ==.
                                   3696 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:432: return temp;
      000BDD 8E 82            [24] 3697 	mov	dpl,r6
      000BDF 8F 83            [24] 3698 	mov	dph,r7
                           000BE1  3699 	C$5Code.c$433$1$149 ==.
                           000BE1  3700 	XG$getDesiredGainDriveMotorX$0$0 ==.
      000BE1 22               [24] 3701 	ret
                                   3702 ;------------------------------------------------------------
                                   3703 ;Allocation info for local variables in function 'getDesiredGainDriveMotorY'
                                   3704 ;------------------------------------------------------------
                                   3705 ;temp                      Allocated to registers r6 r7 
                                   3706 ;------------------------------------------------------------
                           000BE2  3707 	G$getDesiredGainDriveMotorY$0$0 ==.
                           000BE2  3708 	C$5Code.c$435$1$149 ==.
                                   3709 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:435: unsigned int getDesiredGainDriveMotorY(void)
                                   3710 ;	-----------------------------------------
                                   3711 ;	 function getDesiredGainDriveMotorY
                                   3712 ;	-----------------------------------------
      000BE2                       3713 _getDesiredGainDriveMotorY:
                           000BE2  3714 	C$5Code.c$439$1$151 ==.
                                   3715 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:439: lcd_clear();
      000BE2 12r00rE1         [24] 3716 	lcall	_lcd_clear
                           000BE5  3717 	C$5Code.c$440$1$151 ==.
                                   3718 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:440: lcd_print("Please type in the  ");
      000BE5 74r31            [12] 3719 	mov	a,#___str_16
      000BE7 C0 E0            [24] 3720 	push	acc
      000BE9 74s01            [12] 3721 	mov	a,#(___str_16 >> 8)
      000BEB C0 E0            [24] 3722 	push	acc
      000BED 74 80            [12] 3723 	mov	a,#0x80
      000BEF C0 E0            [24] 3724 	push	acc
      000BF1 12r00r5C         [24] 3725 	lcall	_lcd_print
      000BF4 15 81            [12] 3726 	dec	sp
      000BF6 15 81            [12] 3727 	dec	sp
      000BF8 15 81            [12] 3728 	dec	sp
                           000BFA  3729 	C$5Code.c$441$1$151 ==.
                                   3730 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:441: lcd_print("driver gain (y): ");
      000BFA 74r98            [12] 3731 	mov	a,#___str_21
      000BFC C0 E0            [24] 3732 	push	acc
      000BFE 74s01            [12] 3733 	mov	a,#(___str_21 >> 8)
      000C00 C0 E0            [24] 3734 	push	acc
      000C02 74 80            [12] 3735 	mov	a,#0x80
      000C04 C0 E0            [24] 3736 	push	acc
      000C06 12r00r5C         [24] 3737 	lcall	_lcd_print
      000C09 15 81            [12] 3738 	dec	sp
      000C0B 15 81            [12] 3739 	dec	sp
      000C0D 15 81            [12] 3740 	dec	sp
                           000C0F  3741 	C$5Code.c$443$1$151 ==.
                                   3742 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:443: temp = getNumberFromKeypad();
      000C0F 12r0ArC5         [24] 3743 	lcall	_getNumberFromKeypad
      000C12 AE 82            [24] 3744 	mov	r6,dpl
      000C14 AF 83            [24] 3745 	mov	r7,dph
                           000C16  3746 	C$5Code.c$444$1$151 ==.
                                   3747 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:444: printf("Gain Drive Motor (y): %u\n\r", temp);
      000C16 C0 07            [24] 3748 	push	ar7
      000C18 C0 06            [24] 3749 	push	ar6
      000C1A C0 06            [24] 3750 	push	ar6
      000C1C C0 07            [24] 3751 	push	ar7
      000C1E 74rAA            [12] 3752 	mov	a,#___str_22
      000C20 C0 E0            [24] 3753 	push	acc
      000C22 74s01            [12] 3754 	mov	a,#(___str_22 >> 8)
      000C24 C0 E0            [24] 3755 	push	acc
      000C26 74 80            [12] 3756 	mov	a,#0x80
      000C28 C0 E0            [24] 3757 	push	acc
      000C2A 12r00r00         [24] 3758 	lcall	_printf
      000C2D E5 81            [12] 3759 	mov	a,sp
      000C2F 24 FB            [12] 3760 	add	a,#0xfb
      000C31 F5 81            [12] 3761 	mov	sp,a
      000C33 D0 06            [24] 3762 	pop	ar6
      000C35 D0 07            [24] 3763 	pop	ar7
                           000C37  3764 	C$5Code.c$445$1$151 ==.
                                   3765 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:445: return temp;
      000C37 8E 82            [24] 3766 	mov	dpl,r6
      000C39 8F 83            [24] 3767 	mov	dph,r7
                           000C3B  3768 	C$5Code.c$446$1$151 ==.
                           000C3B  3769 	XG$getDesiredGainDriveMotorY$0$0 ==.
      000C3B 22               [24] 3770 	ret
                                   3771 ;------------------------------------------------------------
                                   3772 ;Allocation info for local variables in function 'Port_Init'
                                   3773 ;------------------------------------------------------------
                           000C3C  3774 	G$Port_Init$0$0 ==.
                           000C3C  3775 	C$5Code.c$453$1$151 ==.
                                   3776 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:453: void Port_Init()
                                   3777 ;	-----------------------------------------
                                   3778 ;	 function Port_Init
                                   3779 ;	-----------------------------------------
      000C3C                       3780 _Port_Init:
                           000C3C  3781 	C$5Code.c$456$1$152 ==.
                                   3782 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:456: P1MDIN &= 0xBF; //Sets something with 1011 1111, ADC
      000C3C 53 BD BF         [24] 3783 	anl	_P1MDIN,#0xBF
                           000C3F  3784 	C$5Code.c$457$1$152 ==.
                                   3785 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:457: P1MDOUT |= 0x01 ;  //set output pin for CEX0 in push-pull mode
      000C3F 43 A5 01         [24] 3786 	orl	_P1MDOUT,#0x01
                           000C42  3787 	C$5Code.c$458$1$152 ==.
                                   3788 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:458: P1MDOUT |= 0x04 ; //set output pin for CEX2 in push-pull mode 0000 0100
      000C42 43 A5 04         [24] 3789 	orl	_P1MDOUT,#0x04
                           000C45  3790 	C$5Code.c$459$1$152 ==.
                                   3791 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:459: P1 |= ~0xBF; // send logic 1 to 0100 0000
      000C45 AF 90            [24] 3792 	mov	r7,_P1
      000C47 74 40            [12] 3793 	mov	a,#0x40
      000C49 4F               [12] 3794 	orl	a,r7
      000C4A F5 90            [12] 3795 	mov	_P1,a
                           000C4C  3796 	C$5Code.c$461$1$152 ==.
                                   3797 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:461: P3MDOUT &= 0xBF; //set input pin for slide switch on P3.6
      000C4C 53 A7 BF         [24] 3798 	anl	_P3MDOUT,#0xBF
                           000C4F  3799 	C$5Code.c$462$1$152 ==.
                                   3800 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:462: P3MDOUT &= ~0x80;  //set input for P3.7
      000C4F AF A7            [24] 3801 	mov	r7,_P3MDOUT
      000C51 74 7F            [12] 3802 	mov	a,#0x7F
      000C53 5F               [12] 3803 	anl	a,r7
      000C54 F5 A7            [12] 3804 	mov	_P3MDOUT,a
                           000C56  3805 	C$5Code.c$463$1$152 ==.
                                   3806 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:463: P3 |=0x80;  //Set to high impedence
      000C56 43 B0 80         [24] 3807 	orl	_P3,#0x80
                           000C59  3808 	C$5Code.c$464$1$152 ==.
                           000C59  3809 	XG$Port_Init$0$0 ==.
      000C59 22               [24] 3810 	ret
                                   3811 ;------------------------------------------------------------
                                   3812 ;Allocation info for local variables in function 'ADC_Init'
                                   3813 ;------------------------------------------------------------
                           000C5A  3814 	G$ADC_Init$0$0 ==.
                           000C5A  3815 	C$5Code.c$469$1$152 ==.
                                   3816 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:469: void ADC_Init(void)
                                   3817 ;	-----------------------------------------
                                   3818 ;	 function ADC_Init
                                   3819 ;	-----------------------------------------
      000C5A                       3820 _ADC_Init:
                           000C5A  3821 	C$5Code.c$471$1$154 ==.
                                   3822 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:471: REF0CN = 0x03; // Set Vref to use internal reference voltage (2.4 V)
      000C5A 75 D1 03         [24] 3823 	mov	_REF0CN,#0x03
                           000C5D  3824 	C$5Code.c$472$1$154 ==.
                                   3825 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:472: ADC1CN = 0x80; // Enable A/D converter (ADC1)
      000C5D 75 AA 80         [24] 3826 	mov	_ADC1CN,#0x80
                           000C60  3827 	C$5Code.c$473$1$154 ==.
                                   3828 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:473: ADC1CF |= 0x01; // Set A/D converter gain to 1
      000C60 43 AB 01         [24] 3829 	orl	_ADC1CF,#0x01
                           000C63  3830 	C$5Code.c$475$1$154 ==.
                                   3831 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:475: AMX1SL = 6; // Set P1.6 as the analog input for ADC1
      000C63 75 AC 06         [24] 3832 	mov	_AMX1SL,#0x06
                           000C66  3833 	C$5Code.c$477$1$154 ==.
                           000C66  3834 	XG$ADC_Init$0$0 ==.
      000C66 22               [24] 3835 	ret
                                   3836 ;------------------------------------------------------------
                                   3837 ;Allocation info for local variables in function 'XBR0_Init'
                                   3838 ;------------------------------------------------------------
                           000C67  3839 	G$XBR0_Init$0$0 ==.
                           000C67  3840 	C$5Code.c$482$1$154 ==.
                                   3841 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:482: void XBR0_Init()
                                   3842 ;	-----------------------------------------
                                   3843 ;	 function XBR0_Init
                                   3844 ;	-----------------------------------------
      000C67                       3845 _XBR0_Init:
                           000C67  3846 	C$5Code.c$484$1$155 ==.
                                   3847 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:484: XBR0 = 0x27; //configure crossbar with UART, SPI, SMBus, and CEX channels as
      000C67 75 E1 27         [24] 3848 	mov	_XBR0,#0x27
                           000C6A  3849 	C$5Code.c$486$1$155 ==.
                           000C6A  3850 	XG$XBR0_Init$0$0 ==.
      000C6A 22               [24] 3851 	ret
                                   3852 ;------------------------------------------------------------
                                   3853 ;Allocation info for local variables in function 'PCA_Init'
                                   3854 ;------------------------------------------------------------
                           000C6B  3855 	G$PCA_Init$0$0 ==.
                           000C6B  3856 	C$5Code.c$491$1$155 ==.
                                   3857 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:491: void PCA_Init(void)
                                   3858 ;	-----------------------------------------
                                   3859 ;	 function PCA_Init
                                   3860 ;	-----------------------------------------
      000C6B                       3861 _PCA_Init:
                           000C6B  3862 	C$5Code.c$493$1$157 ==.
                                   3863 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:493: PCA0MD &=0xF1;  //Set to systemclock/12 mode
      000C6B 53 D9 F1         [24] 3864 	anl	_PCA0MD,#0xF1
                           000C6E  3865 	C$5Code.c$494$1$157 ==.
                                   3866 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:494: PCA0MD |=0x01;
      000C6E 43 D9 01         [24] 3867 	orl	_PCA0MD,#0x01
                           000C71  3868 	C$5Code.c$496$1$157 ==.
                                   3869 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:496: PCA0CN |= 0x40; //enable counter, bit 6
      000C71 43 D8 40         [24] 3870 	orl	_PCA0CN,#0x40
                           000C74  3871 	C$5Code.c$498$1$157 ==.
                                   3872 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:498: PCA0CPM0 |= 0xC2; //Set to 16 bit compare mode COMPASS
      000C74 43 DA C2         [24] 3873 	orl	_PCA0CPM0,#0xC2
                           000C77  3874 	C$5Code.c$499$1$157 ==.
                                   3875 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:499: PCA0CPM2 |= 0xC2; //set 16 bit PWM (bit 7); enable compare function (bit 6); enable PWM mode 1 (bit1) RANGER
      000C77 43 DC C2         [24] 3876 	orl	_PCA0CPM2,#0xC2
                           000C7A  3877 	C$5Code.c$501$1$157 ==.
                                   3878 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:501: EIE1 |= 0x08; //enable PCA0 interrupt (bit 3)
      000C7A 43 E6 08         [24] 3879 	orl	_EIE1,#0x08
                           000C7D  3880 	C$5Code.c$502$1$157 ==.
                                   3881 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:502: EA = 1;
      000C7D D2 AF            [12] 3882 	setb	_EA
                           000C7F  3883 	C$5Code.c$503$1$157 ==.
                           000C7F  3884 	XG$PCA_Init$0$0 ==.
      000C7F 22               [24] 3885 	ret
                                   3886 ;------------------------------------------------------------
                                   3887 ;Allocation info for local variables in function 'PCA_ISR'
                                   3888 ;------------------------------------------------------------
                           000C80  3889 	G$PCA_ISR$0$0 ==.
                           000C80  3890 	C$5Code.c$508$1$157 ==.
                                   3891 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:508: void PCA_ISR ( void ) __interrupt 9
                                   3892 ;	-----------------------------------------
                                   3893 ;	 function PCA_ISR
                                   3894 ;	-----------------------------------------
      000C80                       3895 _PCA_ISR:
      000C80 C0 E0            [24] 3896 	push	acc
      000C82 C0 D0            [24] 3897 	push	psw
                           000C84  3898 	C$5Code.c$510$1$159 ==.
                                   3899 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:510: if (CF)
      000C84 30 DF 20         [24] 3900 	jnb	_CF,00102$
                           000C87  3901 	C$5Code.c$512$2$160 ==.
                                   3902 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:512: counts++;
      000C87 05*1E            [12] 3903 	inc	_counts
      000C89 E4               [12] 3904 	clr	a
      000C8A B5*1E 02         [24] 3905 	cjne	a,_counts,00109$
      000C8D 05*1F            [12] 3906 	inc	(_counts + 1)
      000C8F                       3907 00109$:
                           000C8F  3908 	C$5Code.c$513$2$160 ==.
                                   3909 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:513: counts_accel++;
      000C8F 05*20            [12] 3910 	inc	_counts_accel
      000C91 E4               [12] 3911 	clr	a
      000C92 B5*20 02         [24] 3912 	cjne	a,_counts_accel,00110$
      000C95 05*21            [12] 3913 	inc	(_counts_accel + 1)
      000C97                       3914 00110$:
                           000C97  3915 	C$5Code.c$514$2$160 ==.
                                   3916 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:514: counts_lcd++;
      000C97 05*22            [12] 3917 	inc	_counts_lcd
      000C99 E4               [12] 3918 	clr	a
      000C9A B5*22 02         [24] 3919 	cjne	a,_counts_lcd,00111$
      000C9D 05*23            [12] 3920 	inc	(_counts_lcd + 1)
      000C9F                       3921 00111$:
                           000C9F  3922 	C$5Code.c$515$2$160 ==.
                                   3923 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:515: CF = 0; // Clear overflow flag
      000C9F C2 DF            [12] 3924 	clr	_CF
                           000CA1  3925 	C$5Code.c$516$2$160 ==.
                                   3926 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:516: PCA0 = 28672; // Start count for 20 ms
      000CA1 75 E9 00         [24] 3927 	mov	((_PCA0 >> 0) & 0xFF),#0x00
      000CA4 75 F9 70         [24] 3928 	mov	((_PCA0 >> 8) & 0xFF),#0x70
      000CA7                       3929 00102$:
                           000CA7  3930 	C$5Code.c$519$1$159 ==.
                                   3931 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:519: PCA0CN &= 0xC0; // Handle other PCA interrupt sources
      000CA7 53 D8 C0         [24] 3932 	anl	_PCA0CN,#0xC0
      000CAA D0 D0            [24] 3933 	pop	psw
      000CAC D0 E0            [24] 3934 	pop	acc
                           000CAE  3935 	C$5Code.c$520$1$159 ==.
                           000CAE  3936 	XG$PCA_ISR$0$0 ==.
      000CAE 32               [24] 3937 	reti
                                   3938 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   3939 ;	eliminated unneeded push/pop dpl
                                   3940 ;	eliminated unneeded push/pop dph
                                   3941 ;	eliminated unneeded push/pop b
                                   3942 ;------------------------------------------------------------
                                   3943 ;Allocation info for local variables in function 'SMB0_Init'
                                   3944 ;------------------------------------------------------------
                           000CAF  3945 	G$SMB0_Init$0$0 ==.
                           000CAF  3946 	C$5Code.c$525$1$159 ==.
                                   3947 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:525: void SMB0_Init()
                                   3948 ;	-----------------------------------------
                                   3949 ;	 function SMB0_Init
                                   3950 ;	-----------------------------------------
      000CAF                       3951 _SMB0_Init:
                           000CAF  3952 	C$5Code.c$527$1$161 ==.
                                   3953 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:527: SMB0CR = 0x93; // set SCL to 100KHz
      000CAF 75 CF 93         [24] 3954 	mov	_SMB0CR,#0x93
                           000CB2  3955 	C$5Code.c$528$1$161 ==.
                                   3956 ;	C:\Users\Christopher\Google Drive\School\2015 Spring - Embedded Control\Labs\05 - Accel\Code\5Code.c:528: ENSMB = TRUE; // enable SMBUS0
      000CB2 D2 C6            [12] 3957 	setb	_ENSMB
                           000CB4  3958 	C$5Code.c$529$1$161 ==.
                           000CB4  3959 	XG$SMB0_Init$0$0 ==.
      000CB4 22               [24] 3960 	ret
                                   3961 	.area CSEG    (CODE)
                                   3962 	.area CONST   (CODE)
                           000000  3963 F5Code$__str_0$0$0 == .
      000000                       3964 ___str_0:
      000000 0A                    3965 	.db 0x0A
      000001 54 79 70 65 20 64 69  3966 	.ascii "Type digits; end w/#"
             67 69 74 73 3B 20 65
             6E 64 20 77 2F 23
      000015 00                    3967 	.db 0x00
                           000016  3968 F5Code$__str_1$0$0 == .
      000016                       3969 ___str_1:
      000016 20 20 20 20 20 25 63  3970 	.ascii "     %c%c%c%c%c"
             25 63 25 63 25 63 25
             63
      000025 00                    3971 	.db 0x00
                           000026  3972 F5Code$__str_2$0$0 == .
      000026                       3973 ___str_2:
      000026 25 63                 3974 	.ascii "%c"
      000028 00                    3975 	.db 0x00
                           000029  3976 F5Code$__str_3$0$0 == .
      000029                       3977 ___str_3:
      000029 20 50 75 74 20 63 61  3978 	.ascii " Put car on level   "
             72 20 6F 6E 20 6C 65
             76 65 6C 20 20 20
      00003D 00                    3979 	.db 0x00
                           00003E  3980 F5Code$__str_4$0$0 == .
      00003E                       3981 ___str_4:
      00003E 20 73 75 72 66 61 63  3982 	.ascii " surface and press  "
             65 20 61 6E 64 20 70
             72 65 73 73 20 20
      000052 00                    3983 	.db 0x00
                           000053  3984 F5Code$__str_5$0$0 == .
      000053                       3985 ___str_5:
      000053 20 70 6F 75 6E 64 20  3986 	.ascii " pound (#)          "
             28 23 29 20 20 20 20
             20 20 20 20 20 20
      000067 00                    3987 	.db 0x00
                           000068  3988 F5Code$__str_6$0$0 == .
      000068                       3989 ___str_6:
      000068 20 20 20 20 20 20 20  3990 	.ascii "                    "
             20 20 20 20 20 20 20
             20 20 20 20 20 20
      00007C 00                    3991 	.db 0x00
                           00007D  3992 F5Code$__str_7$0$0 == .
      00007D                       3993 ___str_7:
      00007D 20 52 65 61 64 69 6E  3994 	.ascii " Reading accel      "
             67 20 61 63 63 65 6C
             20 20 20 20 20 20
      000091 00                    3995 	.db 0x00
                           000092  3996 F5Code$__str_8$0$0 == .
      000092                       3997 ___str_8:
      000092 20 52 65 61 64 69 6E  3998 	.ascii " Reading accel.     "
             67 20 61 63 63 65 6C
             2E 20 20 20 20 20
      0000A6 00                    3999 	.db 0x00
                           0000A7  4000 F5Code$__str_9$0$0 == .
      0000A7                       4001 ___str_9:
      0000A7 20 52 65 61 64 69 6E  4002 	.ascii " Reading accel..    "
             67 20 61 63 63 65 6C
             2E 2E 20 20 20 20
      0000BB 00                    4003 	.db 0x00
                           0000BC  4004 F5Code$__str_10$0$0 == .
      0000BC                       4005 ___str_10:
      0000BC 20 52 65 61 64 69 6E  4006 	.ascii " Reading accel...   "
             67 20 61 63 63 65 6C
             2E 2E 2E 20 20 20
      0000D0 00                    4007 	.db 0x00
                           0000D1  4008 F5Code$__str_11$0$0 == .
      0000D1                       4009 ___str_11:
      0000D1 79 30 3A 20 25 64     4010 	.ascii "y0: %d"
      0000D7 0A                    4011 	.db 0x0A
      0000D8 0D                    4012 	.db 0x0D
      0000D9 00                    4013 	.db 0x00
                           0000DA  4014 F5Code$__str_12$0$0 == .
      0000DA                       4015 ___str_12:
      0000DA 78 30 3A 20 25 64     4016 	.ascii "x0: %d"
      0000E0 0A                    4017 	.db 0x0A
      0000E1 0D                    4018 	.db 0x0D
      0000E2 00                    4019 	.db 0x00
                           0000E3  4020 F5Code$__str_13$0$0 == .
      0000E3                       4021 ___str_13:
      0000E3 25 35 64 2D 78 30     4022 	.ascii "%5d-x0"
      0000E9 0A                    4023 	.db 0x0A
      0000EA 0D                    4024 	.db 0x0D
      0000EB 00                    4025 	.db 0x00
                           0000EC  4026 F5Code$__str_14$0$0 == .
      0000EC                       4027 ___str_14:
      0000EC 25 35 64 2D 79 30     4028 	.ascii "%5d-y0"
      0000F2 0A                    4029 	.db 0x0A
      0000F3 0D                    4030 	.db 0x0D
      0000F4 0A                    4031 	.db 0x0A
      0000F5 00                    4032 	.db 0x00
                           0000F6  4033 F5Code$__str_15$0$0 == .
      0000F6                       4034 ___str_15:
      0000F6 25 35 64 2D 67 78 20  4035 	.ascii "%5d-gx  %5d-gy  %5d-fgx  %5d-fgy  %4d-MotoPW  %4d-SterPW"
             20 25 35 64 2D 67 79
             20 20 25 35 64 2D 66
             67 78 20 20 25 35 64
             2D 66 67 79 20 20 25
             34 64 2D 4D 6F 74 6F
             50 57 20 20 25 34 64
             2D 53 74 65 72 50 57
      00012E 0A                    4036 	.db 0x0A
      00012F 0D                    4037 	.db 0x0D
      000130 00                    4038 	.db 0x00
                           000131  4039 F5Code$__str_16$0$0 == .
      000131                       4040 ___str_16:
      000131 50 6C 65 61 73 65 20  4041 	.ascii "Please type in the  "
             74 79 70 65 20 69 6E
             20 74 68 65 20 20
      000145 00                    4042 	.db 0x00
                           000146  4043 F5Code$__str_17$0$0 == .
      000146                       4044 ___str_17:
      000146 73 74 65 65 72 69 6E  4045 	.ascii "steering gain: "
             67 20 67 61 69 6E 3A
             20
      000155 00                    4046 	.db 0x00
                           000156  4047 F5Code$__str_18$0$0 == .
      000156                       4048 ___str_18:
      000156 0D                    4049 	.db 0x0D
      000157 47 61 69 6E 20 53 74  4050 	.ascii "Gain Steering: %u"
             65 65 72 69 6E 67 3A
             20 25 75
      000168 0A                    4051 	.db 0x0A
      000169 0D                    4052 	.db 0x0D
      00016A 00                    4053 	.db 0x00
                           00016B  4054 F5Code$__str_19$0$0 == .
      00016B                       4055 ___str_19:
      00016B 64 72 69 76 65 72 20  4056 	.ascii "driver gain (x): "
             67 61 69 6E 20 28 78
             29 3A 20
      00017C 00                    4057 	.db 0x00
                           00017D  4058 F5Code$__str_20$0$0 == .
      00017D                       4059 ___str_20:
      00017D 47 61 69 6E 20 44 72  4060 	.ascii "Gain Drive Motor (x): %u"
             69 76 65 20 4D 6F 74
             6F 72 20 28 78 29 3A
             20 25 75
      000195 0A                    4061 	.db 0x0A
      000196 0D                    4062 	.db 0x0D
      000197 00                    4063 	.db 0x00
                           000198  4064 F5Code$__str_21$0$0 == .
      000198                       4065 ___str_21:
      000198 64 72 69 76 65 72 20  4066 	.ascii "driver gain (y): "
             67 61 69 6E 20 28 79
             29 3A 20
      0001A9 00                    4067 	.db 0x00
                           0001AA  4068 F5Code$__str_22$0$0 == .
      0001AA                       4069 ___str_22:
      0001AA 47 61 69 6E 20 44 72  4070 	.ascii "Gain Drive Motor (y): %u"
             69 76 65 20 4D 6F 74
             6F 72 20 28 79 29 3A
             20 25 75
      0001C2 0A                    4071 	.db 0x0A
      0001C3 0D                    4072 	.db 0x0D
      0001C4 00                    4073 	.db 0x00
                                   4074 	.area XINIT   (CODE)
                                   4075 	.area CABS    (ABS,CODE)
