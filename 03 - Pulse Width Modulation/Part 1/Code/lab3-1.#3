/* Sample code for speed control using PWM. */
#include <stdio.h>
#include <c8051_SDCC.h>
#define PW_MIN 2030
#define PW_MAX 3500
#define PW_NEUT 2760
//-----------------------------------------------------------------------------
// 8051 Initialization Functions
//-----------------------------------------------------------------------------
void Port_Init(void);
void PCA_Init (void);
void XBR0_Init(void);
void Drive_Motor(void);
unsigned int MOTOR_PW = 0;



//-----------------------------------------------------------------------------
// Main Function
//-----------------------------------------------------------------------------
void main(void)
{
    // initialize board
    Sys_Init();
    putchar(' '); //the quotes in this line may not format correctly
    Port_Init();
    XBR0_Init();
    PCA_Init();
	
	
    //print beginning message
    printf("Embedded Control Drive Motor Control");
	
    //add code to set the servo motor in neutral
	MOTOR_PW = PW_NEUT;
	PCA0CP1 = 65536 - MOTOR_PW;
	
	
    while(1)
	{
		Drive_Motor();
	}
}




//-----------------------------------------------------------------------------
// Drive_Motor
//-----------------------------------------------------------------------------
//
// Vary the pulsewidth based on the user input to change the speed
// of the drive motor.
//
void Drive_Motor()
{
    char input;
    //wait for a key to be pressed
    input = getchar();
    if(input == 'f') //if 'f' is pressed by the user
    {
        if(MOTOR_PW < PW_MAX)
        MOTOR_PW = MOTOR_PW + 10; //increase the steering pulsewidth by 10
    }
    else if(input == 's') //if 's' is pressed by the user
    {
        if(MOTOR_PW > PW_MIN)
        MOTOR_PW = MOTOR_PW - 10; //decrease the steering pulsewidth by 10
    }
    PCA0CP2 = 0xFFFF - MOTOR_PW;
}



//-----------------------------------------------------------------------------
// Port_Init
//-----------------------------------------------------------------------------
//
// Set up ports for input and output
//
void Port_Init()
{
    P1MDOUT |= 0x04 ;//set output pin for CEX2 in push-pull mode
}



//-----------------------------------------------------------------------------
// XBR0_Init
//-----------------------------------------------------------------------------
//
// Set up the crossbar
//
void XBR0_Init()
{
    XBR0 = 0x27; //configure crossbar with UART, SPI, SMBus, and CEX channels as
    // in worksheet
}




//-----------------------------------------------------------------------------
// PCA_Init
//-----------------------------------------------------------------------------
//
// Set up Programmable Counter Array
//
void PCA_Init(void)
{
	PCA0CN |= 0x40; //enable counter, bit 6
	PCA0MD |= 0x01; //count sysclck bits 1-3 (sets them to 000 to use sysclock/12) and enable pca0 overflow
	PCA0CPM0 |= 0xC2; //set 16 bit PWM (bit 7); enable compare function (bit 6); enable PWM mode 1 (bit1)
	EIE1 |= 0x08; //enable PCA0 interrupt (bit 3)
	EA = 1;

    // reference to the sample code in Example 4.5 - Pulse Width Modulation
    // implemented using the PCA (Programmable Counter Array, p. 50 in Lab Manual.
    // Use a 16 bit counter with SYSCLK/12.
}



//-----------------------------------------------------------------------------
// PCA_ISR
//-----------------------------------------------------------------------------
//
// Interrupt Service Routine for Programmable Counter Array Overflow Interrupt
//
void PCA_ISR ( void ) interrupt 9
{
	
	if (CF)
	{
		CF = 0; // Clear overflow flag
		PCA0 = 28672; // Start count for 20 ms
	}
	
	PCA0CN &= 0xC0; // Handle other PCA interrupt sources
	
    // reference to the sample code in Example 4.5 -Pulse Width Modulation
    // implemented using the PCA (Programmable Counter Array), p. 50 in Lab Manual.
}